%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title:  5_01.eps
%%Creator: Adobe Illustrator(R) 19.0
%%For:  
%%CreationDate: 2/7/2020
%%BoundingBox: 0 0 612 330
%%HiResBoundingBox: 0 0 612 330
%%CropBox: 0 0 612 330
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.0.0 x44 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 72 8%%BeginData: 6177 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FD0AFF7D52FD7EFF272EFD7DFFA852A8FD7DFF59A80559A8FD37FFA8277D
%FD40FFA87D2E592E52FD31FF7DA8A8FFFF7D0B2EF8FD1BFF7DA8A8FD20FF
%AF7D52522EFF7D2EFD2DFFA859350C0B050B052705FF7DF87DFD16FFA835
%350C05050B052E7DFD19FFA8842E340C05F80583FFF859FD2BFFA835FD05
%0C120C050B59A87DF883FD14FF8435FD050C120C0C050B2784FD16FF8335
%0B0C0C0C050C2EFF520C05AEFD29FF590C0B0C0C0C052E0C0B05AFA87D05
%0559FD13FF590C0B0C05FD050C2E120C0C0452AFFD12FFAF2E0C0B0C0B0C
%050505A8A80B050C047DFD25FFA859350C0C120C0C0C2D340C058AFFFFFF
%27F82EAEFD0FFFA859350C0C12052E052E0C0C05520C0C0C12052EAFFD0F
%FF7D59FD080C052EFF59052EAF270459FD24FF52FD040C0B0C0C0C0B0C05
%35FFFFFFA8F805F82EA8FD0DFFA852FD040C05592E0C050B0C0C0B0C0C0C
%0B0C052EFD0EFF7D2EFD040C0B0C0C05050584A80405847DF80C0459FD22
%FF7D2E130C0C0C120C0C0C120534FFFFA8FF7D05F80C0559FD0DFF7D2E12
%0C0C0C2E7D05052E0B0C050C0C120C120C0C057DFD0DFF592EFD040C120C
%0C050B2EFF2D052EFF05050C0C05AEFD20FFA82E340B0C0C0C0B0C0C0C05
%0584FF2E0B0527F805050C04A8FD0BFFA82E340B0C0C0C05590405050C05
%27F80505FD050C05AFFD0BFF7D2E0C0B0B2E0C0C0B050B05AFA8F8F8AF7D
%05050C0C0505FD20FF7D59FD070C120C050CFF5905F8050505F80C0C052E
%FD0BFF7D590C0C0C120C0C52350C0C5984A8592E5805FD040C052EFD0BFF
%59350C0C05590C0C050C0559FF2EF859AF27050C0B120C057DFD20FFFD04
%0C0B0C0C0C0B0B0460FF2EF82E2E05F805050C050584FD0BFFFD040C050C
%0505351305FF7DA8A8270505040C0B0C0505A8FD0AFF84050C0C0C0B0CFD
%0405597DF805A87DF805050C0C0C052EFD1EFFA87D120C0C0C120C0C0C2E
%2E05A8FF5905272E0505040C0C0C0584FD09FFA8590C0C120B2E2E0B0C59
%2DA8FFFF52A8A87D050C05120C0C0584FD09FFA835FD040C12050C058A83
%05F80559FFF80505FD050C05AFFD1DFF7D590B0C0C0C0B0C0C0C522E057D
%FFFF2E050405F805FD040C2EFD09FF59350B0C0C05052E0560A852FD04FF
%527D7D0C05050B0C0C0C34FD09FF52350B0C0C0C0B05052EFF58F8F805FF
%52F8F805050C05520C0C7DFD1DFF7D35FD060C12055205607D7DA8FF7DF8
%F80505120C0C0C34FD09FF7D350C0C0C050C0434592E2EA8FFFFFFAF7D7D
%0505F8FD040C35FD08FFA87DFD060C0505A8A80405052E7D05F80505FD04
%0C120B60FD1DFF59350B0B05590B0C052E7D0C35FF7D52592E050C050C0C
%0C0B0C0CFD09FF52350B0CFD04052EA82EA8527DFF7D2E2E2E27F805050C
%0B0C0CFD08FFA852340B0C0B0C05052EFF2E0505AF05F8F805050C050505
%0B0B0C59FD1DFF83350C0C2E0C0C0C2EA8600584FFFFFF7D050C05FD040C
%120C34FD08FFA87D340C0C0C040C052EA8590B847D2E597D350C0C2E050C
%0C120C34FD08FFA87D0C0C0C12050C05FFA8050484A805F805050C050505
%0C050C0B5FFD1DFF52590BFD040C0B528B0C0559FFFFFF2EF8F8050B0C0C
%0C0B0C0CFD09FF52350C0C0B05050B2E52340C2EFF2E05522E05050C0505
%0C0B0C0CFD08FFA852350C0C050B0559FF2E052EAF2EF8050505F8050484
%8405050559FD1DFF7D34FD040C1205A8350C0459FFFFA804F8050512FD04
%0C0535FD09FF7D340C0C34F80C0560520C0584FF7D05592E05050CF80C0C
%0C0559FD08FFA87D0C0C0C0B050CFF7D05058484F8FD05052E5952A8582E
%F884FD1DFF7D590B0C0C0C050B7D59050B05272E2EF805F80C0C0C05590C
%052EFD09FF7D59052E3405F8052E84F805A8FFA80C0B5905120505050C0C
%0559FD09FF52350B0C050559FF05052EFF05F8F805053484592E522E2E05
%0583FD1DFFA852350C12052D2EAF2E0C052E0C0B050C05FD040C2E2E0C05
%A8FD09FFA852350C1205050C057D522E7DA8A80C132E3C0C0B05350C0C05
%AFFD09FF7D2E120C0B2EFF590C05AF7D05F8050B527DA852592E0C050505
%FD1FFF592E0C0C05F8595827F827050CF805F805050C0C0C0B0C050CAFFD
%0AFF592E0C0C0CFD04052EA8A852F80C0C0C2705F82E050C052EFD0AFFA8
%520C0C0559A8050559A805F805F8052E5952580505050BF859FD1FFFA852
%0C0C0C05F884A805050C0B27050C0B0C0C1305050C0C59FD0BFF7D52FD04
%0CF80C0505F82705050C0C0B05040C05050B0C84FD0BFF59340C0C0B2D05
%2EAF58F8050C0B050B0C2E050B050C0C0CAFFD20FF7D59050C052EFFAF05
%2E0B2D0505050CFD0405F8050CFD0DFF7D59050C0C05F80C0505F804F805
%F805050B050C0B052EFD0CFFA87D350B0C0B0C057DF805050C050BFD0505
%0C0C0559FD22FF84340C0C52FF840C59592758522D05130505F80505AFFD
%0EFF7D34FD040C0505050C050B050C0B0CF8050C0C05FD0FFF59120C0C0C
%12050C0C0B0505050C050C0B130C052EFD23FFA82D0C0559FFAF0B05F805
%59FF2E040C120C350584FD0FFFA82D2EFD040C04F8F8FD0505F8050B0B05
%A8FD0FFF7D05FD060C05052E050505FD040C050CFD25FFCA2E0C52FFAE0C
%F8051260FF52F8FF84842E84FD11FFA827FD050C0B0505270505050C0C05
%05AFFD11FF7D05FD050C052E2E2E040C0C120C052EFD26FFA87D5252FFAF
%F8050C1235FF05057D7D527DFD13FFA82E0B050C0C120552050C0C0C0505
%2EAFFD13FFA8270C0B0C0C0C0505F80B0C0C050559FD27FF5227A859FFAF
%120C13128A7D0B042E7DFD17FFA852050C0B0C272E0B0B0559A8FD17FF7D
%2E050C0B0C050C050B057DAEFD28FF050458358435052E050B0527587DA8
%FD1AFFA87D590559F8527DFD1CFFA87D7D5258528383FD2BFF7DF87D3512
%0584FFA87DA8FD20FF7D2D522E2EFD50FFA82EF805057DFD25FFA80505F8
%59FD52FFA87DFD29FF84A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD
%FCFFFDFCFFFDFCFFFDE2FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2020-02-07T21:37:22+05:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-02-07T21:37:22+05:00</xmp:CreateDate>
         <xmp:MetadataDate>2020-02-07T21:37:22+05:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>140</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAjAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8u/ODzF5it9Q0vTN&#xA;D1630S3hKX3mO5nCxrFY/WI4Y+VwS3pmaRikahRyo1WAGENeQl6dDNDNEk0LrLFIA0ciEMrKdwQR&#xA;sQcDYvxV2KuxV2KuxV2KuxV2KuxV2KpXr/mjy95ftRc6zfxWUR+x6jfE9OoRBV3/ANiMIiTyasue&#xA;GMXI0801z/nJbynaxyjSdPutTuEH7rnxtoXP+ufUkUf888sGEuul2xiB2BKV2P8AzlVowJGr+XL2&#xA;25fDD9Slhu+TnotHNq2/sDgOIhsx9qYpeTFfzA/Mj80x5K038yo9UXRtOu9Rhi0fQLajq0XGWRjd&#xA;yEBpCfR4ldl6/CO4oMxkySPEdo9O8+fu/Gz6T0nUrfVNKstTtiTbX0EVzAT14TIHX8GyDnA2isUu&#xA;xV2KuxVKvMHmvy55dthca1qEVlG1eAkNXenXhGtXf/YjCIk8mrLnhjFyNPM9c/5yX8rWsUo0fTrr&#xA;U7lf7sSlbWF9wP7w+q42qf7vLPBLrpdsYgdgSgdM/wCcpdEd6ax5fvbNO0tpJFeKN+rA/V3p/qqc&#xA;TiLPH2rilz2epeVPPPlLzZbNceXtThv1j/vo1JSaOvT1IXCyJXtyUZWRTsIZIy5FPcDN2KuxV2Ku&#xA;xVJPMvnTyv5ahEut6hFaFhWOI1eVx/kxIGcj3pTJRiTyaM2px4h6jTzHzD/zlB5asbWWTSdJudQk&#xA;iof9IdLSIr+0Q4Fw/Tp8G+T8EuCO18ZlQBLCPKOsH8yNav8AVfMdt9S8u6PPJrvmiSRxIkhhjZbC&#xA;zBCqRHbQBiR+0zM1AcFcKfEGc1/DzPu/b91s4/5xl1KC80rzQLaI2VkmrM+n6SZC4tbWWJHiUKWf&#xA;jWp5U6tXIz5uTpJRMfSbD2jIuW7FXYq7FXYq7FXYq7FXYq8Z/Mn88rrRtVay8vrDLHZvJDc3Ew5i&#xA;e4VSrRxAMtI4HP7x/wBpx6a9HK2Qx267Xa4YRQ+p4FrOt6treoS6hqt1Jd3kpq8shrt4KOiqOwGw&#xA;zKAp5fJllM3I2UvWSOC6jup6PaQq5ngJKhqqQCWG/wAJ3/od8EmeGUdwY8RPJ7F/zj9+VK6rOvnL&#xA;X4OVrExXSbOQbEjq7KetP17djWrJOve7bs/Rie5+gf7I/qHTvKTf85YHRtA1XR7XQ4ls7+/+sahq&#xA;ccZb0ixKxwziAkwrKx9WsqoHPjlUTTs9XijIUXpP/OO35p2XmPyzZeWbyMWmt6LZwRRx1+G4tYo1&#xA;SOZK/tUHxj6fkyjW6dNqBL09R+j8fpew5BzHYq7FXiv5j/nre6TqzWnl1YJLa1MsEtxMC5nuFBjY&#xA;RAFaRW8mzOftyAouyucsx47dbrtf4QofU8LubvXvNGuq11cm71S9Ls9xcuQiRxI00sjEA8Y4okZy&#xA;FXoKAZkEiIefxxlnmTI+ZPkkH12EySNa3QvIIyGJMDW7+kTx9RQXlDKG98RJlkwAGqI7twd+41yK&#xA;LtmVZrh3pPHJCI4UrT0pfUVvU2+18Klae+Gt2kSiIEGPq719pcX2n6hDqel3Umn6pbmsF5AeLj/J&#xA;an2lPdTscZRBTh1EsZ25PqD8lvzfXzrZy6Zqyx23mfT1BuYk2S4i6CeIH/hh2P3DFnCnqNJqxlHn&#xA;+Pt73p+Qc12KuxV4R5+/PzU7W/uIPLnoix4NDZ3LpzeVw1Gu1qeIiFCsQKnmaufh487ceO+bqdf2&#xA;h4fpj9Twy/v73ULuW8vp3ubuZuUs8rF3Y+5OZIDzcpmRsmylF801xcx2dvGZpOaBYlFTJM5pDGAO&#xA;u/xH2yMi5Onhtff93U/oD0/8xLmHyH5K0j8srAi41vUOGp+ZQhJeaeRh6NtUA9ZOLFaj4VH82UA2&#xA;Xc5IHHi4eRlz8h+wbe/dj3mi1P5deY/Ltj5fv5rbz1DbNc+Zr+N+UXrXAM0ds8RHFuK/aBqCCMI9&#xA;RYZB4EOLqOnd+Bz6F9J/lD+a9l570h1nRbTzBYALqdiDtU9JYu5jb8OnhWuUadjpdSMo8/x+PJ6B&#xA;kXKdirsVdirsVdirsVS3zHcpDo90n6Sj0m4uYpIbS+lAb05mjYqyxlk9Rl4luIO9MWMjQfFmrXkV&#xA;1eu1upjs4/3VnExqywpsgY93P2nb9piT1OZsRQeL1GY5JmSDyTSr6Bo83mHzXougRqVj1KcVlI+F&#xA;kjY8iAftKrKeXb4WHY0rlMOdh0s+G+RlsPj1+TPv+cjNT1i1806R5JsbgadoFpbWaW0csgjtiZnd&#xA;Dczk0VgvpheT1C0Y9WymJvd3Oojw1jjtER5d/wAfx97wvzRNctfxwzX7ailojW9tOWkKeikrlPSW&#xA;SjJG4PqKpApy6DErikTYPTb8fHZl2iapqHlrUdJ1zT2K3ukvG237ceyyRtTqpXrl0o7OlwZyMhI6&#xA;mx7/AMbfF9z6RqdvqmlWep23+897DHcRV68ZVDAH33zFIp6zHMSiJDqi8DNKfNc6R6DexfpRNHnu&#xA;YZYba/ahaOT0ncvGhZOboiM4APavbCGMyACS+LtUvY7m6eWNPRtIwI7WEmvpwRDjGhPchQKnuak7&#xA;nM2IoPFZspyTMu9B6Vri2uo2V7BA9w4klhks6cHlglieC6jPL7PKCRhXsSMhLcbOVp/3UjxfTw7n&#xA;3sp8gfldaeZPOKaNp9xNc6WgWTVb1mr6FirBxCBT93LMQE4N8S/FUfCchKQA2cvTafLkykTAEYm7&#xA;A+o97I/Mf5I+V3sL9NI0y8TzHouuSNqlnZOZLo6JLLIbaS0t5GUS/uDHQruXDipIoKhLd2k8A4eE&#xA;fbvs8naaez1S5sp7W4tUjeskF3yE1s0kjBIJfUCuSBRSafar9F8JOi1enA3Ao93eB1TbR9dv/Lfm&#xA;DTfMWnki50+ZS6j/AHZC54yRt7EHJTFtOkzGEtvf8f28n3Dp19b6hp9tf2zcre7iSeFvFJFDqfuO&#xA;YZD18JCQBHIojFkxj8yLizXyfqdtPqX6NM9tIS6Eeu8EQD3EcALKebw8kDD7BIahpTCBZas0xGBJ&#xA;6B8carPPqEk8pYQPLsgjHFY1AAREUU4oqgKoHQdMzK2p43xbnxy3QWuXsTERIvooY19bifi9ONQj&#xA;N2HOVh2AFSaADbAdhTfjHFIyAruHn+zmWU+QE0vyH5us9Z8/WM9jHDYPqeg2/FpVubkpyjq+7K1K&#xA;KpI4hupAyqRdppcYMuI3XPlV/wA3yrr8rVvy9u2v9c8x/nR5uUTWukO01nE9eM+oy/DbQR134xfD&#xA;T+UU8MhyDlXxzs8o7n39B+n+15/bazqGt6vc6tqEpmvb6+ae4kPd5IpmNBU0G+w7ZZjdd2gbv+r/&#xA;AL6LLvJvmi68p+cdL8w2pYxRyi21GNN/UtpDR1I8RXbw65OcbcTRZzjPu3/X8x9wfbkckcsaSRsH&#xA;jcBkYbggioIzEetBtdil2KuxV2KuxV2KvLvz2mkTTtOAPwRR6lcU7+p9QltlP+xF0xycObh66VYp&#xA;e4vmC3AkvlhlYQ25ilc3BBYB0QsicRv8bALXtWvbMokvKY4RMSTKirafpOq6zfwaTpEJuNTvSyW0&#xA;YIUAhSzO7EgKiKCzEnpjOVBs0mA5ZgDl1eifl15Lg1v8z9RsY9TSGbRrK3OnXmlFjHZy2qLHH6Lz&#xA;KvrDlJWRmWkpLbfFlBFR3d1jyDLqI8J9IjLl7wGY/nPKsHlGef8AMDyzBfX9rG9tovmOwuPRgNzM&#xA;hEfqxmaC6iUt8TRL6q/D1yuPk7DPXD6hb5WsdLinvY/Uu1uJuQklSMM68BuebtxG522rlsY2XUZt&#xA;QYwNR4Ry/sDLcyHRvrn8kp5Z/wAr9DeQ1YJPGD/kx3MqKPoVRmHk+ovXdmm8Efj95ZxkHOeT/n3c&#xA;vHaaeg+xHaancDffmYEsxQd/gvX+iuTx83C7QlWKXu/Y+WNanEGmyyFeY+FShJHIMwDCo3G2ZUzQ&#xA;eY0kOLIAn35WWepan5wtbS3ukFzBZXH6FTUJXkt0vRD9bjQ8qqqs45MAKHiajKia3dnih4soxPSR&#xA;Pysfe9n/AC5893Fnqeo6jLqkPmCa9cz+YdN06CVZoo0Ijt9Rtw0Nst2BEoS49BN1CutaHlUQ7XDl&#xA;9RBIJvp7h+PcivzE/MHRNZ+r6hoekrqS2jyRaf5jjvn0+YtHGJbkWksKlzBCGX1nmZY+Xw0dqDAA&#xA;2ZcsQL6B84fmNqV9rWtT6hbEzwak8IkmM0d1LJPFGsQV50htuVOOw9MfSanLKIFOs8bFPIZEniA6&#xA;2KHfRpE2rSNbRNL/AHpUepShHKnxdNuuZA5OhyACRrk+wvyZunuvyy0KV61WKSIV8IZniH4JmJk+&#xA;ovWdnSvBH8dWaZBzXi3/ADkJJIDGa7Q6TdemN9mn1CwRm6/77Qr8mOWYubre1DWI/jqHzpLKkUbS&#xA;OaIgLMfYZll5aMSTQZD+UHk6DzL5pl1HWiIfLuhJ+k9dmk/uwsQLwwMadgOTfTlE5U7nS4BMiP8A&#xA;CPu6/wCmO3uBa1W2vPzm/Ma/1KW+GnaPaWs1xPcyqDFp9hbBvRV6H7TU5OK9WNMhQAc05ZZJkAV3&#xA;e4cz+j3sL8wee7zVPJ+jeTLS0S203RXmmlMFa3c7E/6RIpqQypt17ntQAMwRGNH8H8bJdpvHTwiu&#xA;6zTCT1pUiIZY1EToOcn2KkuO+WR2ddn/AHt1sKrfruDsOfRP7HVIhZJpw/dRCeWdI24kGWUIr8ZB&#xA;12jX4a7eGWRpws4yEC9wPx+Oj7Z/Ly4kuPIfl+WQ1dtPtgx8SsSrX6aZiz5l6jSG8Uf6oZDkXIdi&#xA;rsVdirsVdirzr87NLa50bTbpdhHdSWUrEfCq6nbS2MbMewFzNCSclE0XH1WPigR3h8ozyCCOSSQE&#xA;CIMzim44ip2zMJeNjEyIHezL8smlhsPN2urFJFBb6E8S3siskaC4miLpyYfbkiHw0OVSkDIO1w6f&#xA;JDDkFeoikn/K/wDMW98n+cNQ1yO3ivpby3jtptOd3i5GV0KJHMqSqskQUF+S0K8u4wTHEWzSTGCI&#xA;kR6YiQv5H7SNv2qn53/m1dfmU2lWlhGLHTbFeUtg8yO8l+9VYoFoXVV+CNio6tsK5WIOdl1gNbGq&#xA;vl+nyYZ5esfqti78QZpGNTXqF2AB8K1y/GKDpNbm4510CZXcno6RBchwbyWJmltwD+6lMjJGhJ+1&#xA;yAVtvGmSs01eFDjABsdX2Z+VejzaR+XmhWMw4zC2E0qnYh7hjOwNfAyZiTNl6nRY+DDEeX37sqyL&#xA;lPNfzw0t7nSdMukFaTT6dJtUj9I27wwb9q3gt1PzyUDRcXWY+LGR5Pk3U7cXOgXqyco71ZaRQgcg&#xA;0KAPyr2NVp71PTj8WTKyC83gOOEokHfqmX5drbXlxdaLdr6VxrunSW2lyyH0jHqcURa0o+xQySJH&#xA;xPevvkJcnNwAeNt/SH+m3Hyls9L/ACGvtLh873+u+Zbn9HvGH07SpJImt7WSZ3JmDu3wQy7BRC5H&#xA;cLWmQnKw5Oi00YZJSvqT8T+Pt8mM+ZdNsLPzv5v0uKeNbPVZb3SpL5Aq+m1xcxXsRkYUBCTxiCRi&#xA;fs9emSEfSC0Zs1Z5Y7skAj3jevjTz/UtMvNLSewaauoyPHySOPgY2jDRxIqCh9R3NPGgPhkyKDh4&#xA;cgySB4ajGxv5/VfkPvRD87LTFRKGWNFij8C5oq/8Nk+QcUVkyWeRN/Dm+2fy20mXSfIeh2Ew4zR2&#xA;kbyqeqvL+9ZfoZ6ZiTNl6zR4+DFEeTJMi5LyL8/tKlmt7G6QfBc2t7prn/iwmHUYevdv0c8a+Jen&#xA;fJ4zRcHtDHxYiPL9v6Hy7qC3MssFvDEZS7qI4xuZZmNIo6Dc/F8R+WZMnm9MBuev3Dqf0B6f5/lg&#xA;8geQbH8vbVvU1W8VNT82zIfikkkNYLTku/xuKsK/ZWvRspG5voHcZLxYxAbTnz/oj/jo+33pB58u&#xA;pPIH5d23k9H4+afM/DU/NMy1Dxwn4re0qKU/mYbU6bq2RkbLdhxiEO6/sHQfpLz7yn5d1LWPRhtp&#xA;ora2lkEFzeyP6FvF6p+D65cUIRXKHgD9rcDJA0GicDKZocq58vh+n9L0a38qaX5O1SO7tLmy1aTT&#xA;LlHTWZJVk0ZitPXt/qj2skk0yCorbTu4+03GhoLvk3nFGG8j775fj8UxXzzrlr5g1OW4sYOd7fsF&#xA;lnjiitxcsCAghtYAyooI/nkYn7Uv7OSANOLOcJSBAoD8cunx3/ovuDytpZ0nyzpOmMKPZWkED/60&#xA;caqx29xlMjZdzhhwQEe4JpgbXYq7FXYq7FXYqgNe0Wy1zRb3R74E2l/C8EpQ0cBxTkh7Mp3U9jig&#xA;iw+UPzU8i3vl3VVjv7mC8uL2BZr825NFllLqWZSAVExjZ17faUfZrmVjlYp5ftDTHFk4xyO/xTL8&#xA;kPy9sNZ8q+arrzHcz6lpWmRS29lpxkYRxyG1LNOFaqerHFIoianwGpG9KVSG9O000oyxHLW9fc81&#xA;tPL7W+lxX1vcJGLi4vLb99OsaxSwkIssgcoCRHJIQaVJqB2GWGouvhGecV/Dcb91cX7Pgll7od5o&#xA;VtYapqWlz2sdwLa8sp2iKxTeoiSoI5ePEqE5Eita0yESA5Wow5JGh9Mo19/7PtU9RvrnSbVrCSB0&#xA;nQenbzgAxuo2Dg+NO3jlkpcIp1+DDHNLjBFcyOvueh/kd5HuvPut2zX9s36I0p0m1KdgVR5I2PGE&#xA;Duz038BXuMjLJs5ODQ3l2+jr7u74/c+yumwzHeidiqX+YtDtNd0O90i7qIL2JomdNnRjukiHsyMA&#xA;ynxGKCLD5O/M3ybf+Wtd9O7nt7i5uIo7i8+qVCRzTcg1UIBjWRo2dBSlNhXjmXjnYeU7R0pxzsfS&#xA;Xl95pslvcTFiH024q8vJqGNlFaqT37L49MBjXuZ4s4lEdMkeXn+OvzTSPz9+ZA0mXS7HzFc32lzK&#xA;yyW7yc24uKFXSSrZXwdzsRrK2ncfu+aU2U+oRWf1cae8aBSsh9Z4o2BFCXRyyGvemTF1ycDLHGZc&#xA;XGD8AT8CN27C5/3LpcpdPJqkTrPBPbs/7uSNlKmOQ8vjHEUY7CmAAcm2eScRxD0jz5/j7Xp35Dfl&#xA;p/ifzBC08TTaFo063F7dPX05pxUiBezduXt70xlIAUnT4JZsvEdo9R5dB8fufYmY70LsVSbzf5cj&#xA;8xeX7rSzKbed+MtndgAtBcwuJYJgD14SIpp3G3fFEhYfJ3n/AMp3XlTzWI0njS7tHiuopbKRv9Fu&#xA;GRZfTUni44Fvg5D4lofEZlxIkHldTjlpstx5H8V8En0jWhD59g82+aI5/MASdr28hVkSSW4RSIDw&#xA;osfFDT4dtthsAMiYEDZtx62OSd5Nvxy+bGPMt7ca35ivdf8AMkxkvb6UzSQpsFDE8FLE7KAKKvLZ&#xA;RSu2REAObfk1csn938/1BU0W/wBR0uUXejXEkfCqkpWvpyblHj3Dxt3C1Vh1Rslw20eNKMtzwy+/&#xA;8d0vmFe8m1fWbj6zqEzN8IRTIKARr9lI4vsqi9lI4jsi4RBqy6neyeKX4/Hp/wBMXqX/ADjz+XMX&#xA;mDzGnmO4tidH0WbnDcSVb6zdKPhAr9oRk8ifo75CcgBs5mh085zuX0jp9w/SX1ZlDv3Yq7FXYq7F&#xA;XYq7FXYq8p/5yCufI9poelv5iL295eXiWVhqEAUyW6SENNJKrf3lugQNJH3PGnFqMsoktGohGUal&#xA;1S78i9Mi07RfONoL60v9PjueIvrWXnaSEWw9R0kpy4AUDfa4kEVbjXDIkm2jT4o48coX6Q+atD8u&#xA;yTalNqeoyw3Dc3AgiIkRXYnkGrsKV6ZkxhZsvNarXCOMY8YlHludjT0P87Nd0278leT/ACoZke80&#xA;yNbzVVU1kh9ZeNvb7cj6kiOSV/ZABI6ZTIWSXdYMnBhxwI9RD0fTPIzeaI4b7RfKR8qw3HxnUdXl&#xA;klkiHQm304n4mrupnKoOvFhtgOWXezj2Vg4uIQr339z13yv5Z0nyzotvo+lRlLaAEs7nlLLI27yy&#xA;v+1I7bsf4ZWS7SEBEUE1wMnYq7FWKef/AMutH85WKx3LG11GBWW01CNQzKr/AGo5ENBJExAJQnqA&#xA;ylWAIINNWXDHJGpPmfzh+VPnbyxI5vNNku7EGgv7FWuICPFgoMkXv6igDoGbrmRHKDzee1HZU4G4&#xA;bh57b6L5dvtWsYmWVopruKO7hsCpuDDzHrCJGqokEfLjUUr1xmBWzLSZMomIzvh80Fpeg2WoG3ih&#xA;a4v72ULS0tw0zliPsiNFZ+uACNblMsufiMYxD2PyB/zjj5p1kxyaxAfLOhmhkjah1Cdf5Qm/pV6V&#xA;c8h/LgOQDk5GHs+czxZD+Pd+Pi+nfLvlzRvLmkW+kaNapaWFsoWOJB1NKFmPVmPcnKSbdxDGIigm&#xA;WBm7FXYqwn8x/wArNH85W/rBhY63EgSG/C81dFqRFcICvqR1YkUYMp3VhvWUZENGfTxyxqT5s82/&#xA;lr508rzMNR0uZ7QE8b+0Vrm2K77mRFBQf8ZVQ+2ZEcoPN57Udl5IH0+oMEFxHDfm9gkt50dSDHJM&#xA;8RDAcaq8Lo496MPeuMhfVGCRhGpRPyVNDtL68v5ltYm1G/uW/d2OmxyXBUFmbioUO3Vv2vmT3xiQ&#xA;OZXPCWYgQiQPN7H5F/5x08y65NHd+buWi6Ns36ORla8nHXjIVLLCviN27bZCeXuc3S9l1vL8fjz+&#xA;T6S0nSdN0jTrfTdMt0tLG1QRwW8YoqqP1+5O5ykm3dQgIihyReBk7FXYq7FXYq7FXYq7FXnn52/l&#xA;Sv5i+V4rK3uEtNYsJfrGm3MtfT5FeLxSFQzBH23AJBA69CQWvJDiDzCx/Kn88fMepn/EbWGiQPHF&#xA;b3+owyepJcJCvASJBCzRmQgD7XBe9O2WjLQp1ebssZcnHIkXzHfT1ab8i/ysn0+zsp9DjYWcKQLc&#xA;xyS29xIqClZpbd4XlY9SWOVcRdlLTwIAIGye+WfIPkzyvFw0HR7axbflOicp2qa/HO/KVv8AZNgt&#xA;sEQOSf4snYq7FXYq7FXYq7FXjn50fll5z17zHp3mLywLeeaztmgNtJLJbyxy8iRNDIjxbsjcHHqL&#xA;UAV5dpAuPmxyO4pNvyH/AC78weS9A1CHWhb281/cLNDp1nJJJDAiRhOr/tuR8RFagCrE9AS2Y4kD&#xA;d6bgbHYq7FXYq7FXYq7FUFdaJot3J6l3YW1xJ/PLDG5392BxRSLiiiiQRxIsca9EUAAV36DFK7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:4f757702-61b6-6c44-9b5a-5a3f399550ca</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:4f757702-61b6-6c44-9b5a-5a3f399550ca</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:434757ae-ce9f-4094-84ea-1b94e410219b</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3f699a10-bdce-ba41-b456-8a6b6dfa18b7</stRef:instanceID>
            <stRef:documentID>xmp.did:3f699a10-bdce-ba41-b456-8a6b6dfa18b7</stRef:documentID>
            <stRef:originalDocumentID>uuid:434757ae-ce9f-4094-84ea-1b94e410219b</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3b5ca565-6801-b04f-8678-221d743dc0e9</stEvt:instanceID>
                  <stEvt:when>2018-09-08T22:03:22+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4f757702-61b6-6c44-9b5a-5a3f399550ca</stEvt:instanceID>
                  <stEvt:when>2020-02-07T21:37:22+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Задание 5 (2)</rdf:li>
            </rdf:Alt>
         </dc:title>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>330.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -330 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 330 li
612 330 li
612 0 li
cp
clp
612 330 mo
0 330 li
0 0 li
612 0 li
612 330 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
538.308 168.104 mo
538.308 201.978 510.848 229.437 476.975 229.437 cv
443.101 229.437 415.641 201.978 415.641 168.104 cv
415.641 134.231 443.101 106.771 476.975 106.771 cv
510.848 106.771 538.308 134.231 538.308 168.104 cv
cp
.891569 .371435 .625605 .210086 cmyk
f
421.284 202.801 mo
414.32 192.492 410.639 180.441 410.639 167.949 cv
410.639 162.189 411.425 156.481 412.975 150.985 cv
414.901 151.528 li
413.4 156.847 412.639 162.372 412.639 167.949 cv
412.639 180.04 416.201 191.704 422.943 201.682 cv
421.284 202.801 li
cp
.829892 .595697 .683223 .773831 cmyk
f
472.972 230.282 mo
454.704 230.282 437.418 222.307 425.546 208.401 cv
427.068 207.103 li
438.559 220.563 455.29 228.282 472.972 228.282 cv
493.189 228.282 511.965 218.229 523.199 201.388 cv
524.863 202.497 li
513.257 219.896 493.859 230.282 472.972 230.282 cv
cp
f
528.525 196.251 mo
526.743 195.341 li
529.461 190.019 531.363 184.333 532.397 178.442 cv
534.367 178.787 li
533.299 184.875 531.333 190.751 528.525 196.251 cv
cp
f
531.105 151.745 mo
523.878 125.762 499.973 107.616 472.972 107.616 cv
472.972 105.616 li
500.868 105.616 525.566 124.364 533.032 151.209 cv
531.105 151.745 li
cp
f
417.937 143.192 mo
416.112 142.37 li
419.821 134.138 425.408 126.658 432.271 120.737 cv
433.577 122.252 li
426.935 127.983 421.526 135.224 417.937 143.192 cv
cp
f
444.506 139.976 mo
444.506 141.402 443.349 142.559 441.922 142.559 cv
440.495 142.559 439.339 141.402 439.339 139.976 cv
439.339 138.549 440.495 137.392 441.922 137.392 cv
443.349 137.392 444.506 138.549 444.506 139.976 cv
cp
0 0 0 0 cmyk
f
438.921 138.392 mo
438.048 138.392 437.337 139.103 437.337 139.976 cv
437.337 140.849 438.048 141.559 438.921 141.559 cv
439.794 141.559 440.504 140.849 440.504 139.976 cv
440.504 139.103 439.794 138.392 438.921 138.392 cv
cp
438.921 143.559 mo
436.944 143.559 435.337 141.951 435.337 139.976 cv
435.337 138 436.944 136.392 438.921 136.392 cv
440.896 136.392 442.504 138 442.504 139.976 cv
442.504 141.951 440.896 143.559 438.921 143.559 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
526.524 155.532 mo
526.524 156.959 525.367 158.116 523.941 158.116 cv
522.514 158.116 521.357 156.959 521.357 155.532 cv
521.357 154.106 522.514 152.949 523.941 152.949 cv
525.367 152.949 526.524 154.106 526.524 155.532 cv
cp
0 0 0 0 cmyk
f
520.939 153.949 mo
520.066 153.949 519.355 154.659 519.355 155.532 cv
519.355 156.406 520.066 157.116 520.939 157.116 cv
521.812 157.116 522.522 156.406 522.522 155.532 cv
522.522 154.659 521.812 153.949 520.939 153.949 cv
cp
520.939 159.116 mo
518.962 159.116 517.355 157.509 517.355 155.532 cv
517.355 153.556 518.962 151.949 520.939 151.949 cv
522.915 151.949 524.522 153.556 524.522 155.532 cv
524.522 157.509 522.915 159.116 520.939 159.116 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
483.764 211.36 mo
483.718 211.332 483.679 211.303 483.632 211.275 cv
479.487 208.882 472.766 208.882 468.621 211.275 cv
468.574 211.303 468.535 211.332 468.489 211.36 cv
465.616 211.36 li
465.559 211.36 465.512 211.407 465.512 211.464 cv
465.512 215.609 li
465.512 215.609 li
465.512 217.863 467.652 220.116 471.931 221.267 cv
474.669 222.003 477.579 222.003 480.317 221.268 cv
484.599 220.118 486.74 217.863 486.741 215.609 cv
486.741 215.609 li
486.741 211.465 li
486.741 211.407 486.694 211.36 486.636 211.36 cv
483.764 211.36 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
466.512 212.359 mo
466.512 215.609 li
466.512 217.562 468.688 219.359 472.192 220.301 cv
474.762 220.993 477.483 220.993 480.057 220.302 cv
483.563 219.36 485.74 217.562 485.74 215.609 cv
485.74 212.359 li
483.488 212.359 li
483.149 212.153 li
479.27 209.91 472.984 209.91 469.12 212.142 cv
468.764 212.359 li
466.512 212.359 li
cp
476.125 222.82 mo
474.627 222.82 473.129 222.624 471.672 222.233 cv
467.189 221.027 464.512 218.551 464.512 215.609 cv
464.512 211.464 li
464.512 210.855 465.007 210.359 465.616 210.359 cv
468.208 210.359 li
472.676 207.832 479.582 207.834 484.044 210.359 cv
486.636 210.359 li
487.245 210.359 487.74 210.856 487.74 211.465 cv
487.74 215.609 li
487.74 218.552 485.062 221.028 480.576 222.234 cv
479.12 222.624 477.623 222.82 476.125 222.82 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
486.626 211.404 mo
483.755 211.404 li
483.709 211.376 483.669 211.347 483.622 211.319 cv
481.844 210.293 479.591 209.71 477.272 209.564 cv
477.272 221.819 li
478.295 221.746 479.313 221.579 480.307 221.312 cv
484.59 220.162 486.731 217.907 486.731 215.653 cv
486.731 211.509 li
486.731 211.451 486.684 211.404 486.626 211.404 cv
cp
f
483.632 207.026 mo
487.777 209.42 487.777 213.3 483.632 215.693 cv
479.486 218.086 472.766 218.086 468.621 215.693 cv
464.475 213.3 464.475 209.42 468.621 207.026 cv
472.766 204.633 479.487 204.633 483.632 207.026 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
476.126 206.22 mo
473.589 206.22 471.052 206.777 469.12 207.893 cv
467.439 208.864 466.512 210.096 466.512 211.36 cv
466.512 212.624 467.439 213.856 469.12 214.827 cv
472.984 217.058 479.269 217.058 483.132 214.827 cv
484.814 213.856 485.74 212.624 485.74 211.36 cv
485.74 210.096 484.814 208.864 483.132 207.893 cv
481.2 206.777 478.663 206.22 476.126 206.22 cv
cp
476.126 218.503 mo
473.245 218.503 470.365 217.855 468.12 216.56 cv
465.793 215.216 464.512 213.369 464.512 211.36 cv
464.512 209.351 465.793 207.504 468.12 206.16 cv
472.609 203.568 479.644 203.568 484.132 206.16 cv
484.132 206.16 li
486.459 207.504 487.74 209.351 487.74 211.36 cv
487.74 213.369 486.459 215.216 484.132 216.56 cv
481.888 217.855 479.007 218.503 476.126 218.503 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
480.281 212.535 mo
477.986 211.526 474.266 211.526 471.972 212.535 cv
469.677 213.544 469.677 215.179 471.972 216.188 cv
474.266 217.197 477.986 217.197 480.281 216.188 cv
482.575 215.179 482.575 213.544 480.281 212.535 cv
cp
0 0 0 0 cmyk
f
476.126 209.778 mo
474.759 209.778 473.391 210.001 472.374 210.448 cv
471.452 210.854 471.25 211.244 471.25 211.36 cv
471.25 211.476 471.452 211.866 472.374 212.272 cv
474.407 213.164 477.845 213.166 479.878 212.272 cv
480.8 211.866 481.002 211.476 481.002 211.36 cv
481.002 211.244 480.8 210.854 479.878 210.448 cv
479.878 210.448 li
478.861 210.001 477.493 209.778 476.126 209.778 cv
cp
476.126 214.944 mo
474.486 214.944 472.847 214.664 471.569 214.102 cv
469.552 213.215 469.25 212.003 469.25 211.36 cv
469.25 210.717 469.552 209.505 471.569 208.618 cv
474.124 207.493 478.128 207.493 480.683 208.618 cv
482.7 209.505 483.002 210.717 483.002 211.36 cv
483.002 212.003 482.7 213.215 480.683 214.102 cv
479.405 214.664 477.766 214.944 476.126 214.944 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
471.251 220.481 mo
469.251 220.481 li
469.251 216.229 li
471.251 216.229 li
471.251 220.481 li
cp
f
433.227 192.958 mo
461.418 143.752 li
461.42 143.748 461.425 143.746 461.43 143.748 cv
466.178 145.509 li
466.182 145.511 466.187 145.509 466.19 145.505 cv
494.68 93.9003 li
494.685 93.8915 494.699 93.895 494.699 93.9051 cv
494.699 157.483 li
494.699 157.487 494.697 157.49 494.694 157.492 cv
433.241 192.972 li
433.232 192.977 433.222 192.967 433.227 192.958 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
461.867 144.977 mo
435.919 190.271 li
493.698 156.911 li
493.698 97.7487 li
466.883 146.318 li
466.119 146.595 li
465.782 146.429 li
461.867 144.977 li
cp
433.076 194.222 mo
431.987 193.144 li
432.359 192.461 li
460.983 142.501 li
461.801 142.819 li
465.73 144.276 li
494.181 92.7379 li
495.698 93.8085 li
495.698 93.9049 li
495.698 158.101 li
495.141 158.386 li
433.076 194.222 li
cp
.829892 .595697 .683223 .773831 cmyk
f
442.5 198.327 mo
470.69 149.12 li
470.693 149.116 470.698 149.115 470.702 149.116 cv
475.45 150.877 li
475.454 150.879 475.46 150.877 475.462 150.873 cv
503.953 99.2685 li
503.958 99.2597 503.971 99.2632 503.971 99.2733 cv
503.971 162.851 li
503.971 162.855 503.969 162.858 503.966 162.86 cv
442.513 198.34 li
442.504 198.345 442.495 198.335 442.5 198.327 cv
cp
f
471.141 150.346 mo
445.192 195.639 li
502.971 162.279 li
502.971 103.117 li
475.92 152.112 li
471.141 150.346 li
cp
442.349 199.59 mo
441.26 198.512 li
441.631 197.829 li
469.798 148.668 li
470.168 147.835 li
471.073 148.188 li
475.002 149.645 li
503.453 98.1061 li
504.965 98.6552 li
504.971 99.2731 li
504.971 163.387 li
504.521 163.692 li
442.349 199.59 li
cp
f
433.218 192.995 mo
442.473 198.353 li
442.478 198.356 442.484 198.354 442.486 198.349 cv
470.69 149.122 li
470.692 149.117 470.691 149.111 470.686 149.108 cv
461.43 143.75 li
461.426 143.747 461.42 143.749 461.417 143.754 cv
433.214 192.981 li
433.211 192.986 433.213 192.992 433.218 192.995 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
462.727 149.176 mo
462.723 149.174 462.716 149.175 462.714 149.18 cv
436.411 195.09 li
442.457 198.59 li
442.461 198.593 442.467 198.591 442.47 198.586 cv
468.772 152.676 li
462.727 149.176 li
cp
0 0 0 0 cmyk
f
434.572 192.623 mo
442.113 196.989 li
469.332 149.479 li
461.788 145.112 li
434.572 192.623 li
cp
442.349 199.59 mo
441.958 199.21 li
432.779 193.896 li
432.388 193.739 li
432.117 192.783 li
432.375 192.434 li
460.983 142.501 li
461.945 142.893 li
471.546 148.451 li
471.773 149.294 li
471.522 149.676 li
443.286 198.949 li
442.349 199.59 li
cp
.829892 .595697 .683223 .773831 cmyk
f
466.19 145.504 mo
494.694 93.8759 li
494.697 93.8711 494.703 93.8694 494.707 93.8722 cv
503.963 99.2306 li
503.967 99.2333 503.969 99.2391 503.966 99.2438 cv
475.463 150.872 li
475.46 150.876 475.454 150.878 475.449 150.875 cv
466.194 145.517 li
466.189 145.514 466.188 145.508 466.19 145.504 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
495.925 99.3525 mo
495.921 99.3498 495.915 99.3514 495.912 99.3563 cv
469.332 147.499 li
475.323 150.967 li
475.327 150.97 475.333 150.968 475.336 150.963 cv
501.916 102.821 li
495.925 99.3525 li
cp
0 0 0 0 cmyk
f
467.533 145.138 mo
475.079 149.505 li
502.623 99.6085 li
495.08 95.2433 li
467.533 145.138 li
cp
475.837 152.262 mo
474.935 151.733 li
464.943 145.949 li
465.315 145.02 li
494.319 92.4855 li
495.222 93.0148 li
504.965 98.6552 li
504.842 99.7272 li
475.837 152.262 li
cp
.829892 .595697 .683223 .773831 cmyk
f
449.703 200.757 mo
473.939 158.454 li
473.941 158.45 473.945 158.449 473.949 158.45 cv
478.031 159.964 li
478.035 159.966 478.039 159.964 478.041 159.961 cv
502.535 115.595 li
502.539 115.588 502.551 115.591 502.551 115.599 cv
502.551 170.259 li
502.551 170.262 502.549 170.264 502.547 170.266 cv
449.714 200.769 li
449.707 200.773 449.698 200.765 449.703 200.757 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
474.388 159.679 mo
452.393 198.072 li
501.551 169.687 li
501.551 119.447 li
478.499 161.2 li
474.388 159.679 li
cp
449.602 201.988 mo
448.828 201.474 li
448.834 200.26 li
473.493 157.219 li
477.579 158.731 li
502.031 114.439 li
503.545 114.811 li
503.551 115.599 li
503.551 170.877 li
502.994 171.16 li
449.602 201.988 li
cp
.829892 .595697 .683223 .773831 cmyk
f
457.674 205.373 mo
481.91 163.069 li
481.912 163.066 481.917 163.064 481.921 163.065 cv
486.002 164.58 li
486.006 164.581 486.011 164.579 486.013 164.576 cv
510.507 120.211 li
510.511 120.203 510.522 120.206 510.522 120.215 cv
510.522 174.874 li
510.522 174.877 510.521 174.88 510.518 174.881 cv
457.686 205.384 li
457.678 205.388 457.67 205.38 457.674 205.373 cv
cp
f
482.359 164.295 mo
460.367 202.683 li
509.523 174.301 li
509.523 124.061 li
486.424 165.9 li
485.608 165.499 li
482.359 164.295 li
cp
458.006 206.354 mo
457.72 206.519 457.359 206.473 457.124 206.24 cv
456.459 205.58 li
456.806 204.875 li
481.25 162.21 li
482.095 161.983 li
482.375 162.168 li
485.551 163.345 li
509.998 119.063 li
511.516 119.415 li
511.523 120.214 li
511.523 175.492 li
510.966 175.776 li
458.006 206.354 li
cp
f
449.694 200.789 mo
457.651 205.395 li
457.656 205.398 457.661 205.396 457.663 205.392 cv
481.91 163.07 li
481.912 163.066 481.911 163.061 481.907 163.059 cv
473.949 158.452 li
473.945 158.45 473.94 158.451 473.938 158.455 cv
449.691 200.777 li
449.689 200.781 449.69 200.786 449.694 200.789 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
475.341 163.008 mo
475.337 163.006 475.332 163.007 475.329 163.011 cv
452.632 202.629 li
457.683 205.554 li
457.687 205.556 457.692 205.555 457.694 205.551 cv
480.392 165.933 li
475.341 163.008 li
cp
0 0 0 0 cmyk
f
451.05 200.418 mo
457.29 204.031 li
480.552 163.428 li
474.311 159.817 li
451.05 200.418 li
cp
457.673 206.519 mo
457.204 206.29 li
448.828 201.474 li
448.609 200.558 li
448.854 200.23 li
473.138 157.855 li
473.689 157.12 li
474.48 157.604 li
482.78 162.409 li
482.991 163.29 li
482.748 163.618 li
457.673 206.519 li
cp
.829892 .595697 .683223 .773831 cmyk
f
478.041 159.96 mo
502.547 115.574 li
502.549 115.57 502.554 115.569 502.558 115.571 cv
510.515 120.178 li
510.519 120.18 510.521 120.185 510.519 120.189 cv
486.013 164.575 li
486.011 164.579 486.006 164.58 486.002 164.578 cv
478.045 159.971 li
478.041 159.969 478.039 159.964 478.041 159.96 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
503.686 120.516 mo
503.682 120.514 503.677 120.515 503.675 120.519 cv
480.93 161.717 li
485.711 164.485 li
485.715 164.487 485.721 164.486 485.723 164.482 cv
508.468 123.285 li
503.686 120.516 li
cp
0 0 0 0 cmyk
f
479.387 159.592 mo
485.627 163.205 li
509.174 120.556 li
502.933 116.943 li
479.387 159.592 li
cp
486.424 165.899 mo
485.555 165.473 li
477.607 160.872 li
477.267 160.736 li
476.95 159.912 li
477.166 159.476 li
502.136 114.251 li
503.006 114.677 li
511.831 119.784 li
511.413 120.636 li
486.424 165.899 li
cp
.829892 .595697 .683223 .773831 cmyk
f
498.575 170.484 mo
497.575 168.751 li
506.427 163.647 li
506.427 133.413 li
508.427 133.413 li
508.427 164.803 li
498.575 170.484 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
490.176 175.361 mo
489.178 173.629 li
494.649 170.475 li
495.647 172.207 li
490.176 175.361 li
cp
f
464.247 169.223 mo
462.511 168.229 li
466.256 161.692 li
467.992 162.686 li
464.247 169.223 li
cp
f
450.168 193.798 mo
448.432 192.804 li
460.675 171.433 li
462.411 172.427 li
450.168 193.798 li
cp
f
494.223 125.16 mo
492.486 124.166 li
500.401 110.351 li
502.138 111.345 li
494.223 125.16 li
cp
f
484.938 178.31 mo
483.94 176.577 li
486.675 175 li
487.673 176.733 li
484.938 178.31 li
cp
f
491.457 129.985 mo
489.723 128.991 li
491.318 126.207 li
493.053 127.201 li
491.457 129.985 li
cp
f
534.273 185.933 mo
498.623 206.515 li
497.918 206.923 496.687 206.871 495.872 206.401 cv
480.779 197.687 li
479.965 197.217 479.876 196.506 480.582 196.099 cv
516.231 175.517 li
516.936 175.11 518.168 175.161 518.982 175.631 cv
534.075 184.345 li
534.89 184.815 534.978 185.526 534.273 185.933 cv
cp
f
481.304 196.836 mo
496.372 205.535 li
496.921 205.852 497.764 205.857 498.123 205.65 cv
533.549 185.195 li
518.483 176.497 li
517.933 176.18 517.089 176.176 516.731 176.383 cv
481.304 196.836 li
cp
497.423 207.789 mo
496.711 207.789 495.973 207.614 495.372 207.268 cv
480.279 198.554 li
479.533 198.122 479.106 197.479 479.106 196.788 cv
479.106 196.157 479.461 195.591 480.081 195.233 cv
515.731 174.651 li
516.746 174.067 518.359 174.115 519.483 174.765 cv
534.575 183.479 li
535.321 183.909 535.749 184.552 535.749 185.243 cv
535.748 185.874 535.393 186.442 534.773 186.799 cv
499.123 207.382 li
498.651 207.654 498.047 207.789 497.423 207.789 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
534.273 180.722 mo
498.623 201.304 li
497.918 201.711 496.687 201.66 495.872 201.19 cv
480.779 192.476 li
479.965 192.006 479.876 191.295 480.582 190.887 cv
516.231 170.305 li
516.936 169.898 518.168 169.949 518.982 170.419 cv
534.075 179.133 li
534.89 179.603 534.978 180.315 534.273 180.722 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
481.305 191.624 mo
496.372 200.323 li
496.92 200.642 497.764 200.645 498.123 200.438 cv
533.55 179.984 li
518.483 171.285 li
517.933 170.967 517.088 170.966 516.73 171.172 cv
481.305 191.624 li
cp
497.423 202.578 mo
496.71 202.578 495.972 202.402 495.372 202.056 cv
480.279 193.342 li
479.533 192.911 479.106 192.269 479.106 191.578 cv
479.106 190.947 479.461 190.38 480.081 190.022 cv
515.731 169.439 li
516.746 168.855 518.359 168.904 519.483 169.553 cv
534.575 178.267 li
535.321 178.698 535.749 179.341 535.749 180.032 cv
535.749 180.662 535.393 181.23 534.773 181.588 cv
499.123 202.17 li
498.651 202.443 498.046 202.578 497.423 202.578 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
534.273 175.51 mo
498.623 196.092 li
497.918 196.499 496.687 196.448 495.872 195.978 cv
480.779 187.264 li
479.965 186.794 479.876 186.083 480.582 185.676 cv
516.231 165.094 li
516.936 164.687 518.168 164.738 518.982 165.208 cv
534.075 173.922 li
534.89 174.392 534.978 175.103 534.273 175.51 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
481.305 186.412 mo
496.372 195.112 li
496.922 195.431 497.765 195.433 498.123 195.226 cv
533.549 174.773 li
518.483 166.074 li
517.933 165.757 517.089 165.753 516.731 165.96 cv
481.305 186.412 li
cp
497.422 197.366 mo
496.71 197.366 495.973 197.191 495.372 196.845 cv
480.279 188.13 li
479.533 187.699 479.106 187.057 479.106 186.366 cv
479.106 185.735 479.461 185.168 480.081 184.81 cv
515.731 164.228 li
516.746 163.644 518.359 163.693 519.483 164.342 cv
534.575 173.056 li
535.32 173.485 535.748 174.129 535.749 174.819 cv
535.749 175.45 535.394 176.018 534.773 176.376 cv
499.123 196.958 li
498.651 197.232 498.046 197.366 497.422 197.366 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
526.185 179.015 mo
498.051 195.258 li
497.676 195.474 497.021 195.447 496.588 195.197 cv
488.349 190.44 li
487.916 190.19 487.868 189.812 488.244 189.595 cv
516.377 173.353 li
516.752 173.136 517.407 173.163 517.841 173.413 cv
526.079 178.17 li
526.513 178.42 526.56 178.798 526.185 179.015 cv
cp
0 0 0 0 cmyk
f
489.777 186.276 mo
497.301 190.618 li
497.439 190.699 497.693 190.709 497.778 190.673 cv
525.076 174.911 li
517.554 170.568 li
517.418 170.489 517.166 170.48 517.077 170.513 cv
489.777 186.276 li
cp
497.623 192.692 mo
497.163 192.692 496.691 192.576 496.299 192.35 cv
488.062 187.595 li
487.516 187.279 487.203 186.789 487.203 186.25 cv
487.203 185.75 487.485 185.289 487.957 185.017 cv
516.09 168.775 li
516.771 168.38 517.808 168.405 518.553 168.835 cv
526.792 173.592 li
527.337 173.906 527.651 174.396 527.651 174.935 cv
527.651 175.435 527.369 175.896 526.899 176.169 cv
526.898 176.169 li
498.765 192.412 li
498.44 192.599 498.036 192.692 497.623 192.692 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
511.585 178.192 mo
514.294 179.756 514.627 182.098 512.331 183.424 cv
510.035 184.75 505.977 184.557 503.269 182.994 cv
500.561 181.43 500.227 179.088 502.523 177.762 cv
504.82 176.436 508.877 176.629 511.585 178.192 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
502.524 180.448 mo
502.06 180.716 501.708 181.027 501.457 181.363 cv
501.834 181.937 502.439 182.49 503.269 182.969 cv
505.978 184.533 510.035 184.726 512.331 183.4 cv
512.795 183.132 513.146 182.821 513.398 182.485 cv
513.021 181.911 512.416 181.358 511.586 180.878 cv
508.877 179.315 504.82 179.122 502.524 180.448 cv
cp
0 0 0 0 cmyk
f
506.359 177.882 mo
505.088 177.882 503.892 178.126 503.024 178.628 cv
502.556 178.899 501.997 179.353 501.997 179.984 cv
501.997 180.686 502.659 181.487 503.769 182.127 cv
506.156 183.505 509.847 183.703 511.831 182.558 cv
512.299 182.288 512.857 181.833 512.857 181.202 cv
512.857 180.5 512.194 179.699 511.085 179.059 cv
509.743 178.284 507.989 177.882 506.359 177.882 cv
cp
508.471 185.308 mo
506.503 185.308 504.428 184.818 502.769 183.859 cv
501.008 182.843 499.997 181.43 499.997 179.984 cv
499.997 178.747 500.717 177.651 502.024 176.896 cv
504.635 175.386 509.054 175.577 512.085 177.326 cv
513.847 178.343 514.857 179.756 514.857 181.202 cv
514.857 182.44 514.137 183.536 512.831 184.29 cv
511.649 184.973 510.097 185.308 508.471 185.308 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
430.069 187.34 mo
428.333 186.346 li
457.751 134.966 li
462.485 136.737 li
491.366 84.4448 li
493.116 85.4116 li
463.401 139.214 li
458.642 137.435 li
430.069 187.34 li
cp
f
495.698 79.5193 mo
487.067 84.2688 li
495.369 89.25 li
495.698 79.5193 li
cp
f
367.645 168.181 mo
367.645 202.054 340.185 229.514 306.312 229.514 cv
272.438 229.514 244.979 202.054 244.979 168.181 cv
244.979 134.307 272.438 106.848 306.312 106.848 cv
340.185 106.848 367.645 134.307 367.645 168.181 cv
cp
.891569 .371435 .625605 .210086 cmyk
f
250.622 202.877 mo
243.657 192.57 239.976 180.518 239.976 168.026 cv
239.976 162.263 240.762 156.556 242.313 151.062 cv
244.237 151.605 li
242.737 156.922 241.976 162.447 241.976 168.026 cv
241.976 180.118 245.539 191.782 252.279 201.758 cv
250.622 202.877 li
cp
.829892 .595697 .683223 .773831 cmyk
f
302.31 230.36 mo
284.042 230.36 266.756 222.384 254.883 208.478 cv
256.405 207.179 li
267.896 220.64 284.628 228.36 302.31 228.36 cv
322.525 228.36 341.302 218.305 352.536 201.464 cv
354.2 202.574 li
342.594 219.972 323.195 230.36 302.31 230.36 cv
cp
f
357.862 196.328 mo
356.081 195.417 li
358.8 190.092 360.701 184.406 361.733 178.518 cv
363.704 178.864 li
362.637 184.948 360.672 190.824 357.862 196.328 cv
cp
f
360.441 151.822 mo
353.216 125.839 329.311 107.693 302.31 107.693 cv
302.31 105.693 li
330.205 105.693 354.902 124.441 362.369 151.286 cv
360.441 151.822 li
cp
f
247.273 143.269 mo
245.45 142.447 li
249.157 134.217 254.745 126.736 261.608 120.814 cv
262.915 122.329 li
256.271 128.062 250.862 135.302 247.273 143.269 cv
cp
f
259.897 183.197 mo
259.897 184.624 258.74 185.781 257.313 185.781 cv
255.886 185.781 254.73 184.624 254.73 183.197 cv
254.73 181.771 255.886 180.614 257.313 180.614 cv
258.74 180.614 259.897 181.771 259.897 183.197 cv
cp
0 0 0 0 cmyk
f
254.312 181.614 mo
253.438 181.614 252.728 182.325 252.728 183.198 cv
252.728 184.071 253.438 184.781 254.312 184.781 cv
255.185 184.781 255.895 184.071 255.895 183.198 cv
255.895 182.325 255.185 181.614 254.312 181.614 cv
cp
254.312 186.781 mo
252.335 186.781 250.728 185.173 250.728 183.198 cv
250.728 181.221 252.335 179.614 254.312 179.614 cv
256.287 179.614 257.895 181.221 257.895 183.198 cv
257.895 185.173 256.287 186.781 254.312 186.781 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
320.939 121.571 mo
320.939 122.998 319.782 124.155 318.355 124.155 cv
316.929 124.155 315.772 122.998 315.772 121.571 cv
315.772 120.144 316.929 118.988 318.355 118.988 cv
319.782 118.988 320.939 120.144 320.939 121.571 cv
cp
0 0 0 0 cmyk
f
315.354 119.988 mo
314.48 119.988 313.771 120.698 313.771 121.571 cv
313.771 122.444 314.48 123.155 315.354 123.155 cv
316.227 123.155 316.937 122.444 316.937 121.571 cv
316.937 120.698 316.227 119.988 315.354 119.988 cv
cp
315.354 125.155 mo
313.378 125.155 311.771 123.547 311.771 121.571 cv
311.771 119.595 313.378 117.988 315.354 117.988 cv
317.329 117.988 318.937 119.595 318.937 121.571 cv
318.937 123.547 317.329 125.155 315.354 125.155 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
342.956 196.226 mo
323.506 152.633 271.889 155.994 271.368 156.032 cv
271.218 154.038 li
271.756 153.997 324.766 150.549 344.782 195.412 cv
342.956 196.226 li
cp
0 0 0 0 cmyk
f
341.72 198.036 mo
322.27 154.443 270.653 157.803 270.132 157.841 cv
269.982 155.847 li
270.52 155.806 323.53 152.358 343.546 197.221 cv
341.72 198.036 li
cp
.829892 .595697 .683223 .773831 cmyk
f
309.686 232.898 mo
306.65 231.568 302.462 231.568 299.426 232.898 cv
296.18 232.898 li
296.093 232.898 296.022 232.968 296.022 233.055 cv
296.022 236.808 li
296.022 236.808 li
296.022 238.62 297.743 240.432 301.185 241.357 cv
303.386 241.949 305.726 241.949 307.927 241.357 cv
311.369 240.432 313.09 238.62 313.09 236.808 cv
313.09 233.055 li
313.09 232.968 313.019 232.898 312.932 232.898 cv
309.686 232.898 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
297.022 233.898 mo
297.022 236.808 li
297.022 238.286 298.717 239.659 301.444 240.391 cv
303.479 240.938 305.632 240.938 307.667 240.391 cv
310.396 239.659 312.09 238.286 312.09 236.808 cv
312.09 233.898 li
309.478 233.898 li
309.285 233.814 li
306.502 232.595 302.613 232.595 299.827 233.814 cv
299.636 233.898 li
297.022 233.898 li
cp
304.556 242.801 mo
303.334 242.801 302.113 242.642 300.925 242.323 cv
297.229 241.33 295.022 239.268 295.022 236.808 cv
295.022 233.055 li
295.022 232.417 295.542 231.898 296.18 231.898 cv
299.222 231.898 li
302.441 230.562 306.67 230.562 309.891 231.898 cv
312.933 231.898 li
313.57 231.898 314.09 232.417 314.09 233.055 cv
314.09 236.808 li
314.09 239.268 311.883 241.33 308.187 242.323 cv
306.999 242.642 305.777 242.801 304.556 242.801 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
312.916 232.819 mo
309.67 232.819 li
308.564 232.335 307.305 232.032 306.006 231.901 cv
306.006 241.626 li
306.647 241.554 307.285 241.447 307.91 241.278 cv
311.352 240.353 313.073 238.541 313.073 236.729 cv
313.073 232.976 li
313.073 232.889 313.003 232.819 312.916 232.819 cv
cp
f
310.59 229.414 mo
313.923 231.338 313.923 234.457 310.59 236.381 cv
307.258 238.306 301.854 238.306 298.522 236.381 cv
295.189 234.457 295.189 231.338 298.522 229.414 cv
301.855 227.49 307.258 227.49 310.59 229.414 cv
cp
0 0 0 0 cmyk
f
304.556 228.981 mo
302.539 228.981 300.522 229.414 299.022 230.28 cv
297.732 231.024 297.022 231.954 297.022 232.897 cv
297.022 233.841 297.732 234.771 299.022 235.515 cv
302.022 237.249 307.092 237.248 310.091 235.515 cv
311.38 234.771 312.09 233.841 312.09 232.897 cv
312.09 231.954 311.38 231.024 310.091 230.28 cv
308.591 229.414 306.573 228.981 304.556 228.981 cv
cp
304.556 238.833 mo
302.205 238.833 299.854 238.305 298.022 237.248 cv
296.088 236.13 295.022 234.586 295.022 232.897 cv
295.022 231.208 296.088 229.665 298.022 228.547 cv
301.686 226.432 307.427 226.432 311.091 228.547 cv
311.091 228.547 li
313.024 229.665 314.09 231.209 314.09 232.897 cv
314.09 234.585 313.024 236.13 311.091 237.248 cv
309.259 238.305 306.907 238.833 304.556 238.833 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
309.54 231.344 mo
309.537 231.324 308.611 223.335 304.556 223.335 cv
300.497 223.335 299.573 231.346 299.573 231.346 cv
299.573 232.082 300.059 232.818 301.032 233.38 cv
302.979 234.504 306.134 234.504 308.08 233.38 cv
309.054 232.818 309.54 232.081 309.54 231.344 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
307.84 233.387 mo
308.814 232.825 309.3 232.088 309.299 231.351 cv
309.297 231.334 308.638 225.732 306.038 223.916 cv
303.434 225.735 302.776 231.353 302.776 231.353 cv
302.776 232.089 303.263 232.826 304.236 233.387 cv
304.763 233.692 305.382 233.906 306.038 234.046 cv
306.694 233.906 307.313 233.692 307.84 233.387 cv
cp
0 0 0 0 cmyk
f
300.574 231.392 mo
300.601 231.769 300.947 232.176 301.533 232.514 cv
303.171 233.459 305.941 233.459 307.58 232.514 cv
308.166 232.175 308.513 231.769 308.537 231.391 cv
308.304 229.487 307.111 224.334 304.556 224.334 cv
302.009 224.334 300.811 229.485 300.574 231.392 cv
cp
304.556 235.223 mo
303.108 235.223 301.661 234.898 300.532 234.247 cv
299.269 233.516 298.573 232.486 298.573 231.345 cv
298.579 231.231 li
298.685 230.32 299.745 222.334 304.556 222.334 cv
309.546 222.334 310.526 231.161 310.534 231.249 cv
310.539 231.343 li
310.541 232.468 309.826 233.526 308.58 234.247 cv
307.452 234.897 306.004 235.223 304.556 235.223 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
304.556 223.38 mo
304.493 223.38 304.437 223.398 304.375 223.402 cv
304.452 223.547 305.709 226.034 305.728 234.178 cv
306.589 234.058 307.408 233.813 308.08 233.425 cv
309.054 232.863 309.54 232.126 309.54 231.389 cv
309.537 231.369 308.61 223.38 304.556 223.38 cv
cp
f
304.556 224.894 mo
304.556 224.894 li
303.206 224.894 302.112 223.799 302.112 222.45 cv
302.112 215.362 li
302.112 214.013 303.206 212.918 304.556 212.918 cv
304.556 212.918 li
305.906 212.918 307 214.013 307 215.362 cv
307 222.45 li
307 223.799 305.906 224.894 304.556 224.894 cv
cp
0 0 0 0 cmyk
f
304.556 213.918 mo
303.76 213.918 303.112 214.566 303.112 215.363 cv
303.112 222.45 li
303.112 223.247 303.76 223.894 304.556 223.894 cv
305.352 223.894 306 223.247 306 222.45 cv
306 215.363 li
306 214.566 305.352 213.918 304.556 213.918 cv
cp
304.556 225.894 mo
302.657 225.894 301.112 224.349 301.112 222.45 cv
301.112 215.363 li
301.112 213.463 302.657 211.918 304.556 211.918 cv
306.455 211.918 308 213.463 308 215.363 cv
308 222.45 li
308 224.349 306.455 225.894 304.556 225.894 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
341.084 188.135 mo
331.243 205.173 309.452 211.007 292.414 201.165 cv
275.376 191.324 269.542 169.533 279.384 152.495 cv
289.225 135.457 311.016 129.623 328.054 139.465 cv
345.092 149.306 350.926 171.097 341.084 188.135 cv
cp
f
310.29 135.673 mo
307.284 135.673 304.26 136.068 301.279 136.866 cv
292.344 139.258 284.876 144.986 280.25 152.995 cv
270.7 169.529 276.381 190.749 292.914 200.299 cv
300.924 204.926 310.255 206.159 319.189 203.764 cv
328.124 201.373 335.592 195.644 340.218 187.635 cv
340.218 187.635 li
344.845 179.626 346.075 170.294 343.683 161.36 cv
341.291 152.425 335.563 144.957 327.554 140.331 cv
322.217 137.248 316.292 135.673 310.29 135.673 cv
cp
310.175 206.958 mo
303.825 206.958 297.559 205.292 291.914 202.032 cv
274.426 191.929 268.416 169.483 278.518 151.995 cv
283.412 143.523 291.311 137.464 300.762 134.934 cv
310.21 132.403 320.081 133.704 328.554 138.599 cv
337.025 143.493 343.085 151.392 345.615 160.843 cv
348.145 170.293 346.844 180.164 341.95 188.635 cv
341.95 188.635 li
337.057 197.107 329.157 203.166 319.707 205.697 cv
316.554 206.541 313.354 206.958 310.175 206.958 cv
cp
f
327.458 179.467 mo
331.358 172.716 332.657 165.178 331.667 158.011 cv
329.086 139.324 308.219 129.945 292 139.579 cv
286.93 142.59 282.54 146.905 279.38 152.374 cv
274.146 161.435 273.35 171.838 276.313 181.074 cv
279.012 189.486 286.445 195.409 295.245 196.193 cv
307.912 197.32 320.679 191.205 327.458 179.467 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
322.035 140.991 mo
314.644 137.928 305.793 138.162 298.008 142.786 cv
292.939 145.798 288.548 150.112 285.389 155.581 cv
280.155 164.643 279.358 175.045 282.322 184.281 cv
283.649 188.417 286.124 191.946 289.34 194.564 cv
291.215 195.282 293.204 195.761 295.274 195.945 cv
307.941 197.073 320.708 190.957 327.488 179.219 cv
331.387 172.468 332.686 164.93 331.696 157.763 cv
330.712 150.638 327.065 144.872 322.035 140.991 cv
cp
0 0 0 0 cmyk
f
305.855 136.75 mo
301.249 136.75 296.638 137.987 292.511 140.439 cv
287.45 143.445 283.209 147.745 280.246 152.874 cv
275.372 161.313 274.285 171.48 277.266 180.768 cv
279.837 188.785 286.93 194.448 295.334 195.197 cv
307.979 196.324 320.247 189.952 326.592 178.967 cv
326.592 178.967 li
330.267 172.606 331.68 165.407 330.677 158.147 cv
329.523 149.803 324.52 142.926 316.947 139.28 cv
313.437 137.589 309.647 136.75 305.855 136.75 cv
cp
298.214 197.325 mo
297.199 197.325 296.179 197.28 295.156 197.189 cv
285.949 196.369 278.179 190.163 275.361 181.379 cv
272.209 171.555 273.358 160.8 278.515 151.874 cv
281.648 146.449 286.135 141.9 291.489 138.719 cv
299.593 133.906 309.435 133.442 317.815 137.478 cv
326.002 141.42 331.412 148.854 332.657 157.874 cv
333.722 165.579 332.224 173.218 328.324 179.967 cv
322.104 190.735 310.52 197.325 298.214 197.325 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
344.433 180.238 mo
337.517 179.231 334.393 185.123 334.393 185.123 cv
334.393 185.123 341.3 171.891 328.934 165.155 cv
316.567 158.419 305.518 170.183 310.215 179.664 cv
313.97 187.244 308.627 194.182 306.333 196.659 cv
305.858 197.172 305.969 198.004 306.576 198.352 cv
314.689 203.017 322.888 202.36 328.8 200.718 cv
333.72 197.716 337.98 193.477 341.065 188.136 cv
342.535 185.591 343.648 182.939 344.433 180.238 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
329.375 171.458 mo
331.623 172.683 333.972 173.434 336.312 173.852 cv
335.636 170.661 333.69 167.392 329.234 164.965 cv
317.398 158.518 306.779 169.017 310.007 178.242 cv
311.995 171.506 320.328 166.531 329.375 171.458 cv
cp
0 0 0 0 cmyk
f
307.074 197.485 mo
307.404 197.674 307.734 197.855 308.063 198.026 cv
318.852 203.632 332.084 199.787 338.896 189.717 cv
339.355 189.04 339.789 188.346 340.199 187.636 cv
341.388 185.58 342.364 183.395 343.111 181.126 cv
337.791 180.981 335.303 185.542 335.276 185.592 cv
333.506 184.662 li
333.768 184.157 339.797 172.21 328.455 166.033 cv
322.076 162.559 316.534 164.469 313.472 167.415 cv
310.094 170.664 309.167 175.297 311.111 179.22 cv
315.116 187.306 309.616 194.585 307.066 197.339 cv
306.576 198.352 li
307.074 197.485 li
cp
320.135 202.936 mo
315.779 202.936 310.916 202 306.077 199.219 cv
305.528 198.903 305.158 198.36 305.062 197.73 cv
304.965 197.091 305.161 196.454 305.599 195.98 cv
307.867 193.531 312.771 187.08 309.318 180.109 cv
306.98 175.388 308.066 169.839 312.085 165.973 cv
315.659 162.537 322.088 160.288 329.412 164.277 cv
337.825 168.859 337.872 176.306 336.816 181.073 cv
338.624 179.784 341.195 178.754 344.577 179.249 cv
345.715 179.414 li
345.394 180.517 li
344.567 183.358 343.402 186.089 341.932 188.636 cv
338.871 193.933 334.511 198.406 329.32 201.571 cv
329.067 201.681 li
326.56 202.377 323.499 202.936 320.135 202.936 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
294.818 190.726 mo
294.862 191.076 294.443 191.296 294.187 191.053 cv
292.038 189.022 286.379 182.679 289.299 174.503 cv
292.865 164.516 300.831 168.558 299.999 175.097 cv
299.194 181.419 293.61 181.184 294.818 190.726 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
292.358 169.489 mo
290.702 169.489 288.655 170.874 287.239 174.838 cv
284.972 181.187 288.229 186.342 290.668 189.084 cv
290.445 184.276 292.122 182.047 293.62 180.058 cv
294.742 178.568 295.71 177.282 296.004 174.971 cv
296.381 172.013 294.753 169.979 293.03 169.567 cv
292.815 169.516 292.59 169.489 292.358 169.489 cv
cp
291.435 192.158 mo
291.094 192.158 290.76 192.029 290.497 191.78 cv
288.493 189.884 282.196 183.011 285.355 174.166 cv
287.415 168.398 290.91 167.011 293.495 167.622 cv
296.517 168.345 298.448 171.613 297.989 175.223 cv
297.627 178.06 296.402 179.688 295.217 181.261 cv
293.636 183.362 292.143 185.345 292.808 190.6 cv
292.88 191.177 292.581 191.743 292.062 192.005 cv
291.861 192.108 291.646 192.158 291.435 192.158 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
323.883 197.027 mo
316.009 197.027 307.211 194.443 299.028 189.716 cv
281.539 179.614 272.339 162.693 278.518 151.995 cv
280.25 152.995 li
274.622 162.738 283.495 178.434 300.028 187.984 cv
308.112 192.655 316.741 195.171 324.461 195.022 cv
331.945 194.893 337.541 192.27 340.218 187.635 cv
341.95 188.635 li
338.908 193.902 332.709 196.88 324.495 197.022 cv
324.292 197.025 324.087 197.027 323.883 197.027 cv
cp
f
317.578 137.405 mo
314.597 137.405 312.175 138.36 311.07 140.272 cv
310.024 142.083 310.251 144.528 311.708 147.159 cv
313.256 149.952 315.972 152.566 319.356 154.522 cv
322.74 156.476 326.335 157.519 329.557 157.468 cv
332.563 157.416 334.795 156.391 335.84 154.581 cv
335.84 154.581 li
336.886 152.77 336.659 150.324 335.202 147.694 cv
333.654 144.9 330.938 142.286 327.554 140.331 cv
324.179 138.381 320.592 137.405 317.578 137.405 cv
cp
329.318 159.47 mo
325.837 159.47 321.957 158.333 318.356 156.253 cv
314.662 154.12 311.68 151.234 309.959 148.128 cv
308.147 144.859 307.927 141.714 309.338 139.272 cv
312.197 134.321 320.637 134.025 328.554 138.599 cv
332.248 140.733 335.23 143.619 336.951 146.724 cv
338.763 149.993 338.983 153.138 337.572 155.581 cv
337.572 155.581 li
336.161 158.023 333.327 159.404 329.591 159.468 cv
329.5 159.469 329.409 159.47 329.318 159.47 cv
cp
f
329.51 178.688 mo
322.978 178.688 315.681 176.546 308.898 172.628 cv
301.939 168.609 296.329 163.186 293.101 157.36 cv
289.782 151.371 289.355 145.647 291.899 141.244 cv
293.619 138.266 296.606 136.119 300.537 135.037 cv
301.068 136.964 li
297.655 137.905 295.083 139.73 293.631 142.244 cv
291.452 146.016 291.885 151.04 294.85 156.391 cv
297.905 161.904 303.249 167.056 309.898 170.896 cv
316.548 174.737 323.639 176.802 329.983 176.684 cv
336.1 176.579 340.667 174.444 342.846 170.671 cv
344.223 168.288 344.563 165.324 343.827 162.099 cv
345.776 161.654 li
346.626 165.379 346.212 168.843 344.578 171.671 cv
342.034 176.076 336.863 178.566 330.018 178.684 cv
329.849 178.687 329.679 178.688 329.51 178.688 cv
cp
f
289.034 164.277 mo
288.712 164.402 288.356 164.228 288.279 163.892 cv
288.025 162.783 287.845 160.579 289.935 159.325 cv
292.808 157.601 294.819 161.624 293.67 163.635 cv
292.621 165.47 290.942 163.537 289.034 164.277 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
287.012 163.101 mo
287.591 163.101 288.116 163.219 288.549 163.316 cv
289.568 163.544 289.599 163.491 289.8 163.139 cv
290.223 162.399 289.936 161.028 289.21 160.317 cv
288.702 159.821 288.125 159.777 287.448 160.183 cv
286.198 160.933 286.025 162.158 286.165 163.193 cv
286.456 163.126 286.74 163.101 287.012 163.101 cv
cp
289.382 165.451 mo
288.923 165.451 288.481 165.351 288.111 165.267 cv
287.477 165.124 286.929 164.999 286.394 165.209 cv
286.394 165.209 li
285.964 165.374 285.486 165.349 285.084 165.135 cv
284.688 164.925 284.403 164.554 284.302 164.116 cv
283.743 161.668 284.515 159.611 286.418 158.468 cv
287.879 157.592 289.446 157.749 290.609 158.888 cv
291.997 160.246 292.413 162.598 291.537 164.131 cv
290.937 165.181 290.137 165.451 289.382 165.451 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
328.862 148.353 mo
328.871 148.333 332.723 140.291 328.92 137.895 cv
325.112 135.496 319.51 142.465 319.51 142.465 cv
319.075 143.156 319.097 144.134 319.677 145.236 cv
320.839 147.44 323.799 149.305 326.289 149.401 cv
327.535 149.449 328.427 149.045 328.862 148.353 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
322.168 144.842 mo
321.732 145.533 321.754 146.512 322.334 147.614 cv
322.469 147.869 322.632 148.117 322.811 148.361 cv
323.927 149.005 325.154 149.428 326.289 149.472 cv
327.535 149.52 328.427 149.116 328.862 148.424 cv
328.87 148.408 331.408 143.106 330.33 139.829 cv
326.657 139.274 322.168 144.842 322.168 144.842 cv
cp
0 0 0 0 cmyk
f
320.333 143.039 mo
320.11 143.441 320.192 144.068 320.563 144.77 cv
321.557 146.657 324.196 148.32 326.328 148.402 cv
327.11 148.428 327.723 148.235 327.988 147.861 cv
328.964 145.794 330.864 140.301 328.387 138.741 cv
325.92 137.185 321.688 141.373 320.333 143.039 cv
cp
326.488 150.405 mo
326.41 150.405 326.331 150.404 326.251 150.4 cv
323.398 150.291 320.123 148.227 318.793 145.703 cv
318.058 144.307 318.012 142.967 318.665 141.932 cv
318.731 141.838 li
318.983 141.525 324.938 134.207 329.453 137.048 cv
334.018 139.924 329.937 148.431 329.76 148.792 cv
329.708 148.885 li
329.09 149.87 327.952 150.405 326.488 150.405 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
328.893 137.937 mo
328.834 137.9 328.77 137.884 328.71 137.851 cv
328.697 138.033 328.406 141.108 323.612 148.76 cv
324.49 149.155 325.403 149.41 326.262 149.444 cv
327.508 149.492 328.4 149.088 328.835 148.396 cv
328.845 148.376 332.697 140.333 328.893 137.937 cv
cp
f
330.104 149.231 mo
328.271 148.435 li
328.281 148.41 329.381 145.845 330.016 142.366 cv
331.982 142.725 li
331.305 146.443 330.153 149.119 330.104 149.231 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
332.097 159.041 mo
331.729 159.041 331.499 158.998 331.466 158.99 cv
331.853 157.028 li
331.926 157.041 333.742 157.323 335.521 155.054 cv
337.358 152.711 335.931 149.257 335.916 149.223 cv
337.758 148.443 li
337.837 148.629 339.651 153.028 337.095 156.289 cv
335.201 158.702 333.117 159.041 332.097 159.041 cv
cp
f
337.819 177.251 mo
337.087 175.391 li
337.146 175.367 343.052 172.962 344.037 167.35 cv
346.008 167.696 li
344.825 174.429 338.105 177.139 337.819 177.251 cv
cp
f
310.156 216.59 mo
302.305 216.59 294.357 214.595 287.083 210.393 cv
265.58 197.973 257.811 170.782 269.167 148.966 cv
269.683 147.974 270.921 147.607 271.889 148.166 cv
271.889 148.166 li
272.783 148.682 273.136 149.814 272.658 150.729 cv
262.23 170.709 269.34 195.629 289.04 207.008 cv
308.738 218.388 333.876 212.094 345.975 193.079 cv
346.529 192.208 347.685 191.948 348.58 192.465 cv
348.58 192.465 li
349.553 193.027 349.842 194.287 349.237 195.234 cv
340.484 208.951 325.512 216.59 310.156 216.59 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
270.915 148.904 mo
270.824 148.904 270.734 148.916 270.645 148.942 cv
270.388 149.017 270.178 149.189 270.055 149.427 cv
258.839 170.973 266.539 197.372 287.583 209.527 cv
294.449 213.494 302.254 215.59 310.155 215.59 cv
325.751 215.59 340.046 207.78 348.395 194.696 cv
348.543 194.463 348.589 194.189 348.524 193.925 cv
348.463 193.672 348.305 193.461 348.08 193.332 cv
347.643 193.077 347.078 193.208 346.818 193.617 cv
334.316 213.267 308.716 219.531 288.54 207.874 cv
268.361 196.217 260.996 170.914 271.771 150.267 cv
271.996 149.837 271.824 149.283 271.389 149.032 cv
271.242 148.947 271.079 148.904 270.915 148.904 cv
cp
310.155 217.59 mo
301.903 217.59 293.752 215.401 286.583 211.259 cv
264.609 198.567 256.569 171.001 268.28 148.504 cv
268.653 147.788 269.311 147.248 270.085 147.022 cv
270.867 146.794 271.686 146.894 272.39 147.3 cv
273.762 148.093 274.27 149.803 273.545 151.192 cv
263.266 170.886 270.292 195.023 289.54 206.142 cv
308.787 217.259 333.205 211.287 345.131 192.542 cv
345.972 191.221 347.706 190.807 349.08 191.599 cv
349.782 192.004 350.274 192.662 350.468 193.451 cv
350.66 194.239 350.519 195.084 350.08 195.772 cv
341.362 209.434 326.438 217.59 310.155 217.59 cv
cp
f
270.488 154.677 mo
268.449 154.677 267.217 153.285 266.817 152.436 cv
268.621 151.572 li
268.693 151.716 269.375 152.973 271.094 152.609 cv
271.508 154.566 li
271.148 154.643 270.808 154.677 270.488 154.677 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
267.869 161.721 mo
266.06 161.721 264.862 160.383 264.439 159.258 cv
266.309 158.546 li
266.461 158.932 267.085 160.144 268.666 159.562 cv
269.357 161.439 li
268.824 161.635 268.327 161.721 267.869 161.721 cv
cp
f
269.767 192.469 mo
269.301 192.469 268.897 192.373 268.608 192.245 cv
269.394 190.406 li
269.593 190.484 270.636 190.774 271.619 189.048 cv
273.356 190.039 li
272.271 191.941 270.852 192.469 269.767 192.469 cv
cp
f
282.049 207.88 mo
281.694 205.912 li
281.857 205.879 283.292 205.548 283.479 203.85 cv
285.468 204.071 li
285.181 206.661 283.106 207.695 282.049 207.88 cv
cp
f
345.026 201.967 mo
343.026 201.922 li
344.026 201.945 li
343.026 201.938 li
343.023 201.699 342.916 200.49 341.078 200.192 cv
341.398 198.217 li
344.324 198.693 345.051 200.878 345.026 201.967 cv
cp
f
341.124 205.701 mo
339.126 205.607 li
339.154 205.002 339.025 204.55 338.741 204.261 cv
338.289 203.802 337.512 203.791 337.484 203.791 cv
337.484 203.791 li
337.424 201.791 li
337.596 201.791 339.101 201.774 340.167 202.86 cv
340.642 203.341 341.192 204.226 341.124 205.701 cv
cp
f
292.321 139.953 mo
289.391 139.953 287.017 137.578 287.017 134.649 cv
287.017 131.72 289.391 129.345 292.321 129.345 cv
295.25 129.345 297.625 131.72 297.625 134.649 cv
297.625 137.578 295.25 139.953 292.321 139.953 cv
cp
292.321 122.74 mo
285.738 122.74 280.402 128.076 280.402 134.659 cv
280.402 136.96 281.065 139.101 282.195 140.922 cv
288.816 151.015 li
289.55 152.181 290.84 152.962 292.321 152.962 cv
293.801 152.962 295.091 152.181 295.826 151.015 cv
302.447 140.922 li
303.576 139.101 304.239 136.96 304.239 134.659 cv
304.239 128.076 298.903 122.74 292.321 122.74 cv
cp
0 0 0 0 cmyk
f
292.883 139.79 mo
289.954 139.79 287.579 137.415 287.579 134.486 cv
287.579 131.557 289.954 129.182 292.883 129.182 cv
295.812 129.182 298.187 131.557 298.187 134.486 cv
298.187 137.415 295.812 139.79 292.883 139.79 cv
cp
304.802 134.496 mo
304.802 134.442 304.801 134.389 304.801 134.336 cv
304.657 123.39 288.978 120.781 285.367 131.115 cv
284.937 132.345 284.703 133.668 284.703 135.045 cv
284.703 137.346 285.366 139.487 286.496 141.308 cv
293.117 151.401 li
293.119 151.406 293.122 151.41 293.125 151.415 cv
293.675 152.28 294.929 152.389 295.684 151.697 cv
295.954 151.448 296.191 151.165 296.388 150.852 cv
303.009 140.759 li
304.139 138.938 304.802 136.797 304.802 134.496 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
292.321 130.345 mo
289.948 130.345 288.017 132.276 288.017 134.649 cv
288.017 137.022 289.948 138.953 292.321 138.953 cv
294.694 138.953 296.625 137.022 296.625 134.649 cv
296.625 132.276 294.694 130.345 292.321 130.345 cv
cp
292.321 140.953 mo
288.845 140.953 286.017 138.125 286.017 134.649 cv
286.017 131.173 288.845 128.345 292.321 128.345 cv
295.797 128.345 298.625 131.173 298.625 134.649 cv
298.625 138.125 295.797 140.953 292.321 140.953 cv
cp
292.321 123.74 mo
286.3 123.74 281.402 128.638 281.402 134.659 cv
281.402 136.679 281.97 138.662 283.045 140.395 cv
289.651 150.467 li
290.245 151.409 291.239 151.962 292.321 151.962 cv
293.402 151.962 294.396 151.409 294.979 150.482 cv
301.611 140.374 li
302.671 138.662 303.239 136.679 303.239 134.659 cv
303.239 128.638 298.341 123.74 292.321 123.74 cv
cp
292.321 153.962 mo
290.548 153.962 288.921 153.06 287.969 151.548 cv
281.359 141.471 li
280.074 139.399 279.402 137.051 279.402 134.659 cv
279.402 127.536 285.198 121.74 292.321 121.74 cv
299.444 121.74 305.239 127.536 305.239 134.659 cv
305.239 137.051 304.567 139.399 303.297 141.449 cv
296.662 151.563 li
295.72 153.06 294.094 153.962 292.321 153.962 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
328.17 181.715 mo
325.241 181.715 322.866 179.341 322.866 176.412 cv
322.866 173.482 325.241 171.108 328.17 171.108 cv
331.1 171.108 333.474 173.482 333.474 176.412 cv
333.474 179.341 331.1 181.715 328.17 181.715 cv
cp
328.17 164.503 mo
321.588 164.503 316.252 169.839 316.252 176.421 cv
316.252 178.722 316.915 180.863 318.044 182.685 cv
324.665 192.778 li
325.4 193.944 326.69 194.725 328.17 194.725 cv
329.651 194.725 330.941 193.944 331.675 192.778 cv
338.296 182.685 li
339.426 180.863 340.089 178.722 340.089 176.421 cv
340.089 169.839 334.753 164.503 328.17 164.503 cv
cp
0 0 0 0 cmyk
f
328.733 181.552 mo
325.804 181.552 323.429 179.178 323.429 176.249 cv
323.429 173.319 325.804 170.945 328.733 170.945 cv
331.662 170.945 334.037 173.319 334.037 176.249 cv
334.037 179.178 331.662 181.552 328.733 181.552 cv
cp
340.651 176.258 mo
340.651 176.205 340.651 176.152 340.65 176.099 cv
340.507 165.153 324.827 162.544 321.216 172.878 cv
320.786 174.108 320.553 175.43 320.553 176.807 cv
320.553 179.108 321.216 181.249 322.345 183.071 cv
328.966 193.164 li
328.969 193.169 328.972 193.173 328.975 193.178 cv
329.524 194.042 330.779 194.152 331.533 193.459 cv
331.804 193.211 332.041 192.927 332.238 192.615 cv
338.859 182.522 li
339.988 180.7 340.651 178.559 340.651 176.258 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
328.17 172.108 mo
325.797 172.108 323.867 174.039 323.867 176.412 cv
323.867 178.785 325.797 180.715 328.17 180.715 cv
330.543 180.715 332.474 178.785 332.474 176.412 cv
332.474 174.039 330.543 172.108 328.17 172.108 cv
cp
328.17 182.715 mo
324.694 182.715 321.867 179.888 321.867 176.412 cv
321.867 172.936 324.694 170.108 328.17 170.108 cv
331.646 170.108 334.474 172.936 334.474 176.412 cv
334.474 179.888 331.646 182.715 328.17 182.715 cv
cp
328.17 165.503 mo
322.15 165.503 317.252 170.401 317.252 176.421 cv
317.252 178.441 317.82 180.425 318.895 182.158 cv
325.501 192.229 li
326.095 193.171 327.089 193.725 328.17 193.725 cv
329.252 193.725 330.246 193.171 330.829 192.245 cv
337.46 182.137 li
338.521 180.425 339.089 178.441 339.089 176.421 cv
339.089 170.401 334.191 165.503 328.17 165.503 cv
cp
328.17 195.725 mo
326.398 195.725 324.771 194.822 323.819 193.311 cv
317.208 183.233 li
315.924 181.162 315.252 178.814 315.252 176.421 cv
315.252 169.298 321.047 163.503 328.17 163.503 cv
335.293 163.503 341.089 169.298 341.089 176.421 cv
341.089 178.814 340.417 181.162 339.146 183.212 cv
332.511 193.326 li
331.57 194.822 329.943 195.725 328.17 195.725 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
195.982 168.181 mo
195.982 202.054 168.522 229.514 134.648 229.514 cv
100.775 229.514 73.315 202.054 73.315 168.181 cv
73.315 134.307 100.775 106.848 134.648 106.848 cv
168.522 106.848 195.982 134.307 195.982 168.181 cv
cp
.891569 .371435 .625605 .210086 cmyk
f
78.9587 202.877 mo
71.9939 192.57 68.3127 180.518 68.3127 168.026 cv
68.3127 162.263 69.0989 156.556 70.6491 151.062 cv
72.574 151.605 li
71.0735 156.922 70.3127 162.447 70.3127 168.026 cv
70.3127 180.118 73.8757 191.782 80.6159 201.758 cv
78.9587 202.877 li
cp
.829892 .595697 .683223 .773831 cmyk
f
130.646 230.36 mo
112.379 230.36 95.0925 222.384 83.2199 208.478 cv
84.7414 207.179 li
96.2331 220.64 112.965 228.36 130.646 228.36 cv
150.862 228.36 169.638 218.305 180.873 201.464 cv
182.537 202.574 li
170.93 219.972 151.532 230.36 130.646 230.36 cv
cp
f
186.198 196.328 mo
184.417 195.417 li
187.135 190.092 189.038 184.407 190.071 178.518 cv
192.04 178.864 li
190.973 184.949 189.008 190.824 186.198 196.328 cv
cp
f
188.779 151.822 mo
181.552 125.839 157.647 107.693 130.646 107.693 cv
130.646 105.693 li
158.542 105.693 183.239 124.441 190.705 151.286 cv
188.779 151.822 li
cp
f
75.6096 143.269 mo
73.7864 142.447 li
77.4944 134.216 83.0818 126.735 89.9446 120.814 cv
91.2512 122.329 li
84.6076 128.061 79.199 135.302 75.6096 143.269 cv
cp
f
93.6052 165.352 mo
93.6052 166.779 92.4486 167.935 91.0219 167.935 cv
89.5951 167.935 88.4385 166.779 88.4385 165.352 cv
88.4385 163.925 89.5951 162.769 91.0219 162.769 cv
92.4486 162.769 93.6052 163.925 93.6052 165.352 cv
cp
0 0 0 0 cmyk
f
88.0198 163.769 mo
87.1467 163.769 86.4367 164.479 86.4367 165.352 cv
86.4367 166.225 87.1467 166.935 88.0198 166.935 cv
88.8928 166.935 89.6032 166.225 89.6032 165.352 cv
89.6032 164.479 88.8928 163.769 88.0198 163.769 cv
cp
88.0198 168.935 mo
86.0442 168.935 84.4367 167.328 84.4367 165.352 cv
84.4367 163.376 86.0442 161.769 88.0198 161.769 cv
89.9958 161.769 91.6032 163.376 91.6032 165.352 cv
91.6032 167.328 89.9958 168.935 88.0198 168.935 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
179.792 184.24 mo
179.792 185.667 178.635 186.823 177.208 186.823 cv
175.782 186.823 174.625 185.667 174.625 184.24 cv
174.625 182.813 175.782 181.657 177.208 181.657 cv
178.635 181.657 179.792 182.813 179.792 184.24 cv
cp
0 0 0 0 cmyk
f
174.207 182.657 mo
173.334 182.657 172.623 183.367 172.623 184.24 cv
172.623 185.113 173.334 185.824 174.207 185.824 cv
175.08 185.824 175.79 185.113 175.79 184.24 cv
175.79 183.367 175.08 182.657 174.207 182.657 cv
cp
174.207 187.824 mo
172.231 187.824 170.623 186.216 170.623 184.24 cv
170.623 182.264 172.231 180.657 174.207 180.657 cv
176.182 180.657 177.79 182.264 177.79 184.24 cv
177.79 186.216 176.182 187.824 174.207 187.824 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
132.908 121.675 mo
132.908 123.101 131.751 124.258 130.324 124.258 cv
128.898 124.258 127.741 123.101 127.741 121.675 cv
127.741 120.248 128.898 119.091 130.324 119.091 cv
131.751 119.091 132.908 120.248 132.908 121.675 cv
cp
0 0 0 0 cmyk
f
127.322 120.091 mo
126.449 120.091 125.739 120.802 125.739 121.675 cv
125.739 122.548 126.449 123.258 127.322 123.258 cv
128.196 123.258 128.905 122.548 128.905 121.675 cv
128.905 120.802 128.196 120.091 127.322 120.091 cv
cp
127.322 125.258 mo
125.346 125.258 123.739 123.65 123.739 121.675 cv
123.739 119.699 125.346 118.091 127.322 118.091 cv
129.298 118.091 130.905 119.699 130.905 121.675 cv
130.905 123.65 129.298 125.258 127.322 125.258 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
113.46 170.583 mo
113.46 170.583 109.146 152.3 130.584 143.775 cv
134.27 159.176 li
128.133 171.621 li
128.133 171.621 121.555 173.091 120.675 172.557 cv
119.796 172.024 113.46 170.583 113.46 170.583 cv
cp
0 0 0 0 cmyk
f
121.114 171.658 mo
121.797 171.792 124.816 171.314 127.449 170.747 cv
133.214 159.057 li
129.884 145.147 li
112.748 152.541 113.862 166.684 114.327 169.756 cv
116.242 170.201 120.127 171.139 121.114 171.658 cv
cp
121.501 173.661 mo
120.568 173.661 120.297 173.497 120.157 173.413 cv
119.645 173.123 116.166 172.224 113.239 171.559 cv
112.63 171.42 li
112.487 170.813 li
112.442 170.622 108.229 151.588 130.214 142.846 cv
131.287 142.419 li
135.327 159.293 li
128.818 172.492 li
128.351 172.596 li
124.593 173.436 122.593 173.661 121.501 173.661 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
162.897 216.681 mo
162.897 216.681 155.561 233.974 133.233 228.167 cv
139.37 213.569 li
151.68 207.165 li
151.68 207.165 157.853 209.87 158.247 210.821 cv
158.641 211.771 162.897 216.681 162.897 216.681 cv
cp
f
134.609 227.475 mo
152.993 231.711 160.285 219.66 161.715 216.841 cv
160.435 215.352 157.852 212.291 157.361 211.287 cv
156.89 210.775 154.174 209.374 151.715 208.274 cv
140.152 214.29 li
134.609 227.475 li
cp
141.9 230.351 mo
139.22 230.351 136.255 229.987 132.982 229.135 cv
131.863 228.844 li
138.589 212.848 li
151.643 206.056 li
152.081 206.249 li
158.623 209.116 159.035 210.111 159.171 210.438 cv
159.413 210.975 161.686 213.757 163.653 216.025 cv
164.061 216.497 li
163.818 217.071 li
163.752 217.226 157.967 230.351 141.9 230.351 cv
cp
f
118.715 169.371 mo
118.715 169.371 114.402 151.088 135.839 142.563 cv
139.525 157.964 li
133.388 170.409 li
133.388 170.409 126.811 171.879 125.931 171.345 cv
125.051 170.812 118.715 169.371 118.715 169.371 cv
cp
f
103.914 202.955 mo
103.914 202.955 93.2633 198.255 94.8838 186.31 cv
94.91 186.117 95.1578 186.039 95.2814 186.19 cv
96.3424 187.483 99.9959 191.152 105.201 187.976 cv
105.732 187.652 106.004 187.027 105.877 186.418 cv
104.946 181.951 102.468 163.155 126.004 160.807 cv
152.742 158.141 130.927 183.363 130.927 183.363 cv
127.123 193.824 li
103.914 202.955 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
100.439 189.69 mo
100.465 189.497 100.713 189.42 100.836 189.57 cv
101.897 190.863 105.551 194.532 110.756 191.356 cv
111.287 191.032 111.559 190.408 111.432 189.798 cv
110.501 185.331 105.96 166.116 129.496 163.769 cv
132.411 163.478 136.811 163.938 138.663 164.242 cv
137.304 161.696 133.632 160.186 126.004 160.946 cv
102.468 163.293 104.946 182.089 105.877 186.557 cv
106.004 187.166 105.732 187.791 105.201 188.115 cv
99.9959 191.29 96.3424 187.622 95.2813 186.329 cv
95.1577 186.178 94.91 186.255 94.8838 186.449 cv
93.2632 198.394 103.914 203.093 103.914 203.093 cv
104.646 202.805 li
102.074 200.155 99.5957 195.905 100.439 189.69 cv
cp
0 0 0 0 cmyk
f
95.7297 188.078 mo
95.3679 196.896 102.251 200.989 103.955 201.864 cv
126.338 193.058 li
130.05 182.848 li
130.17 182.708 li
133.129 179.285 140.27 169.359 137.806 164.612 cv
136.522 162.138 132.479 161.166 126.104 161.802 cv
118.435 162.567 112.905 165.192 109.668 169.604 cv
105.134 175.783 106.369 183.879 106.856 186.213 cv
107.068 187.234 106.613 188.286 105.723 188.83 cv
101.146 191.622 97.6184 189.721 95.7297 188.078 cv
cp
103.892 204.038 mo
103.51 203.87 li
103.397 203.82 92.1911 198.721 93.8933 186.175 cv
93.9577 185.693 94.3049 185.292 94.7766 185.158 cv
95.2478 185.028 95.7473 185.18 96.0544 185.555 cv
97.177 186.924 100.265 189.814 104.68 187.123 cv
104.851 187.018 104.938 186.817 104.898 186.622 cv
104.219 183.368 103.17 175.08 108.055 168.42 cv
111.642 163.532 117.648 160.635 125.905 159.812 cv
133.263 159.08 137.865 160.384 139.582 163.692 cv
143.012 170.304 133.096 182.35 131.804 183.874 cv
127.909 194.589 li
103.892 204.038 li
cp
.829892 .595697 .683223 .773831 cmyk
f
103.914 202.955 mo
110.963 200.181 li
111.81 198.325 111.201 196.752 106.777 196.69 cv
96.5006 196.546 95.0443 187.603 94.8979 186.435 cv
94.8958 186.418 94.8688 186.423 94.8666 186.439 cv
93.3404 198.289 103.914 202.955 103.914 202.955 cv
cp
f
96.1784 192.452 mo
97.7073 198.285 102.562 201.148 103.955 201.864 cv
110.194 199.409 li
110.294 199.1 110.34 198.772 110.2 198.551 cv
110.078 198.359 109.47 197.728 106.763 197.69 cv
101.158 197.611 97.9758 195.087 96.1784 192.452 cv
cp
103.892 204.038 mo
103.51 203.87 li
103.398 203.82 92.2717 198.759 93.8747 186.311 cv
93.9885 185.426 li
94.8996 185.424 li
95.7756 185.437 li
95.8908 186.318 li
96.0837 187.854 97.5188 195.56 106.791 195.69 cv
109.483 195.728 111.151 196.314 111.89 197.482 cv
112.262 198.07 112.561 199.087 111.872 200.596 cv
111.704 200.963 li
103.892 204.038 li
cp
f
152.655 160.605 mo
152.655 160.605 161.904 174.333 156.077 187.287 cv
154.998 189.684 154.281 192.244 154.292 194.873 cv
154.307 198.387 155.347 202.584 159.769 204.317 cv
167.808 207.466 171.971 200.475 171.547 196.609 cv
171.515 196.32 171.882 196.175 172.053 196.411 cv
174.786 200.182 181.387 211.862 166.053 220.498 cv
148.534 230.365 131.095 206.48 137.073 195.679 cv
143.05 184.879 133.119 178.912 133.119 178.912 cv
139.548 164.272 li
152.655 160.605 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
168.532 214.991 mo
149.832 222.376 136.85 197.956 142.828 187.156 cv
148.805 176.355 138.874 170.389 138.874 170.389 cv
141.634 164.104 li
139.102 164.813 li
132.673 179.453 li
132.673 179.453 142.604 185.419 136.627 196.219 cv
130.649 207.02 148.088 230.905 165.607 221.038 cv
171.815 217.542 174.426 213.547 175.156 209.78 cv
174.175 210.528 170.878 214.064 168.532 214.991 cv
cp
0 0 0 0 cmyk
f
134.363 178.566 mo
136.665 180.313 143.31 186.474 137.947 196.164 cv
135.241 201.054 137.89 209.62 143.98 215.664 cv
150.467 222.104 158.535 223.585 165.562 219.627 cv
170.669 216.75 173.699 213.281 174.567 209.314 cv
175.471 205.179 173.829 201.235 172.392 198.767 cv
171.972 200.721 170.818 202.874 168.884 204.355 cv
166.318 206.32 162.95 206.638 159.405 205.248 cv
155.428 203.69 153.315 200.103 153.292 194.876 cv
153.282 192.354 153.912 189.662 155.164 186.876 cv
160.017 176.088 153.837 164.515 152.202 161.77 cv
140.273 165.108 li
134.363 178.566 li
cp
157.445 223.831 mo
152.257 223.831 147.06 221.539 142.571 217.083 cv
135.768 210.332 133.029 200.921 136.197 195.195 cv
141.624 185.391 132.973 179.994 132.603 179.769 cv
131.853 179.314 li
138.822 163.436 li
153.081 159.448 li
153.484 160.046 li
153.875 160.625 162.975 174.388 156.988 187.697 cv
155.854 190.22 155.283 192.633 155.292 194.869 cv
155.311 199.268 156.94 202.134 160.134 203.386 cv
163.811 204.827 166.261 203.844 167.668 202.767 cv
169.794 201.139 170.741 198.436 170.552 196.719 cv
170.489 196.139 170.823 195.588 171.365 195.379 cv
171.915 195.171 172.516 195.347 172.863 195.825 cv
174.785 198.478 177.818 203.814 176.521 209.741 cv
175.526 214.289 172.169 218.202 166.543 221.37 cv
163.614 223.019 160.531 223.831 157.445 223.831 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
171.542 196.535 mo
171.966 200.4 167.803 207.392 159.764 204.242 cv
158.129 203.601 156.959 202.623 156.129 201.467 cv
157.87 204.36 161.697 209.072 168.16 209.041 cv
171.128 209.028 173.713 207.745 175.792 205.902 cv
175.516 201.711 173.347 198.129 172.048 196.337 cv
171.877 196.101 171.51 196.245 171.542 196.535 cv
cp
f
161.245 205.748 mo
163.031 207.062 165.301 208.041 168.099 208.041 cv
168.118 208.041 168.136 208.041 168.155 208.041 cv
170.456 208.031 172.727 207.146 174.752 205.475 cv
174.474 202.81 173.404 200.422 172.388 198.688 cv
171.968 200.643 170.815 202.799 168.879 204.281 cv
166.762 205.901 164.102 206.401 161.245 205.748 cv
cp
168.097 210.041 mo
161.16 210.042 157.086 204.997 155.272 201.983 cv
156.942 200.884 li
157.722 201.971 158.795 202.788 160.13 203.312 cv
163.805 204.752 166.255 203.771 167.663 202.693 cv
169.789 201.065 170.736 198.361 170.548 196.644 cv
170.484 196.065 170.818 195.515 171.36 195.305 cv
171.901 195.097 172.515 195.28 172.857 195.749 cv
174.2 197.603 176.496 201.376 176.79 205.836 cv
176.822 206.325 li
176.455 206.65 li
173.968 208.855 171.102 210.028 168.164 210.041 cv
168.142 210.041 168.119 210.041 168.097 210.041 cv
cp
f
128.52 187.699 mo
128.52 187.699 115.404 185.936 106.663 195.784 cv
97.9219 205.631 104.142 214.827 102.466 223.481 cv
100.877 231.681 90.6808 229.52 91.8007 222.726 cv
91.8466 222.448 91.5001 222.288 91.3354 222.518 cv
89.5521 225.005 85.8067 231.858 92.8203 238.353 cv
101.87 246.734 117.115 236.878 117.628 228.609 cv
117.655 228.159 118.148 227.909 118.506 228.182 cv
121.626 230.562 132.289 237.273 143.802 228.268 cv
158.532 216.748 149.488 194.148 144.103 191.802 cv
138.718 189.456 132.649 186.527 132.649 186.527 cv
128.52 187.699 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
140.881 192.284 mo
135.496 189.939 129.427 187.009 129.427 187.009 cv
125.298 188.182 li
125.298 188.182 126.764 197.445 130.372 199.016 cv
135.346 201.183 143.428 220.63 133.02 232.664 cv
135.447 232.001 137.992 230.775 140.58 228.751 cv
155.31 217.231 146.266 194.63 140.881 192.284 cv
cp
0 0 0 0 cmyk
f
104.391 239.938 mo
97.3773 233.443 101.123 226.589 102.906 224.102 cv
103.071 223.873 103.417 224.032 103.371 224.311 cv
102.251 231.104 112.447 233.265 114.036 225.065 cv
115.713 216.412 108.364 203.853 117.105 194.006 cv
123.817 186.445 134.23 189.092 138.182 189.167 cv
135.053 187.72 132.641 186.556 132.641 186.556 cv
128.513 187.729 li
128.513 187.729 115.397 185.966 106.656 195.813 cv
97.9143 205.66 104.135 214.857 102.458 223.51 cv
100.869 231.71 90.6732 229.549 91.7931 222.756 cv
91.8391 222.477 91.4924 222.318 91.3278 222.547 cv
89.5445 225.034 85.7991 231.888 92.8127 238.383 cv
96.5034 241.801 101.224 242.184 105.556 240.88 cv
105.159 240.593 104.768 240.287 104.391 239.938 cv
cp
f
90.8821 225.235 mo
89.4333 228.26 88.5451 233.032 93.4992 237.62 cv
96.884 240.752 101.706 241.395 106.732 239.384 cv
112.125 237.224 116.381 232.565 116.63 228.547 cv
116.666 227.961 117.016 227.449 117.543 227.208 cv
118.059 226.972 118.66 227.041 119.113 227.387 cv
121.986 229.58 132.212 236.063 143.186 227.48 cv
151.071 221.314 151.21 212.225 150.591 207.356 cv
149.62 199.723 145.926 193.687 143.704 192.719 cv
139.091 190.709 133.92 188.246 132.558 187.592 cv
128.594 188.718 li
128.388 188.691 li
128.262 188.675 115.681 187.13 107.411 196.448 cv
101.961 202.586 102.653 208.53 103.321 214.278 cv
103.68 217.364 104.051 220.555 103.447 223.671 cv
102.496 228.578 98.78 230.222 95.7331 229.677 cv
93.5149 229.28 91.4714 227.695 90.8821 225.235 cv
cp
101.089 242.545 mo
97.7102 242.545 94.6135 241.376 92.1404 239.086 cv
84.3796 231.9 88.9402 224.142 90.5227 221.935 cv
90.8664 221.458 91.4822 221.283 92.0227 221.504 cv
92.5696 221.732 92.884 222.301 92.7873 222.889 cv
92.322 225.71 94.1711 227.366 96.0862 227.708 cv
98.2668 228.102 100.787 226.886 101.484 223.291 cv
102.029 220.479 101.692 217.579 101.334 214.509 cv
100.649 208.612 99.8713 201.928 105.915 195.12 cv
114.396 185.567 126.612 186.485 128.439 186.683 cv
132.741 185.461 li
133.084 185.626 li
133.144 185.656 139.198 188.575 144.503 190.885 cv
147.575 192.224 151.552 199.06 152.575 207.104 cv
153.247 212.394 153.082 222.28 144.419 229.056 cv
133.03 237.964 122.389 232.171 118.541 229.448 cv
117.821 234.044 113.308 238.905 107.475 241.241 cv
105.295 242.114 103.139 242.545 101.089 242.545 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
144.215 192.087 mo
143.43 191.745 142.632 191.391 141.84 191.035 cv
134.839 192.779 li
134.839 192.779 145.146 199.314 145.332 213.792 cv
145.576 232.766 126.095 232.284 126.095 232.284 cv
126.095 232.284 li
130.89 233.709 137.258 233.759 143.914 228.553 cv
158.643 217.033 149.6 194.433 144.215 192.087 cv
cp
f
109.722 239.026 mo
109.803 238.979 109.763 238.852 109.671 238.864 cv
107.031 239.217 93.1348 240.477 93.7823 227.808 cv
93.7823 227.808 li
92.3406 226.792 91.421 225.025 91.8011 222.724 cv
91.8468 222.448 91.5008 222.287 91.3374 222.515 cv
89.5549 224.999 85.8041 231.856 92.8203 238.353 cv
97.7448 242.914 104.501 242.072 109.722 239.026 cv
cp
f
90.8845 225.231 mo
89.4338 228.257 88.5442 233.031 93.4997 237.62 cv
96.8318 240.705 101.025 241.016 104.779 240.02 cv
101.869 239.826 98.4197 239.048 95.946 236.77 cv
93.7556 234.751 92.6863 231.899 92.7644 228.284 cv
91.8078 227.473 91.1697 226.424 90.8845 225.231 cv
cp
101.027 242.535 mo
97.9407 242.535 94.8205 241.569 92.1404 239.086 cv
84.3786 231.899 88.9411 224.139 90.5246 221.932 cv
90.8659 221.456 91.4831 221.281 92.0217 221.502 cv
92.57 221.73 92.885 222.299 92.7873 222.888 cv
92.4021 225.222 93.6067 226.46 94.3586 226.991 cv
94.8093 227.308 li
94.781 227.859 li
94.6155 231.103 95.4631 233.606 97.301 235.298 cv
101.102 238.8 108.163 238.057 109.538 237.873 cv
110.061 237.812 110.545 238.115 110.709 238.603 cv
110.872 239.091 110.67 239.631 110.226 239.889 cv
110.226 239.889 li
107.587 241.429 104.326 242.535 101.027 242.535 cv
cp
f
125.841 192.136 mo
124.471 193.503 122.994 194.754 121.497 195.981 cv
119.458 197.652 116.285 201.585 118.498 208.908 cv
120.518 215.591 117.874 218.948 115.752 220.486 cv
115.169 220.909 115.481 221.824 116.201 221.809 cv
119.881 221.727 126.307 220.222 127.754 210.985 cv
127.806 210.648 128.032 210.361 128.354 210.249 cv
129.154 209.972 130.67 209.716 131.504 211.31 cv
131.552 211.402 131.663 211.441 131.747 211.382 cv
132.847 210.612 139.256 205.642 135.35 196.895 cv
131.088 187.35 128.383 189.597 128.383 189.597 cv
125.841 192.136 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
135.645 196.989 mo
134.416 194.237 133.318 192.47 132.376 191.342 cv
131.018 192.698 li
129.648 194.065 128.171 195.316 126.674 196.543 cv
124.635 198.214 121.462 202.147 123.675 209.469 cv
125.695 216.153 123.051 219.51 120.929 221.048 cv
120.924 221.051 120.922 221.056 120.918 221.059 cv
123.983 219.881 127.095 217.162 128.048 211.079 cv
128.101 210.742 128.327 210.455 128.649 210.343 cv
129.449 210.065 130.964 209.809 131.799 211.404 cv
131.847 211.495 131.957 211.534 132.042 211.475 cv
133.141 210.705 139.551 205.736 135.645 196.989 cv
cp
0 0 0 0 cmyk
f
126.547 192.843 mo
125.116 194.273 123.579 195.568 122.131 196.754 cv
120.257 198.291 117.417 201.874 119.455 208.619 cv
121.478 215.311 119.06 218.976 117.004 220.767 cv
120.975 220.453 125.583 218.381 126.766 210.831 cv
126.877 210.12 127.361 209.535 128.028 209.304 cv
129.561 208.773 130.925 209.054 131.837 210.049 cv
133.672 208.501 137.522 204.211 134.437 197.303 cv
131.951 191.736 130.162 190.639 129.509 190.426 cv
129.233 190.335 129.069 190.369 129.002 190.392 cv
126.547 192.843 li
cp
116.181 222.808 mo
115.435 222.808 114.778 222.338 114.539 221.628 cv
114.297 220.908 114.548 220.124 115.165 219.676 cv
117.239 218.173 119.335 215.135 117.541 209.197 cv
115.166 201.339 118.603 197.059 120.863 195.208 cv
122.272 194.053 123.764 192.796 125.134 191.428 cv
125.134 191.427 li
127.676 188.889 li
127.881 188.715 128.625 188.161 129.847 188.446 cv
131.94 188.933 134.098 191.638 136.263 196.487 cv
140.546 206.079 133.176 211.602 132.321 212.201 cv
132.051 212.39 131.709 212.455 131.386 212.377 cv
131.056 212.297 130.776 212.077 130.617 211.772 cv
130.467 211.485 130.063 210.718 128.682 211.194 cv
127.126 221.458 119.448 222.737 116.222 222.808 cv
116.209 222.808 116.195 222.808 116.181 222.808 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
118.802 216.235 mo
118.8 216.234 li
118.159 218.319 116.884 219.666 115.752 220.486 cv
115.169 220.909 115.481 221.824 116.2 221.809 cv
119.881 221.727 126.307 220.222 127.754 210.985 cv
127.806 210.648 129.174 210.026 129.496 209.914 cv
123.777 209.017 118.802 216.235 118.802 216.235 cv
cp
f
119.703 216.695 mo
119.081 218.591 117.99 219.906 117.003 220.767 cv
120.926 220.458 125.47 218.432 126.72 211.106 cv
123.148 212.162 120.213 215.998 119.703 216.695 cv
cp
116.181 222.808 mo
115.435 222.808 114.778 222.338 114.539 221.628 cv
114.297 220.908 114.548 220.124 115.165 219.676 cv
116.063 219.026 117.257 217.848 117.844 215.94 cv
118.191 214.811 li
118.502 214.966 li
119.992 213.074 124.444 208.118 129.651 208.925 cv
133.596 209.543 li
129.825 210.858 li
129.589 210.94 128.985 211.231 128.696 211.423 cv
126.984 221.482 119.419 222.738 116.222 222.808 cv
116.209 222.808 116.195 222.808 116.181 222.808 cv
cp
f
132.054 191.794 mo
130.845 193.234 129.508 195.041 129.038 195.684 cv
128.94 195.818 128.96 196.001 129.085 196.11 cv
130.203 197.089 135.041 201.928 132.154 210.239 cv
132.045 210.553 132.425 210.801 132.673 210.58 cv
134.707 208.773 138.591 204.111 135.343 196.838 cv
134.318 194.544 133.385 192.935 132.556 191.809 cv
132.433 191.643 132.188 191.636 132.054 191.794 cv
cp
f
130.06 171.309 mo
125.286 174.292 li
119.952 177.626 115.98 183.127 114.327 189.468 cv
114.327 189.468 li
113.819 191.416 113.525 193.407 113.453 195.396 cv
113.453 195.396 li
113.393 197.043 115.23 197.756 116.297 196.5 cv
133.918 175.764 li
130.06 171.309 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
129.864 172.61 mo
125.817 175.14 li
120.714 178.33 116.879 183.644 115.294 189.719 cv
114.805 191.596 114.522 193.518 114.452 195.432 cv
114.434 195.905 114.699 196.06 114.814 196.104 cv
114.929 196.149 115.229 196.214 115.535 195.853 cv
132.6 175.77 li
129.864 172.61 li
cp
115 198.14 mo
114.695 198.14 114.387 198.084 114.091 197.969 cv
113.052 197.566 112.41 196.541 112.453 195.36 cv
112.529 193.3 112.833 191.233 113.359 189.215 cv
115.071 182.65 119.225 176.902 124.757 173.445 cv
130.256 170.006 li
135.235 175.758 li
117.06 197.148 li
116.513 197.791 115.762 198.14 115 198.14 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
126.956 173.251 mo
126.179 174.461 125.527 175.808 125.116 177.297 cv
123.015 184.895 113.776 196.275 113.692 196.378 cv
114.213 197.265 115.478 197.467 116.296 196.503 cv
133.917 175.767 li
130.059 171.311 li
126.956 173.251 li
cp
f
134.625 184.676 mo
125.292 179.364 li
123.088 188.043 li
122.517 189.509 122.814 191.313 124.114 193.107 cv
126.713 196.694 132.339 198.882 136.679 197.993 cv
138.848 197.549 140.286 196.42 140.857 194.953 cv
145.095 187.065 li
134.625 184.676 li
cp
0 0 0 0 cmyk
f
125.938 180.882 mo
124.02 188.406 li
123.551 189.609 123.873 191.07 124.924 192.52 cv
127.31 195.814 132.493 197.826 136.478 197.013 cv
138.233 196.654 139.457 195.793 139.925 194.59 cv
139.976 194.479 li
143.592 187.748 li
134.131 185.545 li
125.938 180.882 li
cp
134.61 199.195 mo
130.356 199.195 125.717 197.023 123.304 193.694 cv
121.857 191.696 121.442 189.584 122.133 187.741 cv
124.646 177.845 li
134.991 183.734 li
146.596 186.382 li
141.765 195.374 li
141.029 197.201 139.296 198.477 136.879 198.972 cv
136.146 199.123 135.384 199.195 134.61 199.195 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
147.022 177.905 mo
148.525 183.33 li
150.206 189.391 149.418 196.131 146.353 201.922 cv
146.353 201.922 li
145.411 203.702 144.283 205.368 142.992 206.884 cv
142.992 206.884 li
141.924 208.138 140.087 207.422 140.149 205.776 cv
141.168 178.583 li
147.022 177.905 li
cp
.840146 .241672 .565545 .0509346 cmyk
f
142.135 179.478 mo
141.148 205.813 li
141.13 206.287 141.395 206.441 141.51 206.486 cv
141.623 206.532 141.924 206.595 142.231 206.235 cv
143.474 204.776 144.563 203.167 145.469 201.455 cv
148.406 195.905 149.169 189.396 147.562 183.596 cv
146.287 178.997 li
142.135 179.478 li
cp
141.696 208.522 mo
141.389 208.522 141.082 208.465 140.784 208.349 cv
139.747 207.946 139.105 206.92 139.149 205.739 cv
140.2 177.689 li
147.757 176.813 li
149.489 183.062 li
151.231 189.349 150.41 196.393 147.237 202.39 cv
146.263 204.231 145.091 205.961 143.754 207.532 cv
143.207 208.174 142.457 208.522 141.696 208.522 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
147.737 180.493 mo
146.001 180.464 145.013 181.404 145.58 184.06 cv
147.677 193.891 141.216 207.367 141.186 207.43 cv
141.764 207.637 142.469 207.5 142.991 206.887 cv
144.282 205.371 145.41 203.705 146.352 201.925 cv
149.417 196.134 150.204 189.394 148.524 183.333 cv
147.737 180.493 li
cp
f
167.613 160.037 mo
175.803 138.987 173.47 102.753 167.402 100.394 cv
161.333 98.0336 135.134 123.171 126.951 144.224 cv
118.767 165.277 122.327 182.978 122.327 182.978 cv
122.383 183.237 li
122.561 184.493 123.056 185.562 124.016 186.887 cv
127.52 191.722 135.103 194.671 140.953 193.473 cv
142.556 193.145 143.85 192.532 144.83 191.727 cv
144.839 191.733 li
144.839 191.733 159.422 181.087 167.613 160.037 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
167.022 159.581 mo
174.136 141.3 173.309 111.579 168.994 102.528 cv
159.453 106.877 139.428 127.755 132.459 145.683 cv
124.276 166.736 127.835 184.437 127.835 184.437 cv
127.891 184.696 li
128.07 185.952 128.565 187.021 129.525 188.346 cv
130.938 190.296 133.02 191.932 135.379 193.12 cv
137.09 193.353 138.789 193.34 140.362 193.018 cv
141.965 192.69 143.26 192.077 144.24 191.271 cv
144.249 191.278 li
144.249 191.278 158.832 180.632 167.022 159.581 cv
cp
0 0 0 0 cmyk
f
166.448 101.229 mo
163.815 101.229 157.101 105.519 148.688 114.224 cv
139.257 123.983 131.479 135.333 127.883 144.586 cv
119.898 165.128 123.272 182.607 123.307 182.781 cv
123.36 183.025 li
123.523 184.155 123.945 185.083 124.826 186.3 cv
128.115 190.84 135.259 193.616 140.752 192.494 cv
142.14 192.209 143.298 191.692 144.195 190.955 cv
144.739 190.506 li
144.767 190.523 li
147.412 188.406 159.564 177.965 166.68 159.674 cv
166.68 159.674 li
170.28 150.423 172.215 136.8 171.854 123.233 cv
171.506 110.084 169.113 102.132 167.039 101.326 cv
166.874 101.261 166.676 101.229 166.448 101.229 cv
cp
138.258 194.735 mo
132.643 194.735 126.357 191.821 123.207 187.474 cv
122.133 185.991 121.59 184.766 121.393 183.377 cv
121.35 183.19 li
121.199 182.441 117.823 164.945 126.019 143.862 cv
129.707 134.374 137.644 122.774 147.25 112.834 cv
154.499 105.333 163.693 97.8794 167.764 99.4614 cv
171.832 101.043 173.577 112.751 173.854 123.18 cv
174.22 136.999 172.236 150.913 168.545 160.399 cv
160.343 181.48 146.034 192.099 145.429 192.541 cv
145.211 192.701 li
145.134 192.758 145.056 192.815 144.976 192.872 cv
144.894 192.931 li
144.891 192.93 li
143.844 193.647 142.591 194.159 141.153 194.453 cv
140.223 194.643 139.25 194.735 138.258 194.735 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
141.045 193.509 mo
142.648 193.181 143.942 192.568 144.922 191.763 cv
144.932 191.769 li
144.932 191.769 159.515 181.123 167.705 160.073 cv
175.895 139.023 173.562 102.789 167.494 100.429 cv
167.268 100.342 166.846 100.656 166.846 100.656 cv
166.846 100.656 168.871 112.839 158.469 144.751 cv
149.521 172.207 139.8 187.036 134.841 193.401 cv
136.958 193.838 139.097 193.908 141.045 193.509 cv
cp
f
136.648 192.676 mo
138.137 192.839 139.565 192.792 140.844 192.53 cv
142.231 192.246 143.389 191.728 144.287 190.99 cv
144.888 190.496 li
144.914 190.514 li
147.671 188.298 159.705 177.876 166.773 159.71 cv
170.373 150.458 172.307 136.835 171.947 123.269 cv
171.644 111.876 169.808 104.385 167.974 102.062 cv
168.185 106.275 167.841 119.225 159.42 145.062 cv
151.012 170.857 141.904 185.602 136.648 192.676 cv
cp
138.337 194.77 mo
137.142 194.77 135.896 194.64 134.639 194.38 cv
133.064 194.055 li
134.052 192.787 li
139.002 186.432 148.633 171.704 157.519 144.441 cv
167.683 113.255 165.878 100.938 165.859 100.818 cv
165.762 100.219 li
166.249 99.854 li
166.572 99.6133 167.211 99.2505 167.855 99.4966 cv
171.924 101.079 173.669 112.787 173.946 123.215 cv
174.313 137.035 172.328 150.949 168.637 160.435 cv
160.435 181.516 146.126 192.135 145.521 192.577 cv
145.279 192.753 li
145.217 192.8 145.155 192.845 145.092 192.89 cv
144.928 193.009 li
144.924 193.005 li
143.889 193.703 142.655 194.201 141.245 194.489 cv
141.245 194.489 li
140.328 194.676 139.351 194.77 138.337 194.77 cv
cp
f
153.447 168.43 mo
144.14 168.431 133.722 163.601 128.502 156.397 cv
125.42 152.145 124.543 147.695 126.031 143.867 cv
127.896 144.592 li
126.662 147.765 127.452 151.54 130.121 155.223 cv
135.847 163.125 148.287 167.959 157.844 166.004 cv
162.301 165.092 165.434 162.842 166.668 159.668 cv
168.532 160.393 li
167.043 164.222 163.39 166.911 158.246 167.963 cv
156.705 168.279 155.093 168.43 153.447 168.43 cv
cp
f
143.328 188.318 mo
135.801 188.318 127.376 184.413 123.154 178.587 cv
121.394 176.159 120.504 173.6 120.578 171.189 cv
122.577 171.251 li
122.517 173.215 123.276 175.347 124.774 177.414 cv
129.324 183.693 139.209 187.534 146.805 185.982 cv
148.923 185.548 150.711 184.708 151.975 183.551 cv
153.325 185.028 li
151.772 186.448 149.714 187.427 147.207 187.941 cv
145.961 188.196 144.658 188.318 143.328 188.318 cv
cp
f
165.623 119.633 mo
161.314 119.633 156.615 117.433 154.172 114.061 cv
152.438 111.669 152.183 109.045 153.489 107.042 cv
155.165 108.134 li
154.317 109.435 154.545 111.168 155.791 112.887 cv
158.214 116.231 163.475 118.275 167.521 117.449 cv
169.601 117.023 170.94 115.9 171.194 114.369 cv
173.167 114.696 li
172.776 117.054 170.815 118.816 167.922 119.408 cv
167.179 119.561 166.408 119.633 165.623 119.633 cv
cp
f
160.71 149.769 mo
158.555 155.308 152.635 158.176 147.487 156.174 cv
142.338 154.171 139.911 148.058 142.065 142.518 cv
144.219 136.979 150.139 134.112 155.288 136.114 cv
160.436 138.116 162.864 144.23 160.71 149.769 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
151.881 136.474 mo
150.568 136.474 149.244 136.78 147.989 137.388 cv
145.72 138.487 143.947 140.438 142.997 142.881 cv
142.047 145.324 142.036 147.959 142.967 150.303 cv
143.887 152.621 145.621 154.375 147.849 155.241 cv
150.078 156.108 152.541 155.987 154.785 154.899 cv
157.054 153.8 158.828 151.85 159.778 149.407 cv
159.778 149.407 li
160.728 146.964 160.738 144.328 159.808 141.984 cv
158.887 139.666 157.153 137.913 154.925 137.046 cv
153.943 136.665 152.915 136.474 151.881 136.474 cv
cp
150.895 157.815 mo
149.616 157.815 148.343 157.579 147.124 157.105 cv
144.372 156.035 142.236 153.882 141.108 151.041 cv
139.99 148.227 139.999 145.071 141.133 142.156 cv
142.266 139.241 144.392 136.908 147.117 135.588 cv
149.867 134.256 152.898 134.113 155.65 135.182 cv
158.402 136.252 160.539 138.406 161.666 141.246 cv
162.784 144.061 162.775 147.216 161.642 150.131 cv
161.642 150.131 li
160.508 153.047 158.383 155.379 155.657 156.699 cv
154.125 157.442 152.505 157.815 150.895 157.815 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
156.766 148.235 mo
155.523 151.431 152.107 153.086 149.137 151.93 cv
146.166 150.775 144.766 147.248 146.009 144.052 cv
147.251 140.856 150.667 139.202 153.637 140.357 cv
156.608 141.512 158.008 145.04 156.766 148.235 cv
cp
f
151.672 140.989 mo
150.978 140.989 150.277 141.151 149.611 141.473 cv
148.398 142.061 147.45 143.105 146.941 144.415 cv
146.431 145.724 146.425 147.135 146.922 148.388 cv
147.409 149.614 148.324 150.541 149.499 150.998 cv
151.949 151.952 154.792 150.55 155.834 147.873 cv
156.875 145.196 155.727 142.243 153.275 141.29 cv
152.759 141.088 152.217 140.989 151.672 140.989 cv
cp
151.091 153.297 mo
150.315 153.297 149.532 153.157 148.775 152.862 cv
147.076 152.202 145.758 150.875 145.063 149.125 cv
144.379 147.402 144.384 145.472 145.076 143.69 cv
145.769 141.908 147.07 140.481 148.739 139.673 cv
150.433 138.853 152.301 138.765 154 139.425 cv
157.479 140.779 159.138 144.893 157.698 148.598 cv
157.698 148.598 li
156.571 151.495 153.876 153.297 151.091 153.297 cv
cp
f
148.516 146.576 mo
147.841 148.314 147.951 150.146 148.666 151.645 cv
148.754 151.685 148.84 151.73 148.932 151.765 cv
151.902 152.92 155.318 151.266 156.561 148.07 cv
157.236 146.333 157.126 144.501 156.411 143.002 cv
156.322 142.962 156.237 142.917 156.145 142.881 cv
153.175 141.726 149.759 143.38 148.516 146.576 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
156.437 148.062 mo
156.813 147.095 156.937 146.099 156.857 145.147 cv
154.547 145.232 152.339 146.768 151.392 149.202 cv
151.016 150.169 150.892 151.164 150.972 152.117 cv
153.283 152.032 155.49 150.496 156.437 148.062 cv
cp
0 0 0 0 cmyk
f
149.424 150.881 mo
150.565 151.285 151.814 151.205 152.958 150.649 cv
154.171 150.062 155.119 149.018 155.628 147.708 cv
156.131 146.417 156.136 145 155.653 143.765 cv
154.511 143.362 153.263 143.443 152.119 143.997 cv
150.906 144.584 149.958 145.629 149.448 146.938 cv
149.448 146.938 li
148.947 148.229 148.941 149.645 149.424 150.881 cv
cp
150.899 153.136 mo
150.109 153.136 149.322 152.99 148.57 152.697 cv
148.486 152.665 148.404 152.627 148.323 152.589 cv
148.002 152.437 li
147.763 152.075 li
146.903 150.27 146.838 148.133 147.584 146.214 cv
148.277 144.432 149.578 143.005 151.247 142.197 cv
152.941 141.377 154.81 141.288 156.508 141.949 cv
156.591 141.981 156.67 142.019 156.75 142.056 cv
157.084 142.207 li
157.314 142.572 li
158.174 144.376 158.239 146.513 157.492 148.433 cv
156.8 150.214 155.499 151.641 153.83 152.449 cv
152.887 152.906 151.89 153.136 150.899 153.136 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
126.16 205.971 mo
126.16 205.971 li
124.431 205.299 123.574 203.352 124.247 201.623 cv
130.686 185.065 li
131.358 183.337 133.305 182.48 135.034 183.152 cv
135.034 183.152 li
136.763 183.825 137.619 185.771 136.947 187.5 cv
130.508 204.058 li
129.835 205.787 127.889 206.644 126.16 205.971 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
133.815 183.923 mo
133.492 183.923 133.171 183.99 132.866 184.124 cv
132.29 184.377 131.846 184.841 131.618 185.428 cv
125.179 201.986 li
124.707 203.198 125.31 204.568 126.523 205.04 cv
127.109 205.267 127.75 205.254 128.327 204.999 cv
128.904 204.746 129.347 204.283 129.575 203.696 cv
136.015 187.138 li
136.243 186.55 136.229 185.91 135.976 185.333 cv
135.722 184.756 135.259 184.313 134.672 184.084 cv
134.394 183.977 134.104 183.923 133.815 183.923 cv
cp
127.379 207.202 mo
126.844 207.202 126.31 207.103 125.797 206.903 cv
123.557 206.032 122.444 203.5 123.315 201.261 cv
129.754 184.704 li
130.176 183.618 130.995 182.762 132.061 182.293 cv
133.127 181.824 134.311 181.797 135.397 182.221 cv
136.481 182.642 137.337 183.461 137.806 184.527 cv
138.275 185.593 138.301 186.778 137.879 187.863 cv
131.44 204.42 li
131.017 205.505 130.198 206.362 129.133 206.831 cv
128.571 207.078 127.975 207.202 127.379 207.202 cv
cp
.829892 .595697 .683223 .773831 cmyk
f
165.361 119.623 mo
165.359 119.623 165.358 119.623 165.356 119.623 cv
165.364 117.623 li
165.36 118.623 li
165.359 117.623 li
165.484 117.622 168.456 117.572 171.158 114.852 cv
172.577 116.262 li
169.286 119.573 165.572 119.623 165.361 119.623 cv
cp
.840146 .241672 .565545 .0509346 cmyk
f
152.713 168.441 mo
150.935 168.441 149.806 168.213 149.685 168.188 cv
150.097 166.231 li
150.171 166.245 157.541 167.697 164.918 162.429 cv
166.08 164.056 li
160.915 167.745 155.822 168.441 152.713 168.441 cv
cp
f
143.606 188.41 mo
141.693 188.41 140.306 188.134 140.189 188.11 cv
140.59 186.151 li
140.642 186.162 145.877 187.188 149.746 185.024 cv
150.722 186.77 li
148.366 188.086 145.678 188.41 143.606 188.41 cv
cp
f
145.961 205.454 mo
144.262 204.398 li
144.281 204.368 146.133 201.369 147.248 198.005 cv
149.147 198.636 li
147.953 202.23 146.042 205.324 145.961 205.454 cv
cp
f
145.042 228.926 mo
143.684 227.458 li
143.711 227.434 146.322 224.993 148.519 221.086 cv
150.262 222.067 li
147.902 226.262 145.157 228.82 145.042 228.926 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.0.0
%%For: ( ) ()
%%Title: ( 5_01.eps)
%%CreationDate: 2/7/2020 9:37 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q=sdcgXWSnJ(USAB_<3<6Kb['@GT^r@6&dJu$p<j:3=_u&2,L$f8),8Q:b<pUa#RSHjg?)alO*^%M%](L*?I\(ES]q/EV
%bg`)afdYCT;oW2EH19a'jhPdF.V#;,bMn,">)+1NSSsb(28A#$D`(.9]:E_:)m/g[.eguaVfoapGiGP`qUK?@G:Hhi8s`@%ZYc9J
%.oj@:B[sajb"=/ee5*%6]/J/j#4SsLDq@Y4DV<p&qL3_%#1)&r`'0kJLOQ-'6\SiH*)UVJj6PoBel,2p2AJr?^R"7jN_UZ1:"/$Q
%X/M>H>5EX)T3'a;QIi)ml<fm_S]nO],<GId*^>1HTG.*=#p,u7rgDB?G'KsbYS;KO/>o_/Q.0+R+`45jV%fp<!tkS'2q837o"R$s
%rst%\J&9N89'7X-8aZ!0Yn)g%=A$^iiNX^ZW-o[/A;LL^KPr`:26V/U*]_hSo#S!lX'Wgo^<diW%Ad&t9<21+kI[es;pB-Sl>G=`
%;JV$OVP+AZALf53<8C6[DU:np;Z<kWs*Hp%deCn595mY'eN'`/(HB?2!InAei.GptDnW2Q3e2iO0UHEj[o)k"bSm4%Z0EL=6n(aC
%7>W7mFmaH]%5b(jS@nNZUW@(d]!WRIO5F]q#2PKVVI)Q&]Vg=`R:aSfEi$.MBr"^4do298b:-Ilph3fm\X*b8/(fSm*JsMu+..DY
%<B784f@Mh_\AAp^Ytn]5.clc\D(Xl=01$rO7/jafT,94hhs'oYM1DUsjEAG,'ICG>./Gp7kgiMp?3R=+EVh_q/?G(^hWoDG"h"lH
%o62\]VaG5tJKL6mpouCJmCN'SQ]k5k%K=AF\rKR/SY$[U<1U'm()?u^[.$!iZRdY>=iI+O'H%+)@i6)3W4M;(1"XBRp^)F[Z!7cs
%j`4H\Qbt2]*0r#hnS,7A=]E(:_udn%=5lO;OEj7L-U5SMni<s-rkW'"(]ME`LmQ&GT-7,-)p9@%pmZ5hjP\1:(]MEmL_Tj.VO1K@
%1a7Xg$$Z;t@)NG"AX`/qYSa*h^TgJ;LbLh^1jGlSdum:V^UYh(cNs%0H$%h+%:2ep/AaVR$us5CfG%+,A'WE=`8LqPL,d>DB$tX0
%`"@LZ2aic'!.TpC,7&d/0uOZRo40Vg0QD@@fVdd6)SG,V3H[GPVEG])i^qiXp5At\Sqk<KF5(`h\;:(!15MUa;+-MG1ZnTPEQ$a:
%N-QF`A@c_kr/G8!6)ZEH>co>!+8<UA0%jA_NT</>4L5GPKj5mDDOL>`5,LL;bf$9mbDDAVnaNfNm%9d1#5C4YLr&[LA^9GKB**&d
%7J^Fn%TbmHJa.:KL?hMG.pN>'l#I5dS4M0tDNZM7S8Cj`E&MZ/P+5K7,`*MD*4"q!)s40#WmD:U'r"S@5FTTQ_S?"Y)#QPpb<JhZ
%1`7#,jWE7>n)7XQE?+uG3'm"nprR(A;>?K-Z<@/JroG6#T$K2@r6%<Y!e1a\nrFF]#W[reLqe4aq7HREIh>2qa;JSE?UUnhp_tS/
%Y@NMZ4)\lQ]Nlp$2-VTHVgPb:ED.tEn7U4p3']VC^[!dAdqh*AeI;\sg3Kf.]'p6!d8b!:j$;QIIT!Ju,ZIaL!BdP?NZ%-8e=]&=
%Rt(b!Z`BQf:<=t4rmP]&`90SQ#+Dg$KPmMHa$QXO<1o"!5'.48TH![-#fChIc_*jC4Ng_*BrnJu</hg;,%fIk'[<Z_PW$%5-p_E$
%gG-3^8#P4;f:7)Q6Ng(t/;$L'82<LsPgBbr:53H$]pgu,<K@h/I;/r5WrY!V;l+4_m%S0Fr_[h9&#i-2K#3>YAk'ih#G9K99FW?_
%Y`362*NajE795:G_85\mTo(:f?oX09+h#4DKAe<j@n0'd!LPEjBPek\TS*oN"!L5L`rc?CE,^u5+u"]p\5$!YOeJ09600*HSe\s$
%Q%3iur=EN[""7[;?^t4B-B:\3K*N=\!G2@e\fjOsChlp+RO&pke^91iLo(>,6A3K:%rbI1@;n+==up\Gpk5];Zm:N4Sk2ESc3;EZ
%$]5c\9"(64*F_u!;QhEBU8Vl>!OI2S@JE@s.V"?]a03^$aH0X9Z(mnr@ckY`bKq4D*F,S,lNE2mW.GQH?npc1(W=C^Lbr<eD6dCm
%8paKHhD8H-1_M#CNR.s.3Qn^'0I^EV<ZXt3&L@i:@cT]c*'>!?&]ikV'N72kBN?i=Ke$mAjS47i`&uhQ*(-siF;*<HP]D_/1BYpt
%ouI3b0a+'28WcPVi)#7J9pR[<0a3kXJOO:+,6b.,`"f4n?=u0F'0T9:)R.Bm=]EWY>$3+$<mS*37[_OG#cgO/%BJf,^oSl@$qD]#
%M[i[sT7,5%R*m%!7Bqko5V%js('dMBE?@$D,V!pm>e4%_;PY9D3mIpe'ZbT8>o,jTjp?AmKet!N`L3Icr'dgtiCqCG##6">N%mGI
%^9KJ[!C_+m\>l&-fe6BjeAq6[)p#N7aB5eaYo1A9W;[?<lHA-hk$A-5DXc#,ggLg7;FtGN<GAsp<*<B*64+oJFH_tLM+gjjUBo2d
%M++1*ED;T4aib<IrX4BOT]>++Tt2CIOJF^S@\u[e7[B,[<$X1@%j(Bjo<[NDN!"5N#rH'?:h?L=<(EAj]`lN"amVPM&@Z:L_P?cI
%B7q]FkkA`mTqnT8MJ1Ng#,qs9J+-.NX=8B6W=)$YBGsfjZ;UNQHOKbX_^Q\3-n\7=AknMN(Q7WE?<tuc9&?Y6Gs^O,,-mN]Ja*^Q
%I8eQ8M&3=2>iuHp7+-:`c30>dU=(<!APP/ekEA6>'Xi+&g2P1;c_9ED6JP^^`ot^&MO8%T%LkBdTgVTk-'RStRW-?tlBNlM3IM]5
%+YkR;%hW*fJm(b^/kub9Lnb\)KB4apNRR+>dPdpQ%Lf\2CgfXG--q@ZXof;QpTbE?"g.CSjeS%+Pio#D,0"$3lVs8e1hdL[?C?`2
%qSq&\iZb;cJ<h=Xj:&>m-0E(%bR3BhKQSDCZFK&%Mnm>AY(M9Afk01Y;6.R0TWr0g))bu^9@uG\/`N@Y</sKeP3-5BaI7=KR%g"k
%+M&hsjZLu.'Rs\dbTs(DF]aK2e#R<!L5$Q]jqZ.a=.09!noZs7Rc:F@Hj%bOJ(*oR!6;1fZU4CWdf:XJ9;AT.p,pX(a_W-&-Pf-R
%8Lu-M1mnF3M^UVh^Jdd7-0:u'UsJj-V49A9kqB;_TVOt_=[CZ0&=[8[Zm0aL8]!$?2IadC)S&':CN-RiJ64M)[L#pQ&Mas/)*./>
%W.YIX;`LA=TF5g'Z'\Lh/E`eF;<k>9RHT<]VNYS\QP(*jQK9i_=\-D+R+T!WhhkYbE"5^u#^IWtFZ*KE6N)R0=idtc%)mKWmjaYi
%p.!28$8d!D9@_CT,WhcWEfK-R?<,ZW(<-t+-[$nRKX`-D8e(V5N'SZ(:o"uM<3UU6d:GccaE`ObBE2GPBQT>"-dNFu]Au1jhZUeq
%12Tk;<cSdTMaRo21?&]];:KF3\tXChG]Zr,1?djNL2b"H?BT?sa]oQM$PFDNPA):qJFoIi>sKqaV@K;0J1NS*)&Mm1Eo1t8FKr'm
%#_KQC6q:W;pmq`p0LnWiXCYrO!K;7Tn>%hhRTu4`SgAY:D[JF^q)n;OR53!/H("rCjj<+5a9bKPI)3Yn!=P@cbo[YbA_]?Y+*3D[
%me!l=I>.W#UY7[D:W"jXm*P3CRps-c!%2\':n^e-]o0Z)o7ikt-i;FH4FGOkFIV%XZc6AP=iusJVgdpE?g9IOQ2g^BeDBF#pp-Dn
%U(,&j;9LIU)t6!=PP-KNjY754=1u2s9$ma>bJ9[k06lKmW)?k2SmXk!o-$\pH2jtnWeFFj>,_JlX,Wtu_RWp7(5l1r'ra`2jkiI.
%qQ4oSa?k,KR3%;W'SnkDda_*hhU_nH]N43>UNMD,<qa4Go/K=:LR3IfFOAjEJ6oA:m<7NgdAWp_h0,\n94_;F8gAkCkj3FE;VA'W
%0=M&3o%.jOOLZ3oUrAj*X]E_O?Lsmh8nD5_p-f;n'=9s]H-fL^)*ODgNK2nrn'r;Jra&$Eh@>*C>\Ae<$Yg.9#p.Aj09S#CEWm`F
%OHhu7bi*INQI&Cg1_DMbri)GHWg.`ZBKZ^ULP8hZ<W0g"m>df0X<!U?E._g<Ih^7$J1%)>:%s7gG#kT/Tq0)=V;m>HZVbLI%Sl<Y
%_JB!9+^+@iCskEH2&TDHCMRDpUoNq%_tPfLhK:NWi^rW"[1;(Xm-_N#P^WCuYEU^I_JB)fo4TAVoQRE@LPKY1J6(d=g[RRkX[9it
%X6'#?.:#oQjd'8O&mFSB2X&?B+o^d)6+#V0P,]o@Q;^QhU!`^^][/=8g(gG:r6"h(B1TSE=6!aD!a0JbVU>3F.<dBW?mEfg$^o64
%8Z(4Sn4qL'-rnCrnA.H?6Dd%L@3kM_4AKOrC+/O!!HPHne&!jHpC5#&MTjtaNP_:j./XBj))oiDPDPiJla.%S@*'Kd$*H.O(d[1\
%5tDrU8%i-].s8L3IZgNC/NbmK9e5@NZqe<C?YoO&].f^GR'rpj[#h=I%QbE0s2H;9VK/%.RUkDeV5K"e0!Ff$[JY3WR`+9K"VV64
%@:N>.NHr1:nrLcsNQ@JW;gsHKV,AB^8n)B:QC8S5*B(L2P5g-)lQd;n6>1]?$lr^YM+5s4H/M(;5U@sBjn1r(=IZt/"O#n]7R8B]
%p]3M!qe)mfKe#*7kffMHB.R;uKe#)T.,8]Am]>N$UJcNhW3gK$1RC@Ybb6hZ+N1\WjVGSc_O"L%EXQ5liQL&'?d?/e^0Dk(k/Wh3
%qS2sniIt?Nr4Wo8F)0J]n90s<EP)/iesI.d\-;^aJZI8fPk4mX$Jc/SaCpSLT,(b2ea>+c29/bh$a8<&=1ij&3-MWF2^`"BEY96l
%StZciJjU._=Iu8-S8<Jp]_#s/S[JFALt+3"COM7_S'+f<78k&0q+>a[eaJFTIS3A\r2D$"%>o2Tijf1@&aaK%bU`LE,qg-&Z/Q.R
%n;kr3I/UbHY]]OJjhZ%$]*&NI89_+@/(^`/4'k&V<rH$qL7aVK_8>*S7bs[B_6D(P3ZMpWX3Pr.rAOaSr]<R+d7f54XF%`tZH9U_
%+8D^LN;Z5BhUtI9iEEq*@2t0$\g-Qr\MSUZN!ml-c9Pi-3qF]7:$r>3p=.<UcSO6,a/hj_"GYX,SmX=Xd'Qn*JSMe:L1^o"Ff#W1
%b9Z*AEf/:(aZKt>7)a+!k!2VbJMt/XqrD(ad^c=PSKu;#Q#<[(3co_b695#iim4'2SKuWFal8fPK^S]=EuuhkQe"q&Km#Q@j$lPD
%aRWJEq$]Y]]j4c)\ON?_D>F0\'C67SI#?7bj3Yf7R=GBP4c5_".bsGSVBf$]=^Q/`3l/B(Q<152P:S@iE4S6qD94=Z=7AXO\'2HX
%0JW1]<phkLbmV1_0S-a'5rU(20oUf'S$=iV&7.0(<#3@:Ilemaiafs/8;Oq_67W@$c.`;lj"/heGVK+RJXnRfng]dKSb9C^+:EH)
%Y:)rW?Ag<@B((V/,[t3='[N:V:iJHHd:f*sFTNQ:8^CL4q/Ab8`B!fu0XjAk-<V7.F#YG/?lL>7iRR7Cp!BnjgHh"hC@kMo(4HJp
%p6m>KYJ85E[8"B`DH=H6O)L68opTs$EbZXPQXJ-\5!5CjE/UBPP5hBT5,tlKj,p1!8M!bBE0eK?m-CSQlo/huFUeoamuA"nZRt'0
%'DU?=0+no>[96iW8P[4LjeX703:*MCrN*-0Z\2IiB9d3h=mAt/MMcYGif")Mr:<;a:R%=a.UMeWpEou&^j[<-Q&nkRj:$s1ZW<ie
%KZg=H[.$U/4Z\QJQ?Qhb3$aU?&TiWMhpCl5@b+J,>"I3`o`UH&/![]RmYEuY(hSoI;rbUq@\K=Qi[QQ</MpWp\`*oBW*HL`X$MqC
%:Jc.:=B-kohb.p5VW:`M]8\(K+<j7Pl</B)8hJF7=hUdHgk(I;9",uX`E?`Gb_1V7KU_*UI'La\RAK[pkr*(H,SI\p^=JKQh_g1g
%.#V.Kc=\b%'#?8?Wb9Uu;+e;@(F=WH3@D?cM,`[)kG$`=jdBXn/94T'\L<A@Pf]ff<op'?DIkGXqCfoY8S%Y@]T-1VU<K-T/)>qb
%PXKP/elTn/bsb4@@IpqmYB-%B*cl'/8W=#lgbe27^+[f*PY8NRM>=cc@X]Z`7Ro2X&_sD`$T$NbH+JppjI1_"o;KEe"O#rhQCQ]Q
%U%D(:QnqaY3nZ)@$b80P>dG2d/HH.nEbuuO(347EjBA5\OG16R0\9o>XSKr5$`URrC6M5sKsA'?eeV/#+k:Ig</^/MSQp6)`B4L:
%"=3c?]:!`J!Ou6$P:n/-Z&B<W@'PY+bG]V&m8s;\X8>occcL#`NG0jk1I3c<cf.6bI(i/)Bjp[!J'$/%b.j6LCCE?B5Aumt<9e&p
%XAU/>iltRp<7CS&q*^Ph7*874[Dfg9UQa9+HS<W'agehdAIrH0E"RtrA6gd)6CAHem3^\D1*3EqhLmX)Q:n1rRZ^QCpoU@MhZeI_
%^DlYbFYbBpVWWM(EoY?ER7=*r?=?"_`r5:N=5j1p?_:b=q_tGCcc<K;bTFi".+Mp8%LaB92/F=.kJTlcenh_0Fku?n>MsQR#]^Qi
%\Wd.%@XON[;J;egJVBs:5Y-FC0K`i)W)GOD'B"s?!+/Jur[+%g@=*>U*/qE_.;)s7:*t=#?8m249';r2GEQ&ZF/pO(iOsrsVBk>E
%,@\O#?(COkSFi;-rSQ@K]B*N%2hp:#s*#Ss(Akk)rSMBF:D`oCMuDPPrpO=rG:ZcRr?dKf)-aTQX=5(p%BmaBmu6Xobdp*Tf^iD8
%q+`I"1&$%/jiZ7Z2p(AEAmPlkNfbA0]FR/+H<OGLnZ13[n+!>V/*@]h.'Qah.mt%Yf3;[<VbQYoY#,GMVk-:;o[T=trKBL8G?\]f
%bpMPpGk'IQjtj2W'2-)ibNj!]&[FiYC_7ifkH916A\8;4c"`V^n\WpIQu![Arl06,pZic+>PT52].3!'NF.r?eaI=]r:3=Pjjf.S
%CG4[[dh!3gJoIU]hb($*)>6t?f\2K7Vo=?j!d+>iHqP<$MNjZPQmQ/`5B$l#nl0[/o'C>^#QnKffcGgoD2q+;>kXS/g"T69"9r?$
%`_I";BkoU-f*TYKLkGA%RH\9/7U,Z"$(f+(#_l=pJX8g`AJ'/i"C;jpQUThD&U7F]?H-_0%'sp277:Q4riugBbch=U*T>&b<Q`0&
%J@#S)9fA)#iUG'6"R3?8WLYFa1%Q!C>Bei?NJEIi.@K>qZABhC"O-^R'1jfkR.\WLP0Ci'ZABGk8=K^`Gh_*7EGKK]W)btV?=df_
%IA%Wn=L$)]Ea7D<Zquc]EjK@a5phr1$f*f03Ek4RFLuEuRUBG<[kB=N?^_b"B!tJF0>)>cpT8]5cJk"]`,>0`3R45S`j!F%p6dWA
%k5I>eJepkALIn%=rlF!GA$%"9,^A&n'q4OO1%WhoEH]q,41H24IQ=)mT!pSl7l^JeI=SBBmd5*#Ao2-tE9gn\-=u/0c%CeKlH4bL
%*.$Qkb8^ir:.sWH7M9fl=3?@TdR:W[+VT1J\)H?+s1.kd'eIs91B@S)Z/MTo_C%\pM%Tc#&]^7F:V^/P1$6QTRJSsuEsptE8T7eM
%0kT"cS[UJkLgr!q(pc+VM`A^#N\Mo$%.ofH?D7RoKr9;;p6j61?E)sbh_ZfSo$+`%=Mb3c:BdTCD$]`tXuReBB(*(*GADQ@J\Mhg
%R>r&S(/dac_'M";?J@-Ar1@90?:s55oTYs`DY;"XVp["'$gPaK**DX-;GAudZ-os0(D\qlpF4&"771!I4MHNYo-BKkB<=WT$/\Ub
%l!]b52(b@g&qd/<4Y2bpWl8O@K.rdGbE<Wb,n6K<>CT`&oR];k>T7c`JY/]Tla0k"Tf(.^_:s&.8Kt?befE>2]_#a'U"[TuGqB)o
%8O=B*/)_uj3qJR)'e5!&@;"W`.2r!M8GYrqJhs"hPlufqSab/IB9pfsG!^c`Q8sn4.uPPD>R%HQH/639SV8`KB5L>kQV5>/$ZBqA
%bq6T=6(G7Mk&/D49451Z]X`_T\+&Mql!ZqU8oV&P*;X^_YZePX$[6LIc7Rh^Kfcb_kAIglBAP7b/eL/9j3AZ()WgRVQXi64I(>[7
%jjqpci6<Q8icb3?#u<>&qPq/E09o)d]e/Z;Ql5X1mdHESN&i4K:NBi_dHBM@N5Yr<;n*r[3l1#03"Gjan+G/0=1[0X0rWLl8sR\o
%ogE68G3;XY8X*DCRhdY(I!>D1Ms,h=bhFm&,3-r0.VdF<Lq-a,?<=c3B')Ih8QYqnCXcS_(>41iM(miUb=hj*bZU9LM;L46=Rm)m
%1pPKX_WpkaU4`;BnS7[';5,b%>]5<6Si+?Y\ON.H-_J>fl`Dlnlk8Ad[C`OsYN.'Bb'<H1#Q)7JIfG^l:.QkiL's\S4i,S<r`c@E
%'C>i*-)ZHXQ/HO.^C&j2#.u0lVeeQY.jUm6P3jm*hW-pm)!hOI31&4OD7:8rqK/V-ksR0D^5>[V<>/@V5(S^I?Y+!I-."5a["Z8a
%NOh=dJmjpi2Mr8.dD@7,pXqri@L^Yk;0:P*PUFnb1N,))\sW5O)aTBipJn+<J\no:Fob?[19f+6>GIP&b/A6qVh[X&Gt9-60;g4P
%PMe,G^ESDb0g-M>DuRtp<kN9@Y$S0W\Z#=\?7ms6qQX5gm!G"k0'#>ZcELcGFleuY.*oJF9JR+djZ$anr#@-+jDoI<)eXY\rjB=W
%*[AaaQOV6?d;q*1EIR'17Ro2"*,uATn@;hC'u-$;8R't(9.'E2>tHmHnt%kMg#i3AU7)>3-+IAm/nDJ\;T+';4p@&<f[@ecb=`V@
%LQsag9'ZZ1DN@=[Rq!m5BB+/*XgQgt'=Z.G\ug0dh!Qt/F+6^"g24?(@P*-?54b+6gg$(X.d66t$Vlf/nKeiMR@ZFk/"+1XS,!e@
%lOrQ'.fhZukZ6OE4Pr^5PKh@rY8oLBgUH@oSrQQFJchY:[Yj5(TY=,=#^PgTRGTJp>#UB0bh<JL][J.43u?:9/X9^BL(Jg+2#J1@
%4_8>*m++f7F"'Rr'9f9[P`iWFD"_>SB%(?Jp%Ad"lr909aMkt?_+-)\hEFU'-A<>uq2#V%b^@oM1-9@8c-BN2pgC7oXsLaeI12Pb
%8pSTZWs]I$Wr0G!Z+QJ=b8VA9KJ,W;OP*["P<ur&]F9X)-A#"L2!Xtb$JdGD-K&&,]MaeSq<L7`Re4h_BD^43r8+2mb.rN_ji49l
%b-nnKMq"n2pWi_<C9LWl0ogUJihnf?>-4=$65N(O)NF"qpt[N-%!_\\3L(?^![QdC\H137N"7W[2Ss$f3i!WB<Dhs%rhjbMd.Iq,
%j_'u^k7B9LDo6UC?#TYDdl1Nq9:pbU4HO;bJTKZJQdCmYXON\=5:E>'p@+EmEl.i?GR-<[?YS7o1r(PWfrjH#oKgk]5Ul(MWb%!$
%+#6qaVFZ.1KAU"OV]Pp9%>7:>VETK0;WY[Oi;p(bkbAPRTlb87f-o[j8;[[Nj/KBR<W,\5B/K<XPE1(To)[?ZG?P\'"tCc/+9%1_
%Ma."&5Plc%QOQFuoJtSMm6IGOM<RNuMd2Al@+E`D_`tQX7MVEhIo0q,"!,sF(j*JhlINanaEnrcL^,;',QRWE^W(@7!$[;=^uOBg
%":>BkjF>_(2>&^uhENt;WNRD6/3U)D:O[Skp;U3G%>F>g=Q_U[9fr>smR_P)WT-(a`b/OC=Wlt&hg%RG8O0Fln^X$m[LV_O&k&d[
%d\T2%*\84d/:*j\n]qLrdNj-XP&.9O)!so%16TlLe0f`dTs4MH\QHYQZbb^YB;sYR1hnfhrbdrhf@qA#>GsnTcm7f(s2DQ0*1mQ1
%^E1_g>0?6=h_W(*F!/TZeOo*"LiH^%;GRdMY;uaFAFK;i5t'T#4+5m8<?$j#U)3gW(rBAR:*6f"boDYpfX,D]Io\8O2(NNHQ9?"e
%Z'j0"ME`nK(W`(^UG3+JdmaRYM]Mi!Ze)4INt6E^@/;CuN#=qPOlO(G7d"P#Q++_$I'm=+;/EUShY?C?T_)B`lAmJ:B8gNoR90I3
%JB'AI4'q7.msmQT;4[E(4qX7^Q#9M7!TUFpW:mR`<@aVNZ7m[g.h".%,1[^Fd'Z+'m<WaTit^\Zb@[ephX]Fgb-,@7T31nL_9oHW
%qW7*LDSO^e_3>5O^,e'$ldEHjr?N!.[E5qf2M8Y(`Wj<s;e0X9h30:aB^qM+E4f3%BQbl5b't'o/L.*)`XWr'B)HQL-ZP,/'13D=
%7N5tr26cf-n!P"_c0omgY;>P7hB[_ns7'LbQ,T%qU(nOp]fK!0"<udKRMo5MCo_I=KjVlj/jK#H45Wg#ePhl:-^AKCiRsaJXG%!r
%.bJP?0'Y>n4'qlul^dpPrC4-Jm$WjW[[ZhkS^W>F.]5lNWGcO+jpWi+dSd24]SnELL-hL\`.B#RXDE27]_Md><Q_:!8?J\iSqaQ`
%W.$;MoU:4:>,l_G;%d$/WLLf[;e)RB><'QMCsg<`<D.Q.TWFZ]S6,aP[1>XSeIWagc@%CQr73McFl`SY8JTC5Nd"Z`=O;VJbZ9/,
%N)'0F#c%*5RN>T&j^oej8f7[5A!ROr>I*(^="a4[]&pCRHXU=5[sKiC2]J;95Gp9m:*Xo>[6&gf6s,9h/D!MZZJI!82S'orRRY*'
%6crH`N@HQDe#H2JSp`,7d*a=CdFa$3`C0-i,28Ld=`I>`rUrZ6C>u8CJIanej(g?MYh/8!@Gj_Xd*s(DYVJ7`5ud5?[;kJ3&,^%K
%g)a;lW6pRTNKQk)SHXfN3NJFVTBZD4,qRd<Zl59^_-fZU?-j,Hqj+q,e;jRPYP(U8mGng<JT"t2Pl#,f(h>(Q'La4O&.XW=WEcjZ
%9H>ue!7DK!`o?sFeZs$r;o<1(Xh?jNh+;1kdNrp8]psu6]LohH.f-=8Vm^@h82KX(]fq!.[-c@Oa6WAuR)(YiVgU3(nnnjd);5FM
%WA+Yp=U1)3*?L6k8mF6L^g[!0XAQsT[)!F+B`@6Dd8C/67Vs%rh:#o\,)itB>q]3i@&JM,h+rhY-#[4LVq4N-HDSHqN>?hAYP^Pt
%e8_<kDZ"DH:/.NTV,p,V\0KmJ<\#J\<^gsV\Q7:rn:"A(VlLUec%n5sLgeP!p#*2Dl3PV$e/(R$V8@@%XJe__h$GU3"-FU&:MS9f
%FkWgNR[f`j``4OX]b<PVJA^NQ#=4_m=9(_c1^6R;EOD#Spl27"Z.$(:W]=/Hc0@%"a46&AGqVsRkpoj<'@i6R5Z9#0VI#6'FrtW3
%-UhrN.O3+1W.C(/s$^Fqo#mAO.YqgWrAlL.EnL"VI]NFQ!S0r>hXUGbr.$hmL`23O-g9R'hs,`69[WrUNa8i6'T8dr/UipK`a.&[
%d9U1''V0ok!CG<\j<'46j%u[34+D:"[Fu\CJV15[Bp>>%bJq?G]apkRD9r,QgFI$f[E'IrqrO/*@$#n9l-\%8I;VQ^:/a1rNF..8
%M$^?fQn2:5KSE[0Ja#7GK<')(8.FNNI.&DlZXD::Ak7"`2V81-*'cT.N3<[cmE%'k(kNJ?JlhD?;IGZ66R?bKjQk0r^@XHO:7R%g
%0"a(W(`Xn28ct4S(-(I(ZI.i*R%Aq99-ZuMdn2ZIG4RJq?0kUmE[$)5dDgs>dL1!q1O1(62.>cXn\,!Iq1Lkb_V^n<YV;e*HA8]1
%)d'DqBU/Pe!"u-"]P2KIcR4`.N,)6BegFm.o#Zs4BppC$X&c&Mh94<]jhYf9%Pk/5bK9H]0\GolRs=oV;KCQ+`sf8%=_XJEHFk.q
%Xp#kGX6hiLTm=<`KE<jps&J*$]7/=%7CXi3bk:[P>3XO!>[BeqdV/I=H0mA8MN1m#ln$Ccrh9!CUjUF&?+0XQ&#*UIq/4pl"s^TR
%:4DP+`h5=Z0(=]+&J&>I=7&a??08S/mK,E[DAS4hEfm<WLpG9G%=HrG4o$Lpjftq.dUu[&d$0-X']hdr)@D=MV9j2+[&sk.6RWnu
%1ia!^m1(]c9=Gh`6VrZQ^iU<e;6l@U7PiFO\TB>WK[HRVnhIj`!Y29\@F:VE8`a/!3*SaP%I;UN`/8$jfLrm9V8a1/)f(6kpr52C
%>HX"lW#14q`sAHGhl`L$ULo?@8d_/I'Ut5%;T\-?lH"Q`Rt]?oE?1[4I[$n8F=e8S)H`fbW5Gud0Q&lX%kJWd6QjoP;Q=O+^uDJ:
%)D#MtQ\2%+]d;"?I(F!urYpRm#8X(EaCBl]GC5u'c%DaP9QI%aO28g![\oe+Ym#W:_6dK_<_Ip3#V.N,WjbK=1DK+RWaXD$30l70
%<Nhg@*2;@>"A!%uFYrSW$=td>7TX7K$WAbqhN=WhU+Ge]VpYkf;*)q<lmiJ7*^dJ$dV+:D*`o;iC,Etr62RV_L<@#HXiQ@8Z2J,S
%p!dcb7nmCHPSgH8@\l.`]Z(\H.[pQ!:h1gX8r"W_:q.6aC&<^1<puj-eM6WU$T2.$NIGNL[p6Ol)QZMYctp)jh/FlPTHV_fq\)]T
%;3Tj3fDTco';cWV.>?V*jWfcI+Y3oAV`pucW`l.TLdZ3dS:cF\$P1I'Ih];pPi"dQZju+(kqTEUSmqC9g&H7P*I$;V/\R`bXZjp7
%22;l/+63P5.OZ!AAH->igkGuXpLm5t:jAa^7<b?9q3[6c<3jn&NKQ8#U-38fWC49Y_VB\TD%W'.NBrD/Te:cMouiV</[EhabZTKT
%`Y^8bVR@/:(FjUZXd;Ls()IV"Oat%JO,V5-om3i^4/1A0B;8Fa)I6#)dYI):Z%&4b28EQPVnO]&*q/KG=\eqDL,jB60E\)iih-U/
%6Kk"p;5#.#Occ_CmE[164ArK4\JX=[B4Uh:+!-D2R:1n^^[ej@h=k,dIS`q+6eq4c*P%j]A.GZfKSFdtN4bu:FUG4,)ebCR*U^Y=
%1>ChI]-C00gnr-]=XLl@U2`2.OnN:+,0Y6B$hO%Vh%Q:"LU#*7AQZ44:qYH>[Omj):%]n&3JNshNFBiLme);c`tM*?(%r.cTGEh7
%7kS[8+hbDTG_3oX%A=UT8k:_b@P>tsBuo'6VX'/+=%7B\jjhNu4/,f+7$ORM[=\S#oHgS-kq%7jidL?I-LQhn-0T2Nghc6HG.$$M
%itU^#?1B9^iI8Lc+u=QiI:.@31n=0+SE*W=8"'LC7J@$ef5Mk&Xb*85H:K5A,7==-C*iAp"reEmQ/+pC;7^EuC4<ne]?VdJLSq`m
%C*CZ)8mM.)U^JAd4)0&cAtVGVN\5kE.Bhj25dI:U*%]X+HSN8gr-GBf4)/(bKep&/oct%jD,O[Z+7ah=cps1OPbo.O%X$1]HEi5)
%1qKY59M2<^:\d-%1^n9og]QMAWH5aPKIKr#cuIDt*DfOS)V@m.:K9q3Gc@^`p&8@5'OXT@#+0M^`]JB,grmi=/157mHPZP\V7SGH
%``Y9o8itS*?fK$akoh$"BacS[>*W]A)3<\jT'=D=5e&@L"HE\5iI/]FSX;(9j$M"2fS:K/$t14)OJ2qf."]hQd-KM])HA[C]G?T,
%$&ETNWml4>j%E2ae4\5aqr"AjO7q&?nUgY/*TMUh-KAKm@k%l0/D$YTDXFh!<Pk;*D2@*X#8E%8g.KV[2F`"NEr'4HOstSh%35mt
%ooeM1NLoRjBO=j;d`4f_pCWmpf!mnbTm&V%Vh9$ja%?GqCgN/H*&80PpM:(]X$`gG8DO]@/)9Ad,QkU7!9n'F,[$f*82Y\F4U"ha
%Ct(NO=F]s.a/!R4P&-70Lb&!MZD]^#/W'.`.CC(l?>%=Uis0Tj1In\q^,>uKL`/kO0h0GF=r/D!q7uc-+HC.hU^3h(#he*pen'$k
%cK3EQTuAa4"gFfD2<s::J:=f<U4RH<\3^^Y_fPNYhMg4"*&@6T1>"ILZc\XudP7%u!gXRA$=cQm?FCm1Vmpa7:Vr.1YUHuYYG]M)
%-t9=tM2^K2Ed4C#k)F$'jTDfYP+(CXcA([!oGSUfd65V!l^=WQB0hSYK+V"oNL^=r/bDn`N0*i[9oN3)#YE%XWen+GTNZ=<7p@h?
%;>/,CNRST*i\d87*)7q16C3?ui$M<Rm.,=<7-IY21ptAbU9T\*fo#EV1P`O.D9'kQ7pMo10HV.XpE"ciffX`[BZ'_OqFZ7I\!Gib
%]r55<T@`PE.c+<6HBbITl1TPkh91CmDggs-MeBZAoC\Y-O*8!9h3)%pBY2OleM-D?8j!%tJ%hr<hqIjkI_<)!g2(]8?Y`H1S#q[@
%4"XV#<@<.mo'O`RVVrWZ.Sl\%o',eAo=hq^ard<E4(!B>DLZu[aoD.)2*S.EAnm<rG%UWUF0Y;[]%8OrNVgcL+4Wm%cqXL5H$)0P
%[JRCZB"rimq+KiuQ[V03f4__fY?RK_`NNM3m<!1k^\XU->^B72K5QKO`U=ofo4MEkm;-pGqI0=RHdTr@fUpY17D;"1QdhRu>FWq\
%*HOS%k]ZCKq6pQUHMB;2?/E;Z?#tJMcQ'+DX7IGtGi^Q"j8N.a.2>J;gSN\ZEO)j;H([B,ahCpV^9X#NoWFSQ]8rStIs(3hUK$e:
%nPa"qE40i(?)u*]cYcbNIp]C,HWA?l+$>%[elqmtc0QE6r.t\1Df*.ud%MCoj8IT39YL(s[dnNaj,%(=o!Dl\:YKH-VH)>N="`+T
%TZL+2<VnpUc@4j/a1>/TYN2:"0ZiVJe"sHP5?kPiCQ-0OSHiB0mEL!uKiQaCX%W'=T<3Idls/T*b3&TlkB61ahH+Id=oAAooZVW/
%&#\NqF_nan,H78G0:/du_4^8?4,Wn-hJW=L\,!7QBB<&"]<UkA2en&(5W?jMh/.eYX?8"NMGK_^L"BQn[p&RPX_AlbD;a=_b0%&'
%KiK`)r;<O-kkOE)7et)oD`!s"LnVMqX=:c4;V>-f&AEld:m[ap?n'tUR!C'K59Y'"!VbBR5$:*BRA9\@Q2K=!f09Y7pZR(W3dpbR
%h1+qQ?"PaVh9V]6<dnrbr47=eh.2M+7jh!W:KI9iiC$ssT/AfCp58Yfa!\F?&*q?W=ma%N0mE=n"WBT%DVGEX7bFDUpp9ZTZa]Q$
%FYUX9Ia-B)[,rZb/C8+.hl](kn,6d]Slq)_[;j^,RlPfFl1Q@R6ehqnjCEXOh2tDP_@##?iB=>t:ZViEg@rkTH)::I9.)pUr4Z=X
%"-5QN?-,"[DnY`W-Z4$Hj^^(B4MPQRM,&k$PZ4i0?=Zf;WPg`b/'X(B`MKoml&;onoLW9$s)!ri&uUQ94`LAZd_k3fm_V#p/?J36
%M]ojP3r%>M@<5O!,GT.mlDcuMjR+V_c7]NAH_^6$+CfoLNdKqts(1kOXRWnU$>Z]?m\"960E'K_kU(AX>@%>=o?>HlG<T=C)D;hb
%P^DrJ5(ggQckPl$Z.mSgSc.R=IW_EQ2a;",cX)">Rr1UC!3agRZ&gp3XL5M2Sn(W#IJJ>WHHe\MhL(jld4*\Qeb]/4k31gBI;%[6
%9$fi0YhF>s'd'U3T/-^b(QY6Cf8!LEA`lC9cK4uWUR)aT[rK5.Z1.b19.A8^LY#moo]"Htdgmkq^ZSCPMrW$n#GlUVgr%@PdH@P$
%UUmm*dOirVfM,J@nOhKY?7n)c`Q]4a;FK#a3dC![aTB%",.^e9Zs-XYqXZ\r4?ZK&TpIh63=O8!lmq"A?eO(LT7Qnmh(uBP\,&++
%q#+2f4EWI;[l.UUdST$%H]SIo&$tQ!mRcQFHXqe*WA)IOJCM#2V=fU+A^Q5.jQ#Co]j0C%?[MO3=.RZAb3Pm-!Ig<?b%nDTiD6X@
%5'>i5LM$VY[\>JK4A.Q9RqPYpe9nrOSs)$]^o(afT.>c`Z3P9'>AG"Jh"(XCoHV[N7,b$,-5[kkMDdlYeFL:i7"uf5G]d07MrF/m
%E-0S:%"c'!9W:T'eoLJG@A5WrMn6ai]i5=Ch:q8@VP"F+a4Pcg*i].=ZaU7;hE?X$T/0>Z;ZBDI[Nm"ThaWF;,lRB!NGR]\-6t3e
%';)DCo/l2IoZT_UNHXK=U_aG>PlLYTOt&p5/f/tJVBPZLY58GY%%ANk69+H^fq`j2qhi$PF#/J47e"Eq4$-<P6@S0s(HnF/#18@V
%-"9E&7'O\J"6iDd'#@bu0I0gTi_W3g(pjks:1Uaf_OmI>HH#Tff+62Ph1S]BT3<Q`2Tb'3(k\-5=IE8#f0PX$WNRCQDQppPj;uK$
%7.h(L>_LRXfafV'H9BMZM&C#2"N!hh>1;.$ZF)&E&P@ibj8.t4ga7E=3I:_:?JKkf++YMQVFC05S#M&64PqT:hu1&k]^n+BC/+4o
%f,\Q+XPF,.-@`RKI.,m:Y4CsjX&-D*q2f`'`5XJmqnq6\W%G;q9^WC:CN5DjL71>6>COjUiVrQAQVcqcr%[<if)%s1DXO6Gn1"D6
%p!7FgV<j&23N2-8[LU'[:=6SRDUm6]2_3rmXM7W4-_"o/MiHSk:[Tib#"S?7ZVXggHBP[:[C(g+WFerPoD[debL#;o"6rn<%;@&g
%ZS0U1`4Lq2(>us%"70'HNAEKIqAT-:5de#>PMLjE)&sJ3:ghJ9TDj]=P/),^"6psh0*s`WBat?+\q\;2@ib0&^KlR8N)NH[?Aa#Q
%pY\r:9cm\QaheKY'fL4#*"VVLV8r9"9E'(bH3?A^T4ZtuI=@]7qqu7F9P*>9$e6:`Wi2sbh#GTES^)0RYe?-=k]e6?`"ZbI0CAMa
%SYOEc]@XjlYY:HT_iYB!3LHVg/F.;[%UN\Hf(itL%A93;4m3uf^R'Fiq7qc.p3%+e+!p]hg3M)YHg80m)oe@l]/rB-R*A,ffY#9F
%<ju,&qY<ppFRXZRgNn(a(%1G9@isoWBoE?.BV-pGjY":&=bdT]S4FFjRKeGo-j?oC].;g<m%5036<QgniEQ"RH[7&e&Fd?<?ER9C
%S>oXF:YNr,2[a!@5q@-KgXjL?MM6?mQ`'PmXZ=U4X7r66G3mZ&X6eU>XaP'^A*o6mCA6b@bhG(3n'NGJ%uu/'K$940MLF/@h,ecg
%l0=3#T&8ht=t\-mhQOP,kU,63i`<+&n]k7o4ap-hCadUg^7tdt;pO1RG,4ZAB(ffek[kQPoj.GiC`YcibIALpf7F5t`m8`Q_qnR*
%FfTZZe]Zt4j])CNf.f6MX5uC@X+OmOAGOLSii6p6Spm_Y*PYm*\:1]'=93:&rZHBFaQgK9a31mgX4H>"K%'Slk"akQ(CaDcXL2T^
%=L0an8L79YB&$#0_`6cAAK2Qo/n=Ad)eZ]R]4+Y4@I5if'nr9jSgG+="![-H]`ZD^/n818OaCB1,3u7Mk7(%7jcB;0bj1=)RHO/*
%lSmpQ\`U%e(0nEYmeh,PT6kjEQ.&pscEf>4$olsar7#!G^H_>oWF#!Wa]?jq.PuHR-X-_biBH/3F1rDb^-26"_`toBoeZJ^.8XFh
%!V_-R[dH?[@^t0kK?ak&:Hhe<Q4:t)cfF'n'u"aL#*aPKgH:G\F"V3Gl34rlD=@*"/=$a04_MrldYdTA@k>0/5nkA%C`eK4om9o4
%cegn0Dq?J2Zf_,ql-.o&qraB"UQm%+Rg1U\g=]-,gkm"(XC.V`a_u[cH&NN[!>PW<]m2SNps.:)qhN.SHOi@'c[]QZWcNYIs(Z7n
%M+jL;$BTOQrnnDK_nE[%G5q&@5d(BjeUr$RjfrqDeTWu[c'.M'XnVQOSY59hR-+!%<bJ=d:1;^99!?4*4h@D)It"XOg'CY1`H?BS
%S=Qc`*kgA5>AlAtb^Y$9GS"o#Eom^NZgkHnq9,^7miU;&8fN+?75k'^bEioe>CU_.;(8S)5,fYO9f7!*(;IS^FWNcaE^'V6e&P,U
%g7VYn0A*p_DLHblH]rgV]SAekhFHnWB/$<7*l(HfrJ[,'U+%At'L'P2:XT0`J9a]'6@E]R:Q%GEDW[u]AnW<FM>VPc:B'VLHQuV&
%Hf"u*2YJp!BA8D3N'q`>]XQK@2;R)p-Yd73^$p>`,MS0Gj^N%q93\MU[u1lF.q=&\^WE+Yhk(THq43:(,^"UD*Z]e`nEj__EO#6T
%M&'`l^l"ki?c(d>Yb#c'=QS479-;(umU`87Pd0$HZ6rH=B5cP'UfhGgn\2Y;b[nM[(NWgD#;>O1<OXdPPKV2.,+6J9[b`*CHc=6W
%-Sc['bP1FBXWRH'>>DMI6D;U(h%[6Xa#%/=9D]MsEFo##hTFu=l>CJ#RJl+klC4E<2Eh>OV1[8KZn]N!(3no\_l`ZG8)6_rc`C4(
%I/9MK[^H+sa(<20LL3R&h-rMp[Vg\>q_P#+<^aA#qCjf2O/bu.r,:I=\U>\pOdCFNr6'$GG(0+k=P-lms54o:jN!nGg>4WlT5!0=
%"a,"aM%$<lFU<_mnGmC8UF5lDUDEWWb#p=%'Xuh(^V>"i]^pHMFmiN^J(A;0#Oni'HLuS&2hsR2F(`hlE#D7I"t^#u_maH.(%6YI
%;,K1Anfn+nf`N>_%bK^]D<_"sG0oYHEG<%4N"5%fPSPA3roQ.],e>M"Nu2[Hl&V0s*OE.n%*$_R+.58LX+NA1r,QTE=n>sA;+g-[
%5*_a.#cY145?Z=h)24$[pA-@u%!=fo</QG,Xf*6L<)Rpu47tq^X@(TTl/_s<HBbZFGDe-c+87RNbh:F+DLhSeSRH@dJPi86YOAXX
%TNdHuhFY(bA)&a"B%R.jiq>tLQLds:UM.u3Dh5=1.tuElQC6WVg&*9,Y;XbSZ^@4gI,(aMp7jH)<h@&%oI<0M:d\Tr<I=$qGoC-Z
%eA@a_qf*E@a2.W+fk)bM2&`OJICZFiX4?A,*^;m+Bb=?o=u]M?+%>RDdA4_l10)Z@4cOfufqW'f)EXMflJBjm1nZJ5_6@GGL:VY4
%.,D;FJu<[f<@g*707,:4T.^^uaIV0IX$(h9hYds81m%uE"hPnl$Yc&Klt1pEZ#O#NfmC(-2#Od?Wnapd=HBZS6eB<LTWXuXT_IKK
%c"_5YC7t=0FuXjMi`c>LHW+muPCcq_f)F`bJeCL"@eFj-mIEd>@,=#FgfrYM[]V/]4K1NL5[[dG/c3G2+lg4KGAndTXgn"<m<q`X
%=)2aLlORc]otb[UlXrFtA6tFPIU;U*U9g>/:7LDY%70"Jdp)8e(kE--j/hRUH3J<KEW/P*7^0p,S:a\!T;m5D`qWuI\9/;*Ib6e5
%O(Vs\4Cb)gH3q4!6cU)^.@[r;_pp?+S+F\n=?"0nKi7[58]Fn+haLJkl<uHp:N\m;>aERaqfcE)48/:$bM:)"nm-@RmVZmUe\C3Q
%^YZUBloXrB6T_F64Y1DdI!l58WVq!/d8ka_5j3^/">tSXbT'U,j-WC25&@Wn5MXMuI\d/@hodn_8QV;_YlDg/3pG3MCj1+WpG@A;
%>'Do,]3d&=Z_*9di$LVd=kkQo"B,N1.M,NV4:.G,(-]e<_j.-(p>%hW,JZjak3U!+@hVT0k5B46@754N>V7&!CYn+MCirH8HL]tC
%LH<XR-QC)*\B(.XVqpA,YMBT1i-7Z8doq1maIpY2::NVD%-8?eHa7f'Zi=nl;a3E`#BDHJj>X21=tu2L&Sq,(fX9VJ5f8Wn5fCA'
%L/.uN*G:Dhfgd4]grlfA4+M_G3#:XE8q0&0S^g]n).iD61D35)H=\18*p"JFSs2-75JGETSCMImmpQC)TiE&a8].J[-V0VR"gG8;
%V9If^QalL1rXgTQ`Q%QD0'EZBo7hJEpjk'cPJW@c`IcjC'Y]"*GR(NemGi`fhlV*LT77,TZW$cW[.3-rB;8<P=j(E#GBp`.f=0Y?
%OMfoo`dS<(^i&ZSE:s0*KscueH.Ft+f-2bBq6kU@3QefQ><cJAc_#do]`d3DVAenWB]\b_>W8SHQV[3[.j+4KfI^cmgjd[:[:*q9
%DfZ_!jgG#020[hc"t83[0DC>sYHn_ac2OWk7YCoL#eCblL^O!WB&WB\@"r,Gf(CCI-=2uedOg)#T3M`<O=..\j`l/b^#4>=Z'qXV
%^U%;F^@YFC7I_](lHYe1%T#'4nnhl`n)],.ro)Z^@,i&Wm0F+JjMi\R"2nmQ/OL%UU2bWtrSH-o=\GW=Z;T=\EFJOBXMS.%C)9Lg
%?:%TZ*]EK!mg>]U]B@5u8]01e@SB#b/TZ#2lJO)jn(D'a$.4!8?(Ppbk9F5Tr%)?bf\sX#O:T$3rbf4!WALZ)VWT_9X5*MMWF&]\
%STH=OncO0;Fh<*j_A=1^O0]%g&ps'[403d]DA)EK'<LHKUDEoL;j[KU6b]&Ea(s!Vc)0s;#2_a+&Go//HK\kmA)F9Lb]ZT9plHdC
%s6DLn]=7rBql(9TF`u)8RigR8T+R.!,4CPh/9cOT[jp7hXerIimA;_h`'6l:7,ZAT?iO9GWs7e![@K?Q(uR+3h*1;9o.Ya$oSIn"
%SDm+;:8#V=n9%(m$fBK/0+IsN)i'PiNd).]iqJ>"Nh$MaGujh.5PR^W&?s%P4fuU4I`(aHDm@/l_m!EEdL,q@P#8R=9F9p3d"kte
%ds#$RP#kdnLT0Tap%-h:>7ch(=WUmo9n.TiV,o<OrDkbMFhea.SGjLDEd^+&B\!(4JQK!rg["0OaB]*Eb<&(X[d1]@C8K]A^du-@
%]HRY'?oE5]bP6D=?bBFFZ)Lgij/NqBmk%j!H%44=.Uslh@;^opQJV?)/^M0^_5.^*QVdC?N85I7.=uT=OnV-7PWt15cQc6NoG#u]
%=7@Dm[p9Lt1$gtP4-C,=.oA:s3f9N*[L[DjefOBa0"t/rSOW#L+!ogUOoL]Rj/Ss[@Pt:BWhGpO_9u"M_%3!7.#ruo/o@PiV)VT"
%;05kaq.H]MU(g*lXf7VK[V^7qMa:VrD&J(o1)r+;(ljncdm/_gMP6mU;bam4iC#r-^]%`A%X_=M#ZQ"V5R+0XYdk$1p'Z!f:`ZgH
%oi0S6Wp".a[uEqn!=8Q3"rKTMBZT<?i*.C.r%<QkJPY%r'3hf_.Nd"Si7D,2V<-3^j%1.j/T&qU"VX;2>h[S1#:<PERkF2aNVq_u
%R\mt-gX[C9FC&-ND9K_M5[W,PIAjbY>&t)t\*Kn#bI3KSFN7,ARY(,4T>1Y)ks0)YGAn%.)]A_)7R04B9=8G&6_N\>*RhrI<nbn/
%(I<@N2/EL_2U3^a8GJX^9[uo"\5u`4/d<^XJSUA(KZ;HOl^D)7"D5L(Z4Amr5d`!g3gKbZ>A7;m'r/BU>%@!;Ao.];0GXaj4#3iH
%CdhjuVp!A=Ht2I0:%HPRMeECRr'QK!%%KCZ8-.=]<TFuaF+M2_(4dC("sO>>Sd&sK(8I9Q'^3oJ!2>ip`Ic&:Uc&nr5(aLK:d&Z"
%Y(<B,@,[Pb6trZlehe12""\33<N$EqoFVt"!24)1J:/EXMA?=AF=liH2*`ns>8f-bR&fhk/#GW(DSU'MQ>Z3)X-W2%@";B:PK%(.
%9af$q>r\]k7e,jn9Q"=*EGgqNPUWkr$1hnH"t_P]mA`&p*CW]WL9<=3;0[qcM?1mp7=bnHAiV2oFi?u=4=?/PG$W]#O:=OmZ>aNI
%ckUVbWIWX,Cn78Sacg?e0R5:.+%HM&;]TaPf;T9"Ggo2Zh[h0-4So=1c^\+)>he>%<ju0\)li2OHA=B<fVDS+=QZ'A12L'-[ROHS
%!8.Yk2-^^o-l3U@.]e#LiY$k]F'qZRW/8s>19kId"Z[)eJTIgSR_am!Yt^#:]l/^j$gX9]o&dm6qO/a,7qRK%JJOB+!_Xd2%U)\/
%M2F>D:lFP6]-&!!^_g!P>T4$pM$@Q+/e8%"Sd)2/5Tl@%W66C?8XhUi4;@Ig6S>SD$f'9(bC^Y?$lD")<Du7FXQh:V@H_7;&1:h1
%jpb(W0sRTMhRGbHBfF<J,=<DXm\`du,hdk21c1Ze-kt5B9Jp#+@-4smE",St)kbbe:"(:/ZKsl5\m.*@BRo1)]!A^T,'p)c+k-Xe
%"<*-*Aq7U<gfV#e,TI.O^7\ki7*o0\[Z_X'VLB86q"X]EDmXLh9gM?a-qIa0B+1(8qFi'^:r/";/VhGcThuO.&cO-+/qb,[H33Oa
%CeiT5S4Lnt>6,>"mC8Go/S5*=ols[a.,&A@%7V/@(?3\rCi2X?CqskHo9@a(5"8IY'uZle5fKtp&;\?*,a?D?B+u%K/qa:pWk_$2
%k4BfE6"1S]Y3s48RK9OBk0/BE%ACT<_rf1WR:OBl,TS7^*l"1\6/A34e>t0(5Z2:XLIt=K6qpB'%okup5a1o@K^'C^EQKC:#,V]J
%5rK2i6EWT];1`c\>b#&fWj!T_SYiMXRYubc^Jm.FU'Lc_*GNf<@>09c'BrSM8iYs@J.`bh6Sp_%hhbq-j?\oDQCY/bAcn`7,(XU>
%8mskbjNC2p!To)2C'#^`g]B&7M%VrOU2Y^E,Ae;HeP'dPp*h.oWa/UCT;!=h-;BCU(-nUB#/FV[6!N=CHh!VBM/2-F:R7GX0+-`9
%A"Z.PQ38+6+pog!?k6FU'G<hc!.q#R2(]PW9(0Yj5QpC7@-kqVfoell>P91C#/FVW@9Z@mr(4t_ZlCHE-5;g#%6BGUUgHi$G%7g5
%m=5o^$jh:ies]<+eM8j]U4BsT>REYFWbGnc)8'_nc[aL&K%8iL3].r)?:]/II5eP3CBCNi"LZXR:EdZ^.Gf[g$`91S\gg"#`k`Zt
%/;?Nc*!K:e)N*`Ug6V!A5U^+WX/@R89j;h9SKLH^A3j;H2&mYE%G>-u'mYQ2(!nEt9p7n<&kX9HQ.9_WlN+!Kad,>#L4YP]fd6kf
%7RA+*@$q]=1GfN23ZOE:`<&ZJ!/"HV9b*W&@(1)>TF*5,W%eirTq!uJl'So["X'`OnjQV3=4T62OdR>e>V:i'i6Hk,E>q?bdP-j(
%!%Tg6UfTd&-O+-SkX<B,'M)h4UR%t8&\]EMDFRd.1m#O#FoDhkie83tZ[]!p5[::W8O65j\Ba5M.aFDn8"g-A`&3l)R]EqTfsi5?
%$6:Q#JLO"N'4qiX7[PiJhB_E[o42&[&BtXh@RDQgNC*10-kp6oWY7HEMHH31EFs/l*-qaPj5m/ck">^1iV8IFo/+<^VA0>O)B=6d
%6"%VR41\g1)er0,&Jg20BE8a]da8'r#WTtgUSa,i#U7j+\]"Ou8[/qa,0bY2L':+PW\#Z8WjH;1S$9o:LSAH[5cGZUWIq1%j^r5<
%(7ieNM4[<V).Nc#XOmt>Qp$d-;i<r:84T<WfI`-"@aqY7?N+E6D:#jF@kact#;X<-\1UUu,*WPDHU@dZ.$c+D3L3p`VPOG:fGY?*
%dU!D.!fHJ_#aMpeE/PjP#=-*h',&=4'U>B=!A7K)=r>*8OJS_A;+NC3=As2JakAH?:/<PAe/jnNd6FU?6hHRF(rkWf`sF;U.nRul
%oA]%u'1IHfk[TQC9#C_TP7T3Uhc9e1D4j=8P2=Xk8C_he@Gbl.30pd-^lB+\#l#1Tal:HC2$W<R@!<17(5"GLTtkaQWZkMrM*ds<
%Z07WCEZ6JXDJ2l`inZn'B!X[%CoPTp-e-1s.om8GI%c#:UgSUe)\Sn8Em[n=%MUZc;?#7G*[p(\$=MGk[.bHbDud-j%FWtu9j50k
%<SYunM!DD#]$b!:d<]54Nk3.U_[9KJ\59+J!HLIAU2^jt`Ao_[]>rRCi"$`1Trf8!!`PG$;Bu7m[K.m%g'*,QkWlXqFMoKVd*N",
%:W:"'f$Mk1%R>HpQ:@d_R2V%0*Ll3"Us"_,eF:tt_[G@;`M[qn\Mu52Fjn_Gdf,QTp4\Ct2lU@Yg+a4T(a&u5du\afb&\os$P4TI
%EX6<p`]4$tRW]Z&DWN=Wc'+#hGbf1LE=3<P6FGL%&ZmK!Ro&Hb[u-K;%QiBb$>kDGY\\E?@@4RV_hNL<El$UieBG0?Mnt&t!dLfu
%Ls[Qi(:3$&,U+"n5W3F1TLdFDP]A21*SZF6(iWjb2jfC"$(K:H)n/8Tk$$CHP/X[WaVQ<"D\@l7^LF2qY<@LN[N]l%TOGEdoEPf\
%&LeMCWem[:!\U$4)n"rR^5,oJ_WM2n;\`_AL]%:B%G>T+7KK?&bqN%3CN2[2!-7.BKJd1q**&'m&@:tQ*"c#3#F#M#0P4a7!WGBg
%;*"^k!5IerJmt+u$<WP6hEO.:Eks^m25u":gn[]9GZV<!^?a[P"KP"5f[G%!'h_YG)VSED#]V;X!KX?(O<kQVA6iY%O>jQ@N!ogg
%bZ#8Z/)S-U+P.@neIh[7gkX$'l(C$i7M5sROA/m.i;GDEge,$#A/?DB`aPYI+?O;-*L?\H6PGcIT9cKl1,L.+&cotj%MWk!V!B3_
%!Sn&kfO.FrWA91WJn=2Fls4>&U@L-^+=[R&Ki&,`dkG_k'lD4tF[=7Ur@1A8@%(*?&1_(pBOuhHX[W:;O@?M9eR1RX+VJ>W+?I<]
%Nt!97MMsFt(%J]93Ji.9D3RY+C+67T,rpN,V9pZIhEO(8MP>*;FaXV=!kDtKnL7[U,QU=SV7VW3.[FX-`#$"%Lp2i<R_lRf)Q*/4
%9G"ZiCZ4'[WZ$LXGp!Go%GVhZZj'-#f42KTBbr*fnpmFd6AIO`W8Q<"DUa@Z``Z$@]"%?`(2qh1BT$hUGp"h<a9Pb!@0j21@hS`2
%YC]M0AqM/'n/XeWR8G_LUrCmWk[a>3g4[[)DQeId4Z2bA`$BYD@O69$E<p#GG/%lfDq92f(qn:e3)nope=CglK:u]]'.T%^bWs`+
%pRrpJHlN7"ICiP9hQ48;lHNhqW(-[R%Yj"hj%?d7@FXBi('Bds<<1,DAtT0_P!EUZdKRRsK0m#RYuTPUh.$nH1(Nb&!S!gV97kl6
%U8nc`L'q/d7%*QJ;H\EM0N\R>?l(Q+H%-!+^fLZV'K^oVBT5q><(8SJC-1)c!GRT5;u!A@:fE_J=fqnTFq'&q!9C@P7&n]'&Q'93
%CfN`CeJ1p)$>/jEP5I@cPl3CY9`^$WRu]P==3m6.VZM`"Fr'1B6T^=GN/YSH`th0-*&L_GAJ::UV7"dg&'a6eV/AV&9dBe?Q4RZD
%d#OiV4@6rJ+`J9[k$$!kXs#rTW99gri1M,L3%A\G&h[A30J5_164hKu,TBp,+JmOh[O\&uM8Qk9MQ(UKIWQrq_7RfE-4kNdBqllm
%)OtIF3304'??^NX.E`$PNuQG@*9`!f#C+?""NSnp?IGtiDTo%/*EBlq2+nCeKPcKcU%PdEWKfOIa#,%:f:1i/gh>>A]CP3cCJk%t
%!mO6!?k-ID(EO2koe("^9\BGl<L$D*P#0qc+HRUoaH_>f$4D;TpCY+dX:KrD0S".Y)Ou)'5hbI1+Dhu=a:1Dq]IJ/r6<;WBp6fd%
%DGA@*Vi2IV7n>m=CIB:V1*FM)'8.JFo8Q%pTIg6(Be7IuW:g6L0N\WL)_MO#@PZ$Q,Y5l60V+I%6<)/I;F$LH"]XF_=TDI,73Xs-
%92S"*9b!JP3DpGj@HQlQ&O881TTaD@m`jham[0TJRBDn_eRhC1:lEWET\OQ^<uSNUlS.)YckHR:;G(Ricr7tpGJ^MZ$kIqN^npDL
%.)Jg_Rk:bC.Z6Z%&-Eq*P`[jF/g2A*B:s__UXD"W"QJZ@k%M4/W8csQWLFN8dXDKhFgOeb#*N@\\N.qC&c;*ae60!s'ieA$RNhIT
%naqsH#Z5KoEqgt.HWk/(lFJB69M%ELitOo9G#_,tSusEYBO(IR;GD+o%YJrd_en"ml\>,48cg%#;bL\'&7q$L.g@;dYb;@q8`U0-
%1sW6_*'F:1((>aBO.PWo/SS0(_XL&Ii><.9'BgIm&K4-$)TK2ha>$s,1;t"?3%$a/]g_*P\..fC3.]8i:5nHB&G/<A,>n[N!ufV3
%<t/li4+WNto&3dQU:nPh:"oQ582l'T'*h7&Wru.P7BCVN$sHkseM5">/jV?n68@ba+A*2UO<u*],9[ikI,S[mb,=:MZu,Bu/"12$
%&sKM-U5Xb/W\1!Jd!BNd&]b_k0;tiT\Q9n.:!NmnKp:uFA^Zrt4aB`[k-^Fh3b!@p[NHPL1*?i3p&aI!Y&nSqWt1o^!iZe>r<^1p
%bb1bKWko?GKR5Q*&TS=Z*2fPP,p@_36S(CCWt7O`'`k/s).ZT=[=n)adt6bU1rg4B/WKaZXJX"Z8QJas+C]+qrG%AY8kB6QQ\_ZZ
%C),ecn>mGL*Rm&\5ST;R)Z(\/:?lbA_VpQ6>#2)\S=>J!WE2bc\Q58S^8%_3Td5?je0$Z%X2=pl%)P&mV2mk^Q%apiqDASq9eM%M
%_EHMiM*80)Kf_TPDFbSZZIqomV>2c,#6do-Yk;oi"S_;ZX(1Z$6%?l$!aeI7$sbhRHKYnHhoB+D#XQ9:[Rs-0KKL/G6$1A:,]RM4
%MP=lP-r%Y7icLYp%:(864\Q=<B]2eo&+^q=L_9ee^Cq02D?upL,QtrYGQ^;C&0W/$F7CQ7)djjK)b:6"6"`jBSIfNT&k]],Gfihn
%5_^LKQ7>2MM[a\=O!(-mC1+,WB+Q,JC*7S6D"n4D7%lNFPCj@Mg^=dnS7r@i0uBG!(U)sEp9E+$MdI95KeUPBkUK\5\r,Vi?+-I2
%EA.im)[(a+'t>ju>p%)u'<Jh*`erW8:*sSDEKWsS1E(.dM-,t:(uf?:80lrTqS8ElfHLJ;oi<?jV`5MC!D>t0/U_J23:q4\VF`Y`
%%A#-VVRssia,-Gf4d9a44IRFX#Ilm@"->!RR9Z<W%STP9@San7du4p>@N%4W9F7Ek%YQfZ:l#j@SlTs98V%25'a@##+<<d+hXjnE
%832<8#8e!B.MAQ1m(1iJGf]NpA91E(((!Ul.tf)e#\6hU!nhuEN,?ZP)/<;*rMofm9]\^)6(M,"P"-60nd>`!E<$M`WuA"2/KV@$
%8rBqcJPaQO^mc-"oLpA9S+Y+Nr5?[HWup$pVm7BnWMi3i#E3#P$)-URKhYAYrP0ESeTlI[C+UV-*O/J&gAm6Ybidn4(36hN$D.Bs
%?.$bc"EtH:,@/=,395u]Uhp?&Z7+%ULg14n6nDFEO'IR:!`Z%&p1$"SaA$h5+8o#Z^.e0>3:fe\MgR@N_hkfSPQ4eqiR6(Ih<9EA
%c_k5Qh[V;^_e&\t\Fm\6md4dVN3;n_]]%Z,_>#Nd@rZpd+?J.62P1c3dWEkZ)$+FJ.3dJaj,pIDKPCNej&?pu-(.1E3r4PGL4W9-
%8gJV\(a16W<C&!8_9"u3Te-D!idi*QW>sflJuSfb!D"3YGOUIn]%R22;V8j)6)Z9Dbb<LK#i]5&'gumO#<<d#MEl$kCJ$=6(*cYg
%#`V+!$%XYAE7%WVOq>]HonLt=kismu/e"'KF%C@BdMu0u)'f1dk,S.$bP[0AH[<<cGl%fFD!DjiAK)_)8LH(jVP;j8J1_Jm!2S*2
%F;ea/RS7W9q24;f9PMO7MB^].QQIZ(?s28V[_o.ue(a*S6lF)JWM[1QI3N!p.JsQ0LehG^\`7-JJ_WZR9Z2l0g^9fQN,%A74I:1A
%]RN=g^Z)20!+d76q-**8g)AcP\\i7NdO>b2)MYKfqrh+P8FkKVG2LOe:B;#L0n6%>iAkoTKo7Z]&VtLe@.4LF=H#U)bZGFf'[I1a
%Gfg)iCrt_6^cliQ$_aS"Yl-qV9ZPf;][:WSkXPH7YFiF5LVe'@C!2sB-J,,+WaaeX.Za_[1]sDeldN-R4")IeVA2X!&^3T/UUYkA
%Z6P6"_PGoFCL:=W+/--],o6iM3TfP4\:Ga^32+)s##G`.YR@63hMm^3^63T'<*,OfQHNJ65Qs"2K]u9&r#'0@b?kRSL%t?TE8m7N
%I?ia6d),hjXAVJljD*Y-YTeOhld?u]kl)M&WMTfT`!0Lg2$r7M)pt/Y+4+I'TZQ#(;PIWl2,2*]&SOf[?8[<G=-KqY%K[55$?Ze:
%#q.YI%<^C+7PQ&R55j,-]X]eCT'Z.74Z!uM`"sj_\[F?/eJ34qgo;:Xo2l?t?JpO>L(TY-Fc/C+a0g$R$)tKfY"(6Y+:IYaTt:^-
%p(u*qAo?A+\6qn7Ps?kRPiYG[!"534U3E@>o.h.8(?LIK5u;>@MkL[;$&*T/h0oei.js`b9bbWe!ikfS[L2-(#sZcNV\r$L]-9`T
%*>qk32o%(T<pO[J_Vnknf"QR-ENC\JSp?mYfO1Y6r,E&Y=hK_,#%u<U2UjE[A4V1io2[<g6W`ah`0>fs7h5s;JcDCk:81@YcE5G<
%iQr6)n^^/&+)Cs5"8>)B,iT"unpC#E3son1;:rc0W6$F,'udN^T?.fj2#tbq@#tk,@*NkHE1=??%AAS#L"f]n;n1(C%A;[ulK:dk
%?4Yji6$Yg:XLPP"E4,rOBkrBPGk`:FPc6q[9be3a!/\lj9ZiO)fHpi;X%Vd+<`LjZW[Vb)Jss9(ME<HClQlfX?6g(fWJ_m=2)tpC
%9E64767Jf:TqOG$P:N9+d.VdM:Yb:pGp^V#Tkj\Um+,H@L<D,VA_F]u.A3-K2?R5X.l=O=oO3pj0Cs,k=]V@tIgB$`c'=DGQ#;mb
%.>QLbW2f?([jl:>>LFI2kfO$5C7t8p#rQt0i?#ZV2Y$YuRnup/gTJT_,90@0]/3H"DtI8t(*QY4N\*CV4BcUk0JuQ4;pBCk_l9<K
%<CP9<YLs4PJ'GUuP@">NM41tPs(P_'_nA[;j0Z=CK*p#G9Qj?&P#YEm)q%mi2>Lj,@Q@ZrQ8!/t<=$SUWmd!%nCI9[:g?h_.ujf*
%NF>_YB37*<6dF=7CWG6-rD2Ut_R*SdTi!Y\rS+PQ!0I2q4_E:S:2!aO5n_Sn:kRSMb91MW00HJXk&Ps`PLKIW=52ASD/Yg0G[7aD
%Bm)`j#;\5+b+K"k>=R\@T8I>f_IenOaE[KtQ#Uj#e-qaDd*q@BAA>rrm^:0?@D?-SCI,ZpB(oFPS=niqJ`q4YR,)B_D69:@_7@eB
%MCZW(Nj"'X#83=)FNJ!h^YR#rIZmn;P@(qLc!glqLF4lX;o&eT=+"2[\0q=ZXH"oX(gkL\:a?:Ll;Qd[VCgg/F;^FPOo*k'SF/=]
%6,r!SN4<3*@us'U9PJhIL@@e)XFO&P#cL62L;Ec!R,)TomrB6!"V_*uP!S5.J#ec3r?fD_qN[+g?PBoDbth4ShsP/mJPm5c)Ft6/
%>kEc?fBe]:)JW&&(\kQbb'D%cQmFM?qjX.Hlk>j-PE>`4(%sU;X?T_L>&S;r2[='pnf!9-]"IECj6^Nk+bPG''*qqVjG<1g'4"q^
%VJJHd$7j8&7E`fX20#=OK'G^0-"4FFoTX6NPC0U[/6\Prk(W$%\.XCH-\,0#j(i=%LI9g<)i2!Y>K)6DWn<`')6T?%VphfYNQKds
%Q4Ma/W.BrFe7OfcVp'":8D5Ct+cl.m19)@[AT=!/%Nd\sZQ3s;6',jiP0jFr"/n1<2o6G6OXet.,96-F1:nC52'Wr7`Rp:kJPuIu
%d9*/f.]JrsX4s(N867_Y)3*(_#m_2g4\Y+gMtBWc[rK@J];e1EW,$AOIMAU<.8r18fN(9-c8KtpAFR#[QVub[4g,>a7pM>J--">_
%j^dZk8HG?'9^peF5.(j^;gaTA#sa8T>LfVBc$[Po?R:VQ.>KLq*%@CB7gY1rR.p^sEUX7[O'=&dfUNcgS4crZ`^0OJ3/5g5!V.jT
%"]AQpRfr.,]jqO5($@M($HH5hj/]@_9jT9G(lg2];p1t`UAtXR_O7,WLW$'rGM4FVW5V;nW/F5Dr%\j,0DNYLj=\P5\BcBtEe,ET
%&'S#Cnm,H-Y.E/&`Ti,36l7Qo[D_C_*"hoLW]HM+8Q2\qPGa0he>&?o&SZ*pKa7?:nKi.7.j:9iKA7Vp#3k:@^#K"#9GWjJXuSf#
%\4P.uE]6"]*Nq-S'+sXjSt^7a\;J4q.+]718V)bpGA?+la&#2;#ZDp7'o@&Re$=:!,c8IhY#\dt3f_u0%Wiu1:=Q"b)Zq,FLb4t'
%Nl2W8E?7>DOVZdkL1_>i'aZ!UV)Paa.al1n2QK>8i_/T`e>&#fm>;fZO*D'7'>t)OE.6<sZsT(EjWs6ZMh;50*@Y>f!*M=FY7D1u
%hX;"(8)u`mZItumO^sL&UDt;@mcfP+49s[le*$gHEa('tg;#aheHd9$G6oLoOkss>kWPrnZGKSu:c2FR\<SmMN<mDe'dBXil=qf,
%aG=S!(J\VX,GH)n\l;^i.RMnL=)c/FQ5eA7$jG54S="I&&FJgS[%iU69Jq.',L1h7><U]&?F5SO%]g\Qk]HMlqLlF7=^!TF'A@'8
%q/d?1XrAgBgD0J%PB(2ZV(4:V80C%F)sTlqWH_uCW#K#.<`A)0Kut"GM^o:VKY#R*@p#&DNK/Z_h8jr&R)k6l.WPW2R8>hKF5HL_
%^,o3(l77s7>Wq(l6-JLmO2*33#hl$p;<:n`9KhZggL!oCC2$<JRSZ)?XfqFJ8$kmRQilU2`Q2r@JHV'PLm'(rjTmDK.7ULa<&"D\
%O(h*!mr4.EO8s<;UXt&"$r"<aWCK=UQu$D(2'hn^g8P*@S/Vo_V-r5hCIjGu3(;GG2'`8kpQ8noVQIlq,edYl[<a[*K6Op5W?'BJ
%i7$&<aJ%b6CRoUS#DBeaBLiu=U1l=kWH&Ji<(#XO(\-deLkZ$F\K[mgd?(l=W#.5uM-%<^rf:_`Pr3tp6fNZ/Ym\hqP*3uWC,([`
%7GL4O7rbjdWXDh@pT-kPC32Fp'r3I0*6U'qR"@_3V`DEt'#fRGjc1`[QmpY7UC'oEB$ZuCVBEoKh>.g2^4OVo;im.5rM1Pn(0QN1
%RmKJ?D$%7f%>bYuc%p_-jQ*q!YC].sVY2K11(`f.o8!sjTHrMZ@[(*'S6c@JE1'BclIVQ5IA9Zi.iI`,[,\q\AqC.>fp8ubEK)pJ
%Vod=/j9'C!)03JDU./Z2e#"iGY9=$%83ssEq><C]KVaU]-[!)g_IaHb'h:\E<1]=8m80OH95arP/4Y4!S)2_LHQSJr$6[S#*'p,.
%\a\B/Simmic8Jg^JVm>^2RiIe?ik&\:)K3l`$#3$k0PH<6"(oCCY1pu=;<J!jjQ[WMDNH<2f>(e!+EBI!!VOUeQr+RrjA^d5"gob
%RP*H3N_n8`6-6.dqiC6X&Ng5)e([M4TVt2l=Lrab(M^A9IRVK5iWCrLC@O;>N0COCdmX6i!^am@a*qJo"/,uU*)f8P?!5e@4WapR
%5@%qa?n.M64><GG5UjHk*MDam,"F-$bm:U4IV#M#4%nc[.]UC<($]hJ3p(dF/1qS<GIgla->#Rh6ms%^d.#2J365"mL098Z*\NTq
%U!sufmY;ZF>Sgt`,L-]X0HY<h%c;O[TgI?;-%XMh`%jXghT<^hZRBZ+%15ahc#Fg]9W/,YV/kT#T5=sgg6HSX\+.$fROsUt1:Q&)
%0?HI%)+ceW<u7P[h58q&n.e310H3;=^S;+mh^^<47>WG@VdQAr;]"jDGS>XtBW-ps9rTJQnheF(U`:G'_%/"bH5-L4^jojJmmC\R
%20dCAj-(kW9V;U1^+&N#(.4p>FH-dR39Uhr'-VS3UoS=EE".l&d/Ct[JS]_I-+\`I-=e[fnGjk+(ftfHDTe04ER;ScMga,4h(+8s
%(qP"ujr_o7M0h<M6s+g>'f07%Wf7rd2QJ)BmhqrYFc@4S"q:4*\3:UF%-Cq%DN)qmFZ_t5&.S*&*J!J2.(Cdu3/B&n!P.>\8.dFP
%<H7jU:\gK_JElcqE*r]NiVbEWbp71`fp!DJMOD>*^P^cg*$N-=ONfg..M.3P`g^Ki9?t3tk$Ai?#VqGH[Xjig;M()`#3d`MKfMo6
%*2Ze9>oW_b_+hB(?sSPa%>!H,8g%E\H+ML[heD$,pf2m%8bWfXQu^/MJG9\ZEam<+,VT\th?`6t&Tr:<\l'<G1V.;PVL&lFe,VO*
%HH*aj@NIX8'n#$hg'G.'HS"[><-0u!7Ec4c(40m&>rHBV9AA*$`jI(q*hg*HbOY]h$<[Fk"5@"`nBDe@6mkXoQV&YQo3u#-d[=DS
%N/O.5EJ]H.?21e&qLsa0F@2p]dTqoA>:HYn0\l`6^qdItXJFln]faW$Gaf+EcST+DU"m#$"f):[XUd`:L-WDY&+q%4+mIJp:kdc7
%iRfo4+'4"BX'.:W'hpDFCd9Mf[A&j>@"'H023Og-isOjoS:Sg0H9a>oZlB475[<*)96R@q0cH$)<Kj`i_V@#=n,aM,d$0P6d,eNK
%PQM:34eRlE6E&/>W-"Aiak!&9LKF7=N8QntKVqjDN!P65s3KK4lq!FRfjS7'Iu'dFPs"M*Bg`+0,S2)oQ2mV5WTXCd:dc&G?!Tes
%^!:qoCY.CTdeni(YW9n^iF[9%H1&`,CUk?:$(\I24M:iBVba4.ME]QLkYjs"3a&FJE%q,C\_p>Qj+Za)#gUHBRf4ps95)!I*O=(Q
%Q%t\#l5s<,=RrVanBqIJq[W*PkkC9^E=G%@.H5Yhp(cKLB>W[NWnmYF;oD%Vo5?KTHpD59U>G+P-qVT2ZB0RX4'W1K*KA*KDTFeO
%gjfLfnIUIh7K_*?$Hsbda$tq5JSWVHV%LH?0\tjkY*P[b2E\uR`m>&krYas%[u0!+lQu!aKh"_8pJ4k<82C/<)u;a_6.gc%lTj+I
%c4.,\E3jL:Ce?9)a6>g>m:,Z2^]*l7hf<O_LJT+plgpf_qZEVf'@Va,@;bW@[V't9)L^jC^]3EAJ,IoZ+\-0u$\59+('\_0Xfr*2
%OWqsP=@4BtX*=Nm?rJT,:bJilZ2T88X`G5JXMc'ZNL6CVb"*qW-GIl\98'+2LM>R/bP?kl?I"$;VmN(7?["9mho05HedU_jh9!.0
%Ma4,Af/rs!@9T;:4lBa3]uL&_2r=;<!kS:.dYC]MKk9lf`:YNFqnV0QJFH=U\<C)aC^B"f<jt%c!`(<<A600Rm>@Q2s(#k5JfpSr
%_chh[2BXg1)bVWA$O=$Y3aarpbBp>LV!!;c:K`9&")?jIeDY>Xr8(&-ngEXTn)"-',1j0c`PWZr`1j27V$+)2<Lq`)Zi$V1lDP5^
%"JQ0&o>\jV\lm`S50PNMj@9Q_+($",OqG)!%O2\C%$NqS5ou#&9OPiBeC\(@(m[CJ&h;tjnQYmq#X+A,MsWmihGM4)OpZm%R`45A
%aJSG?N?KHW6,.Dc(7R"m'-T.(-+>a%Pf9@CO=*)CF6[4^(<K'Yr14R49Gqd_OWu3<$u$LJe0Jd]@'SZH;b(0/Ii+Y-q9A<#f$BVh
%nSdE0jGZ.M7Wa`I&N@^ui@m0E3Xhj/QeMe:8B+41aH97Y6Q9^j`WI?F)'nMl@d[5$$ta5LJiseQ2`2!=SMSrg]-H+=^A*\i7q]"5
%aF`8n`/Cto.(ZrE90^^orLmA'h50=#/Lku-"B>ducmaN'n5BOi40gbrs$C_o[_r^*kOXNA;'i4,?-X"M%1E?I't\7=i@oiSF0%G^
%UOY$mX%g^5cYku*`DcJ-gi[1gI\bNf$!2'I:rq@3<3X4gS&bWfA[R7h8e<*2p1+@gA8ot?OdIBu>G'Jh%>m*M59LLF5'so`eDn-q
%V`T'A,,`_C#EpdOT5fsQ7bm8)`sErm2kKNm7Z*8DqC@d%'-"jKV;A?L>=nCMMf1JKJqj+>:I`hik*h`lZSAM<$g,9c#t,k%:+$^X
%3mP8+:\tYWpM#ZZfA0."=a]jP>^J$n2i_hB./*1&Nh>,Srp90&[m.O=g@9<hhtE3p]h\&eH)-qQqk:+r"tEZ#Oo6h:ZNB"?b^@C<
%@M?9I$]=/Gs4?R^=:\nKKA#Fcdl.:g&#&[F:N"W_n%7!-q%%IL3O-'.mUSBWm*4gN]7&B"q<qY^if8Fg0@'CTL0fMmM,c:U<XaqB
%$AVD.B?PQg[rDBofC?];]20JlrGFN=HRu(gSc:C!A"`PIh+TIkoOcp?GPeu+45@O9`A)d:Zd-1tm#fnD-1g[PdD]U'<MFj]oB;;9
%!AE+"QW@()f,,mDmkN<YH[T(H@3YQ1@Ji%2h$4X0Zkn4J?(YGNgL1s))qi?cIMn7i4ME>?bF+tbIWV(SdGsJ/Is?<qj6Q,>p=^)q
%*hr1rEs,6g8Qc3E&OFp4*GfS]-Yn=7DV$"-s6O:T/$^^H2?KBaOUsRfCdh_@R"EejDA,MuJbLq6pd61?gP`6sR;P691[_0QIG+,t
%p[<EJa1eV?ir!gkYJDANq)FnH(mmHen:f&5@60D4bm<3F`RC_<Rs-Np:#7$BZ!qhP_g%-4^[5PlNTeWs+7Ac4m=$6r\i?MSl,n8F
%QTZue>OfmlR2PHg5\(P*C6_&o:%bM1Thkn7#:&B/<5;8R_H]gP[(qpVTE#YroC1]HqP'>^$]']%_F''[.Mijc!PH,XC7;8-djP6)
%RNhqn2jh.V>O.9h]2h%>i['i+^IdpKCf-77CGm;ErN<M*C*G].oSRl1>*Ds<(P)?,XU-^EZ14KP+:QLl!MI=d=(?E6$[ls!'mM]C
%".=7[CCPqrO]nY*`^-0BVrm42!Nu[JnVI;;6XA?:9378\LnPbdNtZrEMNj5)Whc:V@KU@(85g3LS51J>^0Z2Qq2>S%iB18XaVl9Y
%FgKL!!#eQ@)He^f4\<QSA4?$p9CqC,XiN'U$@P=<?-jM*DY+@?r3;Op$Zk[AcNHZ"\F-$O,jkT:2R%'GGe&?>T.F^P3/A"@dCHGs
%-"?ck\q\)[39Ws1$^2\.Z`YWZpIg!_D:Rjc"=2!$$jVV,c_dma:?o4jrp\jCj7K$%30Z,mKR$k@lA"?o'<Sd(M'+CU=Y*2US3!mQ
%(/GRZ(S!N?E_d/E7'gS/%\Ka>)#fB[TsKTnYLDTFeaVmHH!t:8'rG0U,enLfV-g=3hG5JI@mNO1SZH1_k>PEA[1SX9\BUK)pb3lV
%Va/,p)`>n-eMdtgj?c$p&Fe'LBo1SS^G,3V50K4sFcXM.Qe"<5^u#Pp_&h;r9'lCh$35A"g>5b^bsP%YD*D<&q__14+gOAY,9'01
%cU$U^rMB2Z`[<8j4UEVd"2r2<?Fq,P&=aQ5:b2e))o-6](Bon7>$Ko#%3V#[02-=MqQ#Ye:rH:_i:mbUh)+j&8PZ/3Jj!8SBe^;m
%51P!q!rk'Y9O*%o<;CX.%L<'fdRLj:$@%*\l(_S>/Q6WNr%n'lIdt4!PU*p$_M1RcpP%r/3^MQM0LOXfX=7OPfGjD;B7!RJbZ<";
%Ya*3%5R=W7h;qI]$8l*\V"(&R^ebC(ABj<F(Gdel-DZ$""[<R4&NpQ07&2\c)7%?"_kGS%>_Y,h)H)C&]"7<;'K3r=$eXS+3:9+9
%EU29uIplUFLHZ^+H"c%OX\3<MHAa-d&:[4Tj0t60+E45b#J_EiKY3KW1Jt%m@7X4R^R9+qjNsgR8"mXq`&5Qf`,VUE#/-Hbk!grq
%KdhX[@_V[iqHpM/pM[uG2W`sjlM7c4A7*m-O0J8n$fuVtS*B?`T@4kN`c:Nm,MjMZ-$W<kl#^(&>tYmS32omp4KLZE=g65Tc=>p&
%o%oh_?6NS65m.01L?f@WGXUJXbqDc_*HU*O^9.@#!I`PJf<#q5JEYj=2H;)c4PbfWQ7^ke7]e!,I_D-fH</&QPFluV]JT&_+I.!H
%eWYW<B5=]!T&V+lh@8="q-;A"*Fj-eg%4.\,->@F#8n"Ikip&[geHHj#Nnt&D?oA")'EZ&/PD6LN@-6Hjf/XW-GipmgG4[1+,H!u
%7<EZ?So/Z**f1t5Dm#$8=$KIRgU@3RJr\R>Y<iD07(Z7n]L]*+P;)$BkS$heRZ5cdEPj3E4FZ:d=2Z&T^UXVff)9'eD`_;*p9Wq%
%_C^+:24ec`HoE'uIQ'>)(W"#3h%aSdM76[e1!%l9)W\+1CS"jt+bml\We@ljroU#W6C@oS+cbuXpU'"FM2SV;;A?neJ%*-d%#XtB
%F]AB,IdaR'dd(QM_+-lCN<bLHfj45BGj,J*i>rATG+O8p/YNo?AJ9-1@EI*3Idp8n`KYWF7V.5Y_!lf9DUZd;\[:A]]5YWjr=O.a
%qe<)cNp+;GH;77oSW$(^@:taL/Ma._bC8/_c``.7eG_hb*+iJ1bE\Wnb(7gu<X%Q'h5uQ+:sd^_JBiO;@Mc5IIq+J_+#FQg/)bW-
%%<1QVjJ5/5/MbAIIFXJ'``j99P^*i*jUq6<""]3L:R3'NiEiurnr(7-/E"L6]c,-gKs%g^rWhS$+u8IS_Bt"$:KCfr/U4BZ8HP,Z
%o#dOYHfLfbIX%5)1(<dkqtB;(EH=%#q:cPmX)>MOIdo(s2V+4?Ae0J#Mig+i;24l*MV]]K1F7osIn1$Fk"B\ZrL9[sELP@hQEnfR
%#G4U2_7DRCbcFG\TPbg+#WOChPS)oUTn.haapF&9mZ-)nbE9N.P)Gh/dA!nL!A:qB%34:-I@%?qSYdl-#V[u7R\sm#9b'JOX>=o!
%YC:"V@ZOj^1!s9204/%RdN4hJB*\7:p.lqC@,/f.ScbkFpN4o5]O]B@FtJ`1EZ9HOP0H4fGdfZ@BfdeQ^APnF$Se(G2O"@5a6DTc
%s/;l8iRY4(M-0W?ibd"7J\8Y%Mp]tD-hTH%C!-;kDcK^b"^IICE(oULh]F>`U[4o']A1t&h[_aI@?5RG@9i'\%8-KVE)/o<["NjD
%Q]=f9neRk^FG\`_?'j@44'Y:lM`\S/3r&'q/F-X"-eDtFrMsA<FFV6uOLOGrHMNDd$LqQrp&!-i0D9^/:8lrP^Zis76$Im^/kpR>
%(!p]c9LK%$.<r-B<"d7/ft-kZ3[INc!rB0!?^sX@o_$0ZDCZ)alO[&7n+\m%WPCmnplUc^:ZEC,>Q*X??<E7i]`#og+RV_c6)Nf5
%APsR\C6l(%56fGTH6]ZEKYG?>2=MSdQ4^)tc\hhWa-14ujC]c)[[!WU>34#?*Zt\>+o_iCc3C>N\(S43eWs*Y]H)J]?@:3]s-di@
%dmJQ:L?$*g?[-q2]5b@E@6?"a^<U?/TNAC:fiuNF.m4,u(K`,+C7\+s=$9\^n,'soBC#17LaQNDZqXo8\[#JGit"XBJ('4WVL6<`
%ZRs(DnCnc9?LMbO/e7WNnGJFSn`U\%E+k:S`&PEGYk'#;8f5O#Pp8g45)8jT]#mUT&!"a\2n`11mWXLZ-YO5`G0GJn4==u3#Wd1Y
%36b$N&[(e;-Ll6X;BV*d(1jV,k2]N0H'nLU880B]pY]-r:*fqQ]KD#Z=V*H<2aChsV<:7E!iVHk]PZ`#E^Dp:P<,fW[=*A]<IaU.
%rZ.3c,IAOPP/mGCQAC?+hlUWF\L@V+'hP,)[N^9).t+]'.^V(l$-_b-JKaLu)e)*S;U&iZ+m5Cgr^@jp+NoKd5XL*uLp/!E]dKK`
%89ke$L0tE;-KTL)G[K+N#+*&^pC48"+WR=_iG(YI7ZaY)ZOk?5r<#u".nO>Lm"3q%]4c1"E(9AUCP*4j,VG_KO9$$MU0p\9Hn84F
%T$d%?)XlA1_e,Pp9/_:t!:1$@5$?HrW%NjMJ=U"L^\D6UJh]'iNZ+5=#W!j,K9AL<_&DOJjT?!l\&3kF,f#73-%bYFL\I!\nM#=N
%kiqNNA5)BdS>Xhe-rX#=H!?]biAhEIccf"3LnB&D)$+4[Nb@aQ>kD1Y9I^u/#IesZ-u'dqTY<!GZB]]>:]RgrK$(=g:tnc'U*4pY
%cQQSEn)*FJ1YHp]E[GCS^]QT^BLlYq`Q/S,"!G<EJn1g3Q`S/^V&$$P4,<Hm1[^8@%7$^I3;U*_PS?nR/W;bA(WJkae(mGIH,?5F
%Ybo,1U2Y6l,g-hgc;?,MTnS'4gX"<tOW;3S\"4nA@rIGg-L[PT7*%erikGjL4't\@laaa>TH5Dr0AVXa6i]DeM>Z%0Fj*F^V@N$_
%4SI;r\jWioB$>E.oM2M\4`DV(Y?KtcYqEZ>24lj$!g.T[7]NCtWU!*j%)8@%QbhB;o!02'dNhqLQ6eN8&lkI4XU:5?ESmc$cEh>-
%KXj[o.^G4.j;&_.Upk5l#@gbB91DeRXP:%j,e^oHBH%DVF5W[A`4XU4dCiQLYuI_BECZQiZ>Q[rKllL&k)$h*:%1.3b\mp[[1)MK
%&!Zp5Y=M1'!/&rR3G/JC.s)6O-!+_68rJ]*BK1Wd"3\3*1Co]cWkpq<VqC$%K$<=;P?RrS$JYVTK3][P=*sF"+h8%oClWE;%?sGm
%F22D-,YI!d,ihNq^!7N+)tJQnmu)KJDrIS<R[][h842_i,,;l"WiTbu_Ko3I&k+IlLqQhiRCM;iA/@&i(M7eEYJ"`rrFjP,R4j2\
%coVc2M%8k>o=QAURUC""k!U1Vr-@'Y@hSut8qB&or;@'pHlLd"PDF7PT90ocWkMi##'&ccE/T9lL0SHY'Wl&)\XV;G7q$ngh"'uU
%!B.PZ3NN&##eY:Uoomo+8opIt-*r1G+Jtgh7g#'qrknEsR?!h&$]H9S&*]7dB]cQr1`[]"8\nT5$%N_\%&?(<*^$++oFe]6$8CKM
%q^Q::39,^u$Uot,F4"W.VuSN+2WN."W^%-A?/V[*;T;qsVk?l:A;XcU6&X!DeJg7ZTa`c5UZo)c@gio)<_Mto5[=HCHJ#b0@cdR0
%b:sQ_R)J+n7i;4ZM=_7)eL4D6DogX!.+mUdDrDOjBkSs5asolNou30Oc0_osGe=R*\^#^_q,K$J/iG:)g_TKl`!U6^LD:c"k[W.6
%rpYj_g']=rk&7ce33dJ1BO.^LNOliEm@%=JgF=?E:Xa'H_#*-"&Zua^.V],5q"c>'/%LUe[>ZZJe[j&SW"h/<5-#l^&o1f9%AGeb
%`sH9oTB#tc;LLuNWOP>$-9#gl%lG5E7,JqBV*Jg&#,ruPWn+'a97R'mri5YR%ZCumg_Y:%:rtc`eZ&WW(G1Vh9@.J9+ks[@DP.:M
%ApErZ?tcQ\h6$>@gqGN!(K]-#&YsP3&OAHA>X%t^HP]Nuakl>>Lc#kY@#`D6o;nXgM]'aADUIlc559cCqAe^:_2EpBQ`22Y`b@=3
%Q;<!O?mr]rb&e2Z\Xk3mLZ@^Y&K#M9^k$:Hp>,dQm#"[Q!(<1RjW[G.!Y.lM;rt,VP*6D[/tK^69?8ag#=?[)'4,CO#3naMZ2tWB
%&ReCN@MAbF*$[4$@nVKKren6++ZT@_L[%/fBB/uJN1CfL%L52e\hL!:0o[e11GR!k&q!kc$%2(HW/CM/ocQ6#hO(a045rDC`N/,^
%n<+cskMVMD+<\fC_uU-kna<_V[#t+^H<BsmaZ:gbU;dTrJVIf@X&0XkT59\dBgjdAps!re32gND1G]@5-sB<lfFN,?2@(L;>tuPZ
%[TQF5)`9VJ"/n"'[1VRI6F:ll"(QBOSepo4%hG.j3`*/#0*;Rq'\_oI_Zsg<=d+(85:J8:R#F>@c9#LP-,"/YR^>XOnN+'<A*'/K
%Rh:NGc5)A\Zh7UAR[.ViSo@]N&..p#)O3!uGfsM5O&jun6k;_AfFkNkc!`c+BbYk:ee_:G_\<V%RrnCgQjl#Si[5kd5_g5?N/T3t
%o4QEh=j(BcV70(+YYM/Kcs7]-rBrOP"Er-jPs7^`1=r(l)bJXB]WBhsX%2%saOE\r@NTS'IB:d\GAa39O'\P[O<qkXQ7ERnMsCnj
%6J^Ei"?h37>.5Sd,&r<DABj7b#<c<54$c6p^0%k2\&-%XL_pD,?<%m$RA5D3'gO1,(dX99-7R.SZcmLf9!asCMJBN7b\[Y#&"ali
%lXup;=X6.lDn75S/ITm#ZL=BOkl"]!G`]TL'MH$dil+PaL6I2-Ej4lCn:2@NS1Tpmj[?4%q-PDYlan6f<"'s+D@)(14R!T4Ek!gF
%)5hpIph-&$r>]RpGC'Df)S&WtoeE"n%1n%5Z/V"IS>M.jA,#YH*Knr:DD>X9O^QUk?K!(rU@,?'YiO\<8-JQ!B5e>pJ(m`AV7pY^
%P!k"D107M"8ar=i)p;G\l9)Rfi;rL4B(O\9YaBDtWclIC39LlKK\lDl7%Tu&!Wc8_@8p6rAEetQMT!2uA.N`s>3$ZF8jp5m&<U_e
%:=pf,f_]'Q&H+1D#rW"*h3;Up\F6fNP"C\g"6._oh@+D6=mBm1?0Z:,&$''(4O[r[H%1e7mYPmhKVNORd$EuH#R7AIe'>(X7s\hD
%6=SfKQ7kuJA6-^9p[)rAq>7SSUG`u9<"X$053uHaoI-sGBC2+p$um0]Z_LM^,"<hYe5h=lK9Y0`4HIh^QB,E<:?unQ_+['k;o/?P
%5kaK&f=g<i4R=QoYhO_&L-8J$jcm5gk_Rme2HlHR!7F/7hAWF8NC`>e"OtiVEk.&rdat=$Q0+"2R\m%"V.8)\g7;d9Ba="s';/]#
%+DJ`YaWP#?X$;HqVOF59@D4`@:tTMe%Ont6VF[Wr8YFA'&BNU]"XXPKr2M$mQ<"$7Ro9a0?P0SC2Q?jCeigW$R1T[F/m1m)btNp[
%Bd['8:lg3N(A9LSbt)bT8$Lpt5kMi[`X%kC/n$6=Z&\kLEUU%u,IhL)ZdF+s:9'R[?d.3ZjBfHRqtgAg33__7ac=ngMiI(frFEmq
%BM'B,718s)OL!#U8np'2V1Q<=DCK!nO7:heVS,MK/E$i&F9Aa(US,0IaJus5B458!9o(cB!WHIj#!6s25,'DPDBSjZU,0DQ,t#1V
%dXOZjE[ZDTPYPg3b3K&eLEeijDJ1W\f3*G.1BSb,UKYj&.D[=`lTbbB$kuJ\%*qlUIZ3+=+CFc?Sr#Am:IL[9m)".o)=sQ3CUi,i
%>+<%=^+6N%Uogo(/2B^B&*KfG@?XV3LF9SfaJMEj=Qtq"cW$[@e'+KZ(kp9cS%L4-Io2o_,g,H5KoMAu1X'<.&($K?3@4(XDF:e<
%n^B40IC)^[e4[/i1iRX_ZWGk0[rmQ$?.>7ELsbN1N/`X5Qhl")qk`Ga0aMP.WQ^$7"9OSPYBqs/9.euGU&uH(mq72/m:&=Jr!Q.7
%D4[ZhIP*:FG>H^CGR1PPBqdm;U/`NDV8jq"g45[$c'(!cO[/@OHI76uLqKjX7;8KYHRI'A1-8AU9c\?$,D1bP-u+h\34[mY\ZJ(B
%ISn6[/XfJ3\Xp\"LR#ck+/Y1l3;W@.<,t"s_PU1p=iFL5+h3Wnha?7nrh52YgodWLLdaWG!tr-2&_,.LI8J:ODL=m+nfZbT!cBVC
%HB`]?$AT`PW[ZR*P2^*(Zf`?e]s;\/_rG8=Ne7)Be#XZBPA(&=&Wj,*^7CgLR[u9q/GqDWnek#XTN$[onVu59\EMh*fnAKq*sPAl
%*Y3_.3]/.jEnYgo'#7'c^*I?sS`[Dm',Tu-Qe@@MM-;HMRQljcZDM;;Pm7>#W`j,>M'*#0_gjcWAFTYlfh34.rB<^W!\fO]/Bgp7
%a':Jb&LAKY]!,'d*HTUe[KYlG!MBk^RjYP"(#V5cas4>4n+cR^\!:rGou\,HqPal#8=5pj.S+?0WMLP5#_^.)aA84*X\99?B&OsB
%3E%c,?tfY9naD$I<[=LA#uag1ZWo[Tk4*o;0<V?gJl<c"(gJ4Kr\6.BVdNE-ZGL^ONe)nPd]C0lXitL>Yk8Y9:)m732T?k6]?2N:
%A1,J4;M"I/`Q8E/>>9-#,Fc0PF>rYQ6pHGb%BsAk#Z[Rm>QL.l#UDF_]G\h?/[W8uBWmGaaeAmY,W?\cGG>X,!d73UFUOA=B=87B
%)`=s_+:;%`!1XBt+=IMM:Q5e%0nihR(U1c;B5-e*_aCnaB>Hr.^]_dsaMoqM06I'b??P`rV>jiCX]3i9Th5@Xl^^f),L80=+0\:%
%"W/lG!GUOH7J$o?Dp5^EO,ghph_H<ES(>YZboXNr451LtmXlM;-p/Q<&ebo`d_SMLS?4cYbma-.ZtJ23ahm!UL3fQR838=4=E+FG
%#Ts/JB45mK-t#VEKqWDRSBbUT6`Y)8KC"Lm"lNWQ2EA(9STbpiU,-9LhY-g&8B.AJT<6$=U38KlBd:9q@kJficVtIdXIjqf%XPVZ
%fb;I-Ob&d0W/;c[O0J,KF10l'Y[h%MNASrkaSW3@<_#ANc5,O[YmN.,Lp8IhW,Tq[^fs`oM$gUt3oXO9#F1js4+B0%?5*56).+m?
%KKQ`K>7L'Q`SYCcfSCc64";f-1^ZD2FF3\hf@"[+VcNn=rf4AC,FVhb%I-X_Ch8oL;"4RU2Y-3(W#&^6T10eUWRd=PKBtPTP_,ZT
%ITpSCAWARhqqZ,7GK):jAMmaQ3%aoR?jgaq577u#L80*FFP#@m82L)CM+^6?(U?*<OoWaX.?c"[F4<]0)\XVh7ikprU9&Fr[jlpa
%?pt'K1CB%B&&4+iY><((P*]N)eVKP)R@6EgZU4;,i`1&g"9(EPIq(t)/-'i@hl[8c;Z'P>)Iag>4mmGK!>@K:$,T';raHf7k540&
%p+H<j`-L<9?bpL("V$0W]gE96[>&i.LS\NI5$<J,<c2"QC-?eV[k;h?i>XJqklU/h<5%-"Op#,.l7k-0_4ZA_"I0H"j/j5%jI*8S
%l4$*FG-3BK^=@d5)-ohQW9,"c:tHHQX#lVNQi>W>itY?"r<S=T0^[?SaI+5UX4qp*@LErPh,7B,]tr3P5J7N_h'cX#bkDBo^AG!X
%@Y8Ut&Ob*s1$]]G,'p:i*-:"Sm6(0%ZUm2+1K,70nk<Nsf*iF?*lJ-jH)_IJ';EGqnK'*tTTTf]&<mOP#a%CUNr9KPNeA%L\3!DZ
%!p^!m;9>a><0F,r[MZS*jaBleXAuY0A1)Q5(Ku$]R5SBMT]Fd*E)"R5']Og2]eLSC[G':)[B@RhJ"Yu*>mD,W>2#"T:QVkF1/:"(
%]ISL::F2^G6<#(F_68jEMA?spQSsiY"E9\f=`iI3&3M+E`B,,$-h9V)bnVOY`.Y)#l6e"N4B;pWKkirQbedi@GVp9l9ABHr>_(B!
%eRU3qqt4c!nQ<u7HnN2MDP&>;C*qFE#2S=0#rc(h[K&O$6t]F2K%N]j55/R`LMJ<8T+(nC6^KMIGG.t%]8`iMfr1-.N8)5I=59dI
%0%JLURPnZm$MUm2?-6dr"D(^c(P51$A8Q54R#LRJ9kPh#..?1VP@'`DesnCm;ge$2\f@9,@R]R?X:F8UKo+;(Z7%fjZGrt-IUVsR
%,MVW%c7jJ7Z_k3,-i<6ME4,=(PO#7QY[M6+dMcr'eS0.!g.Z^!eBHKqKS3-K3Q*R`in@]1:c6p/_.l,C/7sDL/PZq$FTZlJ_C&&6
%fq`dRU=+4c=NSRDc*gPh8BN:)dQ3J&o9>I#L[-;sA)fp<%aFsY(f]_P/Q8"6JWC#Cj\-0mYWs/nPdaT7:7%W@FU3MMX/$=p\=R@j
%Vp.ita(7$d1dZUiTSk-6&9f<Nj=*XLbCR5a*D_p5=nh=t\N`7d.J^bfPB?r*&KpEm2F)k8hcG7?HFZ-;N6JFdG.Y(^eV%J;2-oVE
%530A$dL..bJRW_Ya)/bFpba-3i+h#YGCU#?l_:=j%G>Z<aX"YEDtT3Qq^(Sb0%R:W27Vn_$b_A*.W_fgFKF4?h)\Z+IR0$N?_XNu
%o>Wcg<nR9]:LQHR%_o<V0"4DYTm;+Jdf+o9$dKHqgL-;jEO`6=%tk]fOBsTB_i?<FFiJ-q]=7j`:\V-b(Nlm6S;cf%`0B%W\U73u
%qZ,q8gX/p4+A.WGDG6<Go'-N7Sl<r\OgpouHfe9ne:D7\"cd/i%?)*#e7#1<2k;m@&72$+.D#SjPBP0lW2^otR&PF)VW\F<!a?]Y
%aE26dB2\-'WB(1jWUpne7P;<J%0ANFaNp9,S^<esdCBdgJW@,I)--P:(0oYe!3QeJ1gLbm$lD;&%koCZM880b6?sCt?XHgg9%'D=
%0:_!qj"8iESR)`Sh2#BB>#.iQ4p3eBbb^#eNc\A(.Z.P9(g=`n#_+egH<I".?*NI-$Alp`[/h(!KeX)fZQR.'S!3fdY]-%nA\s_;
%g\h;#Va(WIat]Z*Y3LS*V0V)=02C(3;6(3>YTLC\*qmh%[oIZ:5k9t7QaHF$gf*$$.-UUU):Q#<q46aWP=)8Lo7@D"&FB[r,f;DF
%aFh>6Za4Whns2W<,@?:6MF'#)&,VZ``[aKK20=Tmb'cB4S@(nHS#!.ILb#NKk2,l-D7=r[$RN.V\dT_ue4-sq;!WA]%F7r`ZJ;LV
%(`9Y5p7.@OLNgUt<1Lb%'EWZi?4Mud$<+*Y!^SKq,llIaNJ@!?DS(Q]:]PnDrL3S#_-f`o*Y=M0_DR6e8;&+]!Y@Ofp/-=(ae>ot
%BR+1f"tMf0I3VK]7"qW<,'FTl'\Ga6ciM\Qr].kK$<@c<;X_<</gmq[B"]dSqt5#ECW;,\TL].Z=%Jm9V"rDr4$u1L;2o"5N4`5*
%)aI_o?2ds"e#NoI[Z]riB*I^#4Jt;L:qCA^q@n0:_5er,"5$6&P%!S--(Q_*L6;e23i'"YYfP=K3UUkLW>>j\6&=g1CtioN=W7@>
%=G(,;Zl>YF(6)F_(m[tjs#QF_Ib;NF?&O)NTN$\RG3lA>'T941'!G7h7RSDMQn7u(:+1JF<\d*W0t/qF.:i"!N2IF%$/`D4Osqcd
%]U@Rm<kci>[q+&.h;."s_SQ[+=iKAai)5EkS=<iYF12-D+@`?0jq*nP;aX\aXb*1!gCs;G`\dfr(%DO%L4ECBjPL+IK+UB8HYF\\
%C-jX1D;i1p-$Ha1YMDV>I2HQ9HZ;PR_uY8[$<#@N[_fCH76=*V-m0-'Q0gE;E*Ia9%"G^Z9o)tsI@CEJ$=(-L(iC+dRgZOV>.$El
%*(j[lE"c0kluN/:Y&4@6S[jTISJ.cf)/qB5VFiK"R-k/Y(2#D@T5#;TU`b\.,duWdi6]YFq-A&7Vd^a%`B[:`&^mB]@Kpg5cm67?
%S'f[`A0DmNN#5XqK#/3Q1Ltc=g8fCk(W.=`gL3,QFD_QQ1AVM1>!^jn_;ckmJ%=p9>`P;!PI4<V4itgMMpFiC]h-&Li(bRDVM)Vf
%PlnFh;8bZ,4B2I(NtQkGb\Wk`@_*ggM2"LV\*^Q@B&QSh0_*fKl@\pA6jPllgqYY-Qs#gHeae*qN\<G2c\./,-c3eDG3FFs$iDr%
%N']:6F9;YeaX[5Kh@^(9[]ZI4qbYk'1_C#OBGaUOgB8+O8fkJK;_YsXg(Kj14h9B6Lk8!iYVCGkcL]Q>FnZD!^#_Coh:/IA"X&cW
%YV"q;atUsn#Ca>F6AmK<qX3`'*o]ruAj9fNq2)?uAoCL'OuS2)2=D1>bhoL@R>-%W.n&H3.![lH0U;[U#BLI+Y6lTN7Fon]46]o"
%_!fuC6:DlV!LH.-F`U.eITA^qX&.eC<%;34,;H*R#7OJ:McjR"a"uVfgr3EF-4._RJNTP]b6?>17q>FZb7qr5-S*6&&f<<bc&^=_
%asfRq@m6c$\lF\`gL"JJh[hKnm#Pdq=7$0WZ<^c[2:3cd]l:sq7h]<:Xb+4`KRWQ^Z#E'#-+4U#IJ7n$Vtl22LPP]fT/k0KR7,'9
%4m4A8K0`,p++X]4%5#"oV77SJ!*PJDLf"1Han.ueQXnmLd#RTFqVAA2cnu:`NaPc19Nj7?=F2R/nI+fWnD[D10qJ3'61JUMgd%X(
%R`PtA2Bg@*)='9G0Md09UU+Rq5GcNc@Ek8c!E<#t!uF$([U^%!KRM;%'IC=Vb*DAUcGPM2Dk!L0j[+KYpu#/t-<_as&fE@[jl2do
%0ou0mZh:6Y;4EqL`DtYUVr\_ho=1^6Er3hq]'37"A'2.qq#s\@]g?mH*4FO<n:`_/0bXd:]#g_cS.&'k-,<L$^O2E=B7FK89"-)9
%;iDODWa;cDj\lPo%hm6/dRT*9$+^b=KGEJ/B!#GPblB*dLFGfE5?O6f9mWa7G%K'+7[%-Rnjgg]q5W7'hRrW1&/.WoQpq6<;fJlT
%.*kR_G[&S*=bKsI/u@X8,m15Fh&LaIP3`O*fVDk@<'bFbaO0f1f"fR`l*I%D,H<U'e<95/D(K@53V9'T!M;jggS7P3rPX/GD/p0-
%#[s>)&1n\S`q.fU6XM^NrO\^%S[GTS\36S^p1n<Xl$*q8CX!YKHnq6^k%<EoLrr(-R-#7Jqt[`+i%C):X8hs(g,#9IUTi^0d6$&_
%+[5-BKB]P'rk\emXBIOeg"$;X(rL=i3_0Y<5WSf22K<8H7*^)W6W+\=JK/$@1S'$iADIc@qmtNtgqE0q@=;b9+?sC43Hjf1?+:AH
%ZB1`prMDppk%"WF?'Z[-W--`,bS;4O;r(iki%`N8];\S8G/D!<p.RDXY'PLo<st>QnP^`9&C$Cu!]]0^j9GE(dgHh&FKN*"ZC9J!
%5@OUkXBF3<U@]+&\[qD[fGl7+%((QdK)0%_kGG6apDZgupm!#B0q#&&T,%"-UH)"YCWec\psnL[c9"^Y$^Y;.;?D4n;h/sh8;b`c
%(eMIDfQQnt2mPGSo2+Zjbb&B]%1nA>iU)^Dr1a"CH+,gea";d%cRtBAq5)3Vi6hg3a45O_Pqb0Z\\L<!\MCY^"-$"@Wad39+fW41
%74I?o=Ks`7kVha/dC1E,"%/uDIs%5CdN]BcE;\ZUE*(\ZcJNe$SU^?Dh9U<B]%^HE^$Wd)I3OYK09:_1O14QH&7pkPi&5GA"f2uG
%c"pB=cc/t,?AWG=B+si\0GOGdO>5AGB#f^Ji>6bN-E#"**#M54buR3]l$-Xq'ml%6gPYi;?oLa24V=KSC\-$>4gp2GNWMIpnV72u
%p%-/Sh+["h4^%`2rLgMZ?34E!+rR0,I'n>@r:P:[0nXe65g,<WH81"mdtcc!q//O%"\K:aFZ_Yl6Us=1k.>u<eG6DPR*Rqni5@#s
%9J>P-S`V^E'Y_rsUTV("DTfk05H+FGJH\U4ft)`X3b[]I/?#&ZSgS^s2ioBj"=1/TCn#g>qe9qt3*E^TIiAZ?V@VpIb5Z,)MjlcU
%n;&2grZ]t!Fkrnk?2?O_&A@VUF;gU;ob^''eX#u>V!k5BiljWQ07#YM+Ctd_`m&h\e(@^0)9!%Dm??`/bsZcXm1q!PTg23qa6i3@
%B!sb6SkVDqc-hqR'NcqA[sre]c#is@PBB+JmH\YnEVI0`L\6'h';sIJHBEVKWi'W:fk]m#)Op%A^H&ASX!qUT?O+@(p$:;lEba(>
%Er7'j-'-XV\s)A@XG?KBJB-9t?K:I%0+R;(M&+8*J6OK#89X2dJb'(KEL(^Tq"gH0J']qnY1INeP`.>;W*7`#2F6]H&b*nuCAejA
%H/tsY_:bom&a9CK9X)ONn_Qu+q`q^*(sWHef'-X%:Hisl9E?60ik<fFCsuHCFgN(PMa(b0:OhnWT\ZU?oXg`dUlqt#IR[t`XHfV`
%@6*6;GC&#MjVX5GE=X+9:9$8Y4N)0^`C97`EIm7:^6nJO82nN4A[EYqGd=XD9?fSlQU#W3fp%VO9tQC$>=$t;NeZT[TW$F7H1?2=
%I2-'IQtuQn6fdT,HLZ,:e*VA*<^5O,lh5,,n\,fponeYPrUJ##]MP,49R/8Kj=h8C$fgGJTG/!>_h)cE=[]oj^ibe619P%E^6:tc
%]6:!aq.\6>L;P7TB!1`/h"M96Qa,.57sUWl8i:I3l:LiRRjhibj8SDR<j[fRs%)gV11SdR,r7!ZCsTR#PhDLdQ*Jo\D?ZE-X3t2%
%r&OZEG?,6EMRgclL@NltiZP`@AWM,8F@d2JQikK8/Al3W$6X6OghV=75?h5.p8GfcMggc!k"\Mnfeq#2ic-"K74nk\a#M?h[pB+%
%g5`-`)QI=sjHke_ip)"%(&"?L1U@\_-f[<!Q1`#]A0nXkrXLY<g;@ip,W>+pC/^?/DD2srO08V6$V?f9Df1aDg!"3?5=?g-NUsV"
%QICndXa[e/\*Z,!j&IamkS&<kqr9ftL\jkcGAC+>M]5LaUkc1V3!r?IO$:Z7m_CfpP%W[#_dLiWMUqu-f?Ks:&7sb#K+SO-A_PF[
%\qGO@n7qXTY`5<2!&`Ik)FE\#.9SI`?<fWOm3[`_V"X>6<;dg.p2)2#kss'#59-B:#JV`pJCPuj)IU1h9F9"N(k'b)AFSB_Z6j2=
%7ZS"\-(i6VNN'GKeujjY:UG'^Xe]qkUK1?WHWrLq)Z"?MnmQeu6g6Lk0p!B=]b$e&0Zf:Ygd^hQ4hqj+=U.LRf\/(!QU5+.[ES-=
%#+Q:r?3`CZDQmsJl)eU/r>c"9p>XhW;4X2?1TEXV.V%4^`&`h!-K%jin9u&%6'&FipH>"kMs.D5n\YYIB/gFm)maO(dbbdbT=lL"
%'l)$lJJ['sbr*_EeO8\C2UOJ,]Be,#7_s]Kl1AhpM.-5XE]3;0>T;l"LK!WVmH[NEe*im1I_aFaq(;#Ap=bV*G6+A_05!aghhcdT
%Z]tcl7kb30F>fZpok(TCf'2MY!k`h>=h^n3Z50$Sa.N$7TT8L+DiX&+lDH^lgO=o:?M<BG51@\Mcbi,8oM\Sls8C]UJ,\J80D.oM
%/`sa,SE2_/>cf\(BW6U1&emY55Xo#FAR4ILed^.,>^cZ*G0K(g>;TeSkMl@Hl_Femr5?U8KTLZYP<_[`:GG*9'BPt+ZrRO)Esh>Q
%,O/*?ddVH$LAd>%@tuYBSLAqJ^*a*l$Kfh+*N&MGgOn>]nFlYSgYR2$C]7LdSke[6@A5XB+)I*-lY@L[kQ7$;2;88[kM>k6q@$b.
%A$R$e7i<[IUTTO;lnDJe^ausfJAc)f[l&`sOZa]59kiEs=B$*Kl^b"*X[:6[FrrAh*;"Npc"7]AbJ.3*%riH&3=f4g@?4UlAGLnd
%@*gR.30=dVK;naApi>c#H6RAWs4EM0i*qN+L*I4@6@ooUVmREcW51Ie0G;!\fK+[(F8SuTnP&W)`?OTg8s]K$guL_Eb8S]E7/Qg/
%qCkuM7FdO;Y;_C0q(_/#U<;aM,50dKTp%8'\3\%@Q7(Up7o.-P!N*OOKIgX@i';/iA`>@&-E7fCd>$)2V$$(Zk&bpu2b)lfrUiPe
%@/_mk_iHDWZFSeu1(,<iP"r%G*$W\l]#9u!'=(fH$#QC&PKr"$LQoWNE/80Ei!JEt_'ClRY0:K]ZPZUYDfpdrlf/H6%K+5m\!/@%
%=PnAAMmN&o-L-!30mLtpA][@3#XtQ18V4-=QpIIH)d(`@+LeMn,2DL$Kcd2<kE@"i`X"),,GY,eSundrj].G;U7+V5P0F7pOeDUL
%f(300>T[NIY0>8Qd,ue#&5(tkRQtC-\+lLhc8o.R++g<<)O6bQXY'*DON+=(r30u@\si8J-+1%0:.R1B&Or0k,l;SSpPij2&:mFa
%#?X3$AAPT9%@WboS@sETMgOW4IaD8i57t-rcs]!tf(%g-h3H$2\dHT!!,X\$<]q>J9=><r&cs`f%.==0RS\?'@XGOp?#4'CgcA+)
%Z]*2cHN'q6`P73>hMc4@]R:GgkI_;JgCJ005'K-@nRo=DpG^pAiAKdX^'b(>1&et[@_$bf6`bjc#87\n*H<%oRS#VO>n8;UOrW:Z
%DO,-E%Lu$KDdS3Q&[_GjIW8RKK2]'[a.G695GdsQh(6$B4;n**\$+KrJ,bP\p1Jc>-MZh,JmJI&RA@TG1U_N:d5p^=9?ZS5cGfmq
%K@<o`]D&U"97!PalM.]+)E3(EH#"[D`r0;SY6qJrDHe`Rj:c[?H[K91hS\f.lU&3V)Vc?Si,%i0Wdr#(8poN'=qdk.QN%,_V-GS\
%=l>#VfmF[q^JiNLT@4ko$a3@n005O!M[\e[CI]:]iWkJs6hM3#b0t9H'7]\"[+cZD06$g"]/REJhE<FH4QX4cRrE&lJ>2Lj)(DA'
%kpIuCf>Z&DS`&TtS1T--U7j`O*BI,-HocZpEe;E^ih,$R%P=LsoD&nIoI/i]J)/@krnWdgcZf8pgIp>8mDTP3/mRB2mAA`mK*qJH
%geUtZAK4&Snt##'W])Gn[1TG\?O,9>f<8hN[n5fTCt3!ej8=$Ids4p=<^#C.lY`nGpV%H!opKdXpr(PFi;rn0k9(%=j@)QE1e0-Z
%P8,A(#^sKl8,ir:0kp#]`)/O[Hno-%_U4?jqa7<.Yf(V[[[YB'bKo%H9ah`6YD\YqihrEVKqI-rGPp"Y%?@X'Hdum:@<`UYn])/,
%`1KVoH>"joW[S8?R2Jb:.l,<U:Y.f3R<TS@IS;?LCe`0NV_<WI1WSeU6!H=C'YB@f5HCO@3IfZ*FSj1DF[+RDg\0+2nXA(<C3WfO
%lMP[^n%li!TYr6;@q8[5FP)H&nROYpg0k-XLTb^pWd4>NgZ4>+B<<id0H\2VHsM2B6uUZ:nSV^cm\WjIMauY<qlb<j,&'^JOnS]7
%m=;gD&,Ge)al:ssL4h5]%*mF"8:=u*f9&c/?I0qo2p;Ou9nKo)#Il\,H&ct&EktS<=B;_)=/3Yo1nu0Z-ibS^\<(3(?TI)C8Z2sL
%aJ"'oJ&6^6/]qA7Y&L@HBADn5OZ2f-9F]!,m%-@rBOD9-ah+D5A0[Jt`&eAI,eC"kq5s3ZkA=#@(CZ"o(u<^38>(nSjph9f@*T!7
%R55+91@h'*mr'NY7,k2P%Y@[GfIVf>UU6$Jcl@?kEJ)]U]=S91e6!S;Z:pc3,En#5M\'^lB'EVs]@)TLDqIbR3h%fg]\Ojk$=35&
%%XqN$NF"<<#qpqJNOUftk]tOt0.bF(H?Y!hnO.dA[!mUM\p.Vh`P/%\TSZ%6#LY/R8]Ko34-@V%!Ms*9b25b1/V9HEB!]g*!2@3k
%p2P!l@$c/b8Jg*P?J\5?iuqRkAm$t]bV]bJQc,Kr52-uN5\R7<7/HrG.483]rC^E9\gPAXq_S-1+$-bnO'3P5*eW1I+<o#u64V*7
%Z<[FA"T?lfg,er-MGkW!/NdGd32JqW"^M0s$r5FXm_o`CGs`f(XC*MXFc.s'oh3BhVp`h8\Ft.0Q_N*+6ns!'J3r+;aPT*jIto[Z
%D`FnlZL(qnRCKm7<W-$cMiq5[BXeJ]XV$5h<RjNobiUAkQ\Bo'&r1UoE?^B3MEd7RL8biCjEaPeF`j6i[,S,/BM+9i$5_.EOet&X
%%DeelRC&d)X]!h].q]VB#&m9%!e`"S%?_A:K>W?Nbq+:O@nP>LAC>4=_@+*fnt[PjLe33CGT@d)/UGE]8ap-g^$JJE9lNHsfU@u)
%baDnAO?r_"OEVpuEUuE;OOt5;icX<3O*KdT)VR2-E?t_+k]O'oKU=l+W8;-jZs[]rgs!K4_Cu[caCU_u("koj"9MX+e6BK!_:>g2
%TB)XB/6$+Zf(N+!L@NnZFjss>@d)kR9S@!^NBd2*#QVe*X[>C4iVr5I<PcPI@/84WqRj[>HC/7BGphf$S##"q+cGV-4ZbscX<"k^
%CPu%,=A?O!-g0+eBXO]T^]Zqn,ugWc.tXcXTHi>.&.R&OiVomsE?__ons.dHpm^7b1h(96BcS;ichN]oeFAX;qnfc9Yd4"cC>;2S
%gu"e-s'YF+dZTa/.:B&FY]Vq?&lN"1o7WtHj=nQ@!"F'a6EH#4QU$dljP-6bHi>7o."h"V;NXLb<b7CZTch[=ERTes4)6s3=$].\
%4rS_FU]+k2/Nj";_W^s7%%:NG-pi(]SW)/&H:W/>"q\_1U&go?m]I\C2(3"R-Oct;]JS2[#V7a_IWX)$,bo27mH'?XJMiWNkeMp1
%/!_g#e<n;o1GQPc"8VZAfRE]XX1Z^O^nY4*Z9YaRSmnAI?N`_M2RW*4gld:46\39#V2ihHoR(3C/IaOW9/!>)4%,IQ$D?.(1b1N`
%,T(+;%C0fpE:JJ+_PAsV0u%,6k7ICu;[\b,?s-*&/V<g7r)hd*GK:8<:Ah3B;SpVZ(ec$:fj&URV+Gnn`EK,%RR9UMh;B,%*sjS6
%DN4urTK*@9*+!%[IGZ;L+E%NkcmEI'8o2.H7SR:e(TWNmgj)1P3;^[p9eIg+=PO"cq(FWk6%JiATCehqc\q0Il^FI_>:tIF>!(3p
%O?(;5U]'MCr'8bSg>T5r!=667+%W;`\`:L%rF4T,]^R#Q$!ZA)5d@78`j39r8dXG6YsWgtfZ:i^'"J'N/_#]ge=W;/5b#ZMRjBcp
%%gG?MF15/NPqOt*3K\lu[0/lcEF+3=&"UX46l]d<ZH%/1dmB-.=:g(mBuI=?`,o_\/dpc/24pjaW#9/GJ4qWPFdQ%WP(OH=/O#n-
%;Fc4DVjW!Qq2LS/j)c7K`7JBT-2^$fGYr4NI7K6I30&Q"lP-ARF\j@%n2GE<2fg8@?kVK1b;AO)el]o:%DEmfK?"5[GpU-4i,YU]
%e"`2hN>fWJ3!&7&pX_%3=Sa<%OD4+"kJ0o[6n&9:!]Kg-05W(qPMVD$Wo,]hcT[Mn_&DD\a&"H.N]q.ATJ1oE;1PDQY46.1'[qX:
%Lr>_u`iB8baU;FUof\uOWCs+HU:kf>JuVE@Bj(<'A8GmB#SNJH%0s>J;NW*&bTcb@'N4:e"$JXWKITrhmNFUM_bcEIKOBld5q)E)
%I;#adM9ZGr#taMi"R<)IiM;.l*r?)Y*2`er)9G..J\AjO>mg!7PS<@J_DB39ab*0Ypm(i`![+r264s@?ACu4MQt//sNQW([Z6$IO
%&L@n?PHsob4S864iH6,J=4OlXcln[=!J(ST_]pBJkdRq_b3m3]JWi5g\te95b.^fL:/%H0YuST=-:W8#KfCaR-hU@O]#OSl!E>Q7
%KQ-i+^ZRBSW&J#AJHRMQs)Cu&_'M4bBYF@TU`/1:"E>l$[$.:]XAF*Ym"9CNW/=o&SUhmm7@Le%YD@kPD*035'#]b6K!C?R]B'2Z
%UeFF>DLu;Wj@iHXh&s7ER2uRip[@l]HEJ?1:#CR+\TEQ!='''uprK6Z,&bh7qMnP)9oCN$nLHNXjEGSt-)(L2r"1K?C)`3D)2H/Q
%nVukc1i>O:m#>(4@G$bLi?T=p9_#@R^%tPGrkNXqfm4n]rL%W4CUAdeDlg"Mk:7<R46r-:L*MR>BL79NX`J#NX>09uSbM+0]&#Vl
%Q$2u*e!5l)gc=hTP(5j%%r8_WHW0Nni3;ZUK6&+c+VMJ^L@Q8A2t%_WLIeHd]usf5qEe\\S%3dS5Qc!q(.m#_lc9U^XTB2l,7(aG
%a_SjqK:1tNe29#o@Q`,**PYc.PK&8l-$nTuF]1'YiVpMD*m7>IPdH4aZraOIQh+B^^ANjDk*'@1&F-_S[t$u+)?qs>Vd(mE3%i:_
%g%PM/O[2Kt.p3q5;$q]f1liI]V_-n#Qm>-`+fZcr):ff(%\UV(8^bkhq3FrJ+Un9ND,[gf+jD%kED#d'g"$GC"j4Q8?i[=m8CBgi
%UU5I.J1$[*D=Z&$mN?"5D7-kWAdZ1`BK1p##CJpFjO@_T)g%?j*Ng30F.GnILb*R8B0Y[#qCJ))ibhtPZq]CG#o$knfk@DO1NE<O
%CIjnTal5gf!o]1:fB`unhD%d7bu\T,r2\;6$@NK%k@OVcjrFE&KZq'(5$jq_d&+p*<.t6s(P7FM/Q-D[[1'ibVCSZgY6o"nE0A&6
%YbS4\`$1)$*oWb0=MZ!k)l"4-T.ur6K;qEnS+`OCp%sZ%&5JACimO`qG#7B/+5&L?r7_^9;^5A]5bA]r6KM*['fDn@g$G(WUW56Y
%h!35Y:a#l@bX<Zu&*p);'(^Di,fl]"=5X.L\FX!+=C02o^2HG^;\b.@<W?4f20Q#:7c;FgK10g.I'c8km!]!g-5taY=nJuQ-isno
%mr3LX&:miPUt3&XBQ"6BFC1@T<896q#Xt.\lGEDn.YL*+_`DHn^_k3dBbk(WbREVh$;\-k/Jc[IHI\g^';fXq98Vq/!s'V\^pmd(
%8;Z%$11tRMZ"E>]`6ZNT.54XU?@d5eTJ"0[ab"lmehW&VW$jVsJ-K&$J(W^9WE))B2na5PP=PCk#GG5XUD2NQ2*92BTSNqR)I$)o
%li3k&'qF1@HfAHS[i[L?>OiSfp*ep!e`UC"0n+X2hq).`N0X\s8GqDi9J%;X**ehELSID2AZ9?A+4-%/nH]h-().Bh"cOP2\0V'3
%pg_ga;9ia?Q0.l*8D,#96E1_$p1t)tG&'d:DQjmQ\e,Z4e"uh,KG>b+DTSM&dnicp)TC$X[TMIZ?%JhBO,L/13Rld!(;%W$Y40kE
%5fAfiiFeA2>X94&dAo]_G^uS<mpU):C>]Y?UNTC&A_ZUWBC7_124s90+O!^0jba`C'[jSMQ-X-GqH0<('+rBbi"CTG!H`]pMR.Dc
%lH#-.`u\!Ioe)A=-;>=B,Q`mKTalK(lb7Xo<m$;"j4-6i%%Mo#,UZIo7@qOMd-.J]Vs31HT^nlg`ehRh=7W_u5)]no(Ugn5+Y(.P
%4di-:CLF@]R]QO'=DhXR?3:aQ9mJhk=TrWP2h#$Z6+D/nLgm8CWmK*O)ZG;L'L$#Lj="Yt*`(>N:kP7CR8bKT+@lp+P`0<pnre_d
%0Ok,=i(*#82Y^mTVUGQCZ5l'gDbO^VYdDNp)0\f-,+&(UfS\khph0l,C>TG@gm:"\XLX9*!MCQS"mE+$_c?$7k+;G3:*eH4QT#`=
%`Q7M)OO*Vs/F*@O`8t=I2kl*=FJ?RkNn_UoqYfj$g+:A[>5ojt4kj<SLa2$6Dm:')LVF0DU[0D1W=b@,:P9,_!q#&<(Vl."r@1cX
%WhK+!pp!d!PED\65m/,pat8oIpXpT259h%R\Oj^3572DMkZ4GrX`RL2X(.F+;1=[e]F.q+Usq\tC.jF2b"d_Gi1;3=G('7F]lcaf
%.u;oq$+@tq,Q(dFfn[67pQUUjJmiQ`$cgU+A#s`hlP,^5LoGqL5hV/c:ED)q_`#5@QEB,!^&CI,g"!B#d3Y<,+>Xh?(E<M?$dlXY
%8pZ"Uc:&6<(L_(g'l`Zi^CUAR(N/Zsr^AR_":IoX^DPF6URi>n@e$h8F!^m%_7qDSPEM]eGPW,p.BVX:qi"96[GYGkAde%]*p;Ki
%3'3#iMnOrclP?TT9m=LRHcZt',3e5OdGm>=]Eoq73ID1,Q:Y@J>ejd3@\@\K7FC6sml<Tb\Q[c!&??pR#&rG:HJ'%b$hmCm6ER6>
%VCbj>Bn:Z^ZABluXYbSUoVLg&ik"?5]F1$`eXB)f7^(aQqlXMj1Fe<F"s-#>5.+,r39J>i?S;'Jl443OI;,\Rod@SY71ieo&^RUd
%ZC\YJIRLcRF$oPL\0u@`kcQ>6ASo!BlmYQ^i8bn^7$d86`0iSfF?o;.-f`.m8j.>6:/<h_@XPuu?0m[h/C-<M3S8>q;?bTH*+ZW"
%iJSBF7$-n!X.Pad]M-FgV>Tp5IklL!^N`2@le2)&:iE0AGK`Xf+'9\4RY[UK/J$\KXr%iUl$m3WI&=U&&p=JhD+eoH!^@ks;g%RB
%;<%UJ1s`a6LJad*V9q$D:g2@YlR@@%Vj7l\UHIX\_T7*JN/Y9_a/pIm,([3%2_.A5*t5sp-jW:uB8Y&=aIaBlBEako8oS'LJBfP%
%Zf0Q6E.E]Hg4nn^ZJgPr%SS-MWO0%^NCHZKGSM'r,*`oC-,L"al.4Fli3,u-%W26&.k)-g$R9j/':".I)GNFUnHar;7S*O>$L//*
%X?%AWQj9=66:$BnB@+2?^9"9iHT'o?/-<qQIM?]FWkHW9-k8b'#=.am^9pjf<g'aQMHKo?brk(p/&j0E%BR?h7A49N1EA?MSDZ+K
%-RB]=,_$@B1c\FY)0,BXcI1^BArK.=<KQk_S_"/8s/'.C+!QjhfH=.IOjb52o"j;2'Gb:u,1>!^J`eP11GioVL=:0R'B%*YO.pPC
%Gb(,PD[@I__?^^5cR,H%RV@-_o'L@SbJjD<UZo947eeC73ZiJEA[&t<&1.MlE3<,P3JZCh#^"YPG:m+fk):#%^o9,B&"RT_"gkN1
%2HD6'/;on#?to*J:r_nM(=m.&P=o_"_JF=Es4L2e7mM2CYPFkmEUsdkZRU7Y(KZD*8]TM7'iKjg*85E=EM<^n"[Rbn5UhPVgOWsh
%Q\l9dbe+tDMK"!j0Ao$A+<U3[S:^<HfVD1eW$fC^I)6*fK6MB!rX_W407;h3M%^m,_"?UHYLW:U2O+$uO'Btt/P6]lU\@Ld$ij:C
%OQ\U]i9s"QiS[dLL@##4kC-L9$sDc8][Nd'kE&%I;]sBa4De=f4Rm&QHCd+m!D(,UT;W(?p<u.ud9i7r_7\\i5p]qHfg!8*gN`@+
%RPI/q)[osRe"V+9'@e64c>FR(0.<V.8]luU"<WOI:4^D.d6!9n!>jDT-!#u!*>5pWlh]UqHlbFcJ(Tg.Crd.)&]qT.]*o>uh$PEg
%,1"2E"@$kd*m'G#J4:eV";B:cn@99a/[`-jGm(@IAZ)uAiWdOZ:`@g!&BBd@#&CGgj[?><?nDh5/aM0lJ-n04j+H^mq+<QBg2tsK
%m4ktg`a4:5KgPlNW;C==BafJBo?.dX0#!u_L_BQBeflGQUUaln0JolHN.ZN!fTAqsP[G=hk:0C&W*HQr(I'l&OfS(GFV5HK_6AQ\
%L[GfiW8R=B-LF3=f-j8ANY9u`/r"nb?6Cr,_%(6kLh8i6m!U:AN=s1bi%bAcE,E$sGi]94eI#V.Ar8s[9V#4XRsL7-Q8IS*i,&l1
%*6W_^jV`uphXEiKUj.Ik[O;:DXaq#)C@APkF9ejQB:M0@:eM!af,rA=M;+G051]68?5d+i*2sEpa9sgP8HVap:-?FC**.'h=,ib_
%`c;]K^K)tU<oPK=L3Yg6=h<H+NZ]'RkkR^@C*JR2LGe*!_2U6IM'(FQX@7_^UbdDAA:c4a![cHud4,?M!I3/=#_)6Gqe^R4mX&#b
%(j=Tb5500MELk)qkA8`bf1*(cc'u'@-]=#>aX[G`XBo<uHD<dG'%nH?`WgV<iK-;2@.<%?3`B=P>t]\eSDH'"*C<([:&lor[3m<D
%_:,K_8bJauU.<gV2QTO%O/b-K7*5`_n?SUFd?TY\mZ;kA0TrDW=dlX6bL-EgTHEDQ=Pi8Kj1im'k\H8>"*jfBCENpU$&::9V3"Dc
%c0H%),P/:B1E#'^PZ0N-$K[L5GB2<%C?3PE,m];0;@I(rW>8"G\?#,"4`!9FUJM3`Hb*=AXKtXofm/5U1FBe'FlNpUqq]$om'_L=
%JBQ+ug;G:?"`*LB>E(4eFU^+=U_+T7FL\g4#a%U_U9&$]3O1$[Q-"\0!totG^'*X9!<Ho3G2lqL7h0'5Vb?gdn?+D'>WM>1G2Y:o
%7=5Z>Pnj@iSZ/U)8[M6l%f!R]FC<,k_'_G&A]_pZ$'9gLgo`\/E#5JRKrY4Hf))"[EPF]B'la]]'9TYg]@NQT'VUFeFW[\`e?r&9
%W.M-FO:XX>P=)5JkQUj!L#PH-IrM8<bh]Ws'f)mtVEC;'HQ\7jKhRfe)W2[;[h/X4Da"=4rgj!KZau9B,+e^bU<tZ?k\mM!lt_;t
%>o/%*,ClT6=^lBTC)=3ck[SN(SMb*1-p`O7La#3<@W!>&8o`Ytek[c6N/)/(=)r'U-JYj+]+ZTEHb)K_7PlY@*(D(6nRkOnnN)_#
%p+,\Z!'l58J?S%l&$isLZ'[Fk'1Pfj6`iYg#kC+oY^U05EeGZ@FSB@J4WQFN?47;fPA\cf<gGM(Ec-o<Ngs;Z#4\eVkd4PYdVdLG
%B%ft7)t)2Jg.],D*IGW=IQQp$i[he(<7V.7)q5e(?NVYFqgn`L27NQ+L/^-4Cqc]D'gt0=-s6YdNIZ2Mi7KAf;:#64fOc,.9m(7c
%j,RuVA"2IkUeVTJ,.:oJb1L=.!6-pd`gmhG`\qhW2JjM?:#D(-e%CX1=DdGJA>>qFR\mu/5J6'u7bd8D/Us5*%bm3.&YV)OZOlP5
%]1Kq+$2-"(>:K^(aOX=Q60\VXEF#?9A\5qg5YU6k=90UAEns9"Q+Sk\,fmSc()#S*P*Q:0pe6'</dL<WeBPr4W'qLf]+u]?fuI4I
%//j8L"g$eLK7^RJ(('YOWb\BR1209N%Vo!V.,=SJitlV03kBb7J::(Qs0ZlN8,(3oRSV;f7l?2lB.$L+"k.?Qr7F2\OUGOEG2`=A
%iVU:rT;,2bN2Vmm_%dCG>]dt0;o43ea>6p(6OpgZJ8r`0Z[p(OJ5?LWki*RB0dcIm3n%,3('Uhp:m86[]JijJp]eB''l,+V^qMs[
%kQj(g*)A5&oOH[;bJhkYAoCUt@W,2V9Zq\BbMSk(qAD^SI`HC/!9KF5,bZ\N>"gK1K5/];(%?`TRoj^6jYn^99XZo"4H^<J,LJ]4
%-$L!u7aPX&2dW>(ak_Ii9I4A_B8e=lTuo0]1+.lq\d2)n\e0f5cXnjS%dA+0:BD/W3Z%GQiX*J1E<9j+FXj8:WlqBcOT$S3DW$$m
%8S--N+Ldmp#lk'IY:OI4qBh#]LtSV#U@fu_.AD>?5IgD\'dXHg3\8K`L_$4RL4sRh"=sTYepX_qa;Ccr`!T'*7L-42CmUs;1_CA+
%KC6<U?SeVlL+d*&MA/Fc\KILNb!qB1piQ.m`e/)KS`c#16Yp3VbTdu.Q[n`'f/M=.:TJuYVoS:LnLJDk3Mmdr+P9Lh1\_7fY/2Sm
%:d]C+A_.0mg4U$uCfURq9AEs*ZYTmi&CPR8;U+Q;L2^7:8oP8j+cuYDpH/FQ&jf&PT5Y<CQcgttk%Yi"1u_\E^_-8)e[(iA!/uHf
%%'qoYO7KJ@Q2B6r]:<7oK*Nf(I["n?>H-A5cbZ@.$ht0qAX?us[dNe+6ocE[Y)'1ufF<k[L]]SCj][&/+mPnmnJ.%C_)+t7%.0Oc
%Ri2;,jK5f\XD9HmLLR2Rg=j?>+@;+kV,O>?Jq#PaAOr9/.sR;e[n2MS_c`83"O8((;^p8b^G:%us1.BYa>AVU'oahR+i'&LZ*Z-L
%.ir:F50Co:\>dB,!e8W8L0X>lLjj;e<m3GjQ"<$X!nE;bSMcq7D:F-Kc7/[ZAfG!N\6X>-lcY^@ERgZ_.g18:jS<i!:9g"rN%)[&
%"T'maTAR$7M1Cq$N)cYY)%ja\ahQC24#2f)p/7]B;+V`/V'uKI*uR.QL%p\`_^s*J"TeU6bYGpT$a)E9jgH\^HXJ8F=/e7%`LDb>
%9*[^YA2f`Z/(tkN3YpiRmd;_r7KJ9AE9m!IU`$7PlL7+1Y.EQm`U;._L[M!rd3NmDZbVWPqBo<[nkD@n7,J-@$7ptNSbWa$GGH[F
%<2Z]PWkU%'NT7sXoWs\&1g=]r@V/co26Q4o1U5S/'B`Gn?uA&&oa\nQah+'G:6+.dAgn[9o+dqfZ%K6&AM?JVb&CD^_.'q3I<9`d
%.ncEIM/4CCD<`XhbDgMh;gf`@HN9kSD\;=Ynl`+O9=M1VX^R&=cY7SIUKiaQ^q;bS92_Gm]s(MpjJ&XiTp3eC<^i.3?<Apd?Q+*Q
%E)*D9**'_FjleY'U&m_0?TACR&%cS:MkHF(GHGN:hPijO)lO+):P+2JIC`3A0[M2ogHN+"d/\rs1%%Pq6\rH0;Kqi&bT&h<CC>TJ
%OtH7cCC=p=4VKg3F7\"+dftE_Vf/)I,RSnSNhW*F\:?/A]`*!H=YeA*Z+$SIOHAWnAr8tn/X[q7Zge51B4ZnEeoX,2OngaVpkL;#
%MB-Pt`n,l/&2?l"EdiIYQ!D6$pLj1@pF#YU5NM83WLS9%.2ZHIJg_dU$u$X_>Ng@H%bH56Cmqu7L+<[(DFGYZ/(V80s%1'<cu'nE
%`D$*GU.(BtU!j^BTTFkYfW=W-IY<.cTgX5<U]19=Y"DrGFrtUdj(*5%b(rLBf5.g[!t>[;qGjeXV@pi2^$XWKWs5\qjnObM<4jID
%\E_.S,2+Y\6aZs>A2I/YHa(:$jccglh'\]Ok*Cb2;&qDInS.<$II2>MP08o$O-[m*hRdk+%UneCBF\;M6VJ9*;;uSd!r_t6FmHJ[
%2=.#Z,q/'#WYBo[dF>VgZ)X>53OL`r0'TA!!mGRfJ?8Wglba%F"^'81LC8&2hgd/#&iu2Zg2aIj?#<'O(qD1-U>%#Uk1-eEoL#5'
%g=;e:k5Sp`T22Fpda]q]>hO_B/eIdoa6aP<Z>]:Cg&VD/2mc,]a8ck`[?K^M\c$]*q,uHDXSk\@JWYk_Fh0*^[%5qR:26[rfE1\$
%Tnr.:*7DI:1Z.ajCL+BdBeOhZ-FmJ(KhEe`Q>>lBm@M#fdY:!EGR<d"6]!(nc7n>cnJE!'=6)8!XPC=HN^Ft^Z)_A2S<:i5^(ukd
%%*^*VZ8jB9pJ0PLN#t'?hRCW%LK@FHZV%,+=^&![lCZcqEOj][8JtpS@p=CkG,]d#oIX4l:7b31>`eiA2X%g#0:IYO;[:^2M#!M`
%o=e2mNSg\X0d7n`#=2i5:bHo20J&sD0%NMJPTgMS^Ill5V,?-9kAH`$:clK?+.Q@^.&dRImD"L[a.;F^O]bG@`$+4<p?&%GAkMZ=
%J^b[7rJ5[idmZ:J_hH?!14ja\Z&-G5\r?hIp!$M@0KcSoJhhnc,R`Nu\4?,"1?8K"43Y7!RNM\:_E%G%h!3LeR8qlr8^0FmqT!!"
%`*ShM3h01fC,=mRfL1DVk/5LlYsTX:]tP)KV=fo`M6Ussh^%brBN4]<of5q4)T-A=6+])K#+hGl<aY(8X<DOi@KFA-Jq/KuM^*C0
%YSZ,`pN?DM_eWi,aRjW]7?+74Nr&9!oN&P&2Fo:/%VKCnL<5M0m>6fG((*qPH<-q')9#hd"tfVnC$3klEK0<fNI+]3=GJUI1J%k%
%M3UMi7GNK*<J*b38c)gN3@!%9p7I=e5k2\G)3*udKL*6Tr,,IlNJq]tjLnu+5MY1`K6/]"DU3.QCJSd#HRQ/k1E@pOYO`ALXg$Jo
%^sUiS(lDYn+d]\cVGfP'\"B2NC>,Mj)9iI+<h9:'AL;<ihD]X4)lX);.$FOk:a?i8fXKdL9ocl2Pg<h1&IoBom`g4pq[T!jP%.`G
%\K6F%lpK.I^6-riYPMJh#7#_G?uPrDO6!"Shj)a^A#]]^7jO0?V4*u\o&0h0rsYiZ/D?^f<McQtG7W,"63FlF0*\IQl'&%HbnRl%
%fI;Ajn^$paG+,YUS`n?eOX%=Yrb,8c$b-]Y5>->D<tS3nYA2E'AQoi;0P&NID6G&OW)PUFRgZ2a"7/rOinpPNCj?!N`Xr'L7Bg+W
%B2_StWPbNh_dP6GoYbscXVAC*-?s2kg#st.A71stMJ6IX;u8arBabW;b2PT%(2dd5H?W,H#O&M:Rj,fT;`OP#4OEHIkIjhkhB=Ln
%SI6WQ#!&[ad)agpbF5M%0l?5']um?qYd-DNfg.1-B]JrY2A(/YFV?]00.op,0]Sh^C@5N@)o%<?q`EnK_C"%BVe2@:?\G2&,9Sq=
%9il+P]4M--.B:9KR<YA%U0s-TfbDbPlprgI?6VkBhI:&.4#7!M7HLXp0s`qf^:'F#g=VuG#XD4$F0U>>FYG7)090k4fp!/l-JNCO
%#YSFcYsr1_A7]$65\!G\5*TE8c,DdCR/l^L7"G#!)6ns@qM2U;iKm2&)L^5gK15MKF,=kE-T3/X+lK*6`XY:k9!iaRFA*_rJgtTm
%/:KQ0e1iPqEG,6IZaZ;i%0m<O*WW#`D]:0q+gWU:W2!mtVckZ)HuJt\dpOMRDMm,dUIjY!g7_6$@q"^:IW;h%^_53GXO:JRp>uYZ
%Ad!qPrtY+S+1Va8K;8A^W4s?uhDG@E?*3!qbsNHt[dm68d5dth2.TBPe&"j%2n=#rT96*BAR"5ZeNAu4C!osmgk^ej&!!\%S42@A
%oL6[2A%6p-1TFB'PLG`IjGOq';N?cFpe53eMnr^&UH*^3b2rg5(84P<G]F!^8T6]lIRpn(Z*C3E!YfA`I+?&u_L?-.a=5PP/BMT+
%?]F]c9;B3/Iu7Tn+p;[jjn!jhd%"m]pCP2V,+'W]0M_Q$;^M&QEo<G3[AG`aUo@3N%,PU%,iWObr56)'f8!'WM1cup+4SO]i@/I%
%Z5\i/3gP"!O<9fg==G:2W$SfL5`&L68fQq4)'AQ(P2?c;_kt]@ljh-h=4&pSH#'Xeh'2N[T[`hVCudr(c^u$l@_568*dR'c>#XYB
%0M^q%05-51A9qB0"7q_&HD[UC-PJZj^hcCn*n2*``Kk!)R3!aeJ]0aOabg.WS=^;sd3j>P=nK;$n^&%hq_j<.I&bkhRZ,R@?T[2s
%ioLkJj-Iq06+iAdodT;M_%J\00$Z9/P9o[/)WN2NW6BYY6Ce/hh@8=;$T0"e)HW6Z8,@s(lE>a-9VPSGNWmZl(0j;O#Es8nFWh2Q
%=JXN?Tr*^E)1579HDL-gLMfRe+(l2/Da?q.R())Li&Y78!2)/FBoT*n'sc#B8^[fLZV7#e(2G\uOpX3JfZfqV(nXhTQmD\j'm@M9
%7DNLsUjUN(4,($VV.;H'/D-t#0Ki.-]4A?UqUV(\)^3<I:EA86gKCQ9W*g*qNI(cohaYKa*iCsjG>AkbdPf:W:8-N"1[.mi\(>Gn
%gQrTF\"=EkrrDi'^l(id&k^-%Iit<**#>o;6T9tJLW%&,Ar+O>P)XcXhI77YE?b2:JJQ?&3>E'e?\<!C@!#]>aM5UpA.U*okF9&)
%EO#V@^iS^Q)&0f!C1[SbCp`>'DX!7@%W/7RZtKkb[E9.LGF%mK,?3GM*26_DJ>_u-d53G.(60\@8L'3+\Bg_<61K^\!P.(FK:.^4
%j@(!9f]bY?_-26>mE"5O/VaQc>I?=iPM2lpSOVfh]8JF?LTqM7M-bb49NMI2.>J]+:tmG?BBYQ7:[rA*^c+Ngmu]^-R/7?`SP@+0
%2UNqpB@8bBM$#eZ/-WWUF$#qU?4=^_f:?MFC)qpPptRFt,pt0JkGd6%&<QK>F#YG4i3>[ma"J)%k'6s()E<B1=NFNEC=*P-Um(pi
%iO#'^MCZnM=9*jfX/-R)_unsqGR":8_j(E,iipNLeiurZ,L0FK7?R0ZL`;l,7(HcAL"sX'VK!iGB>5-O/gJ\eTI7k+6WCgW9[+!+
%P74S5?a]>9@2eM$"d&gF#*Y&K:f]o-Sttpg1QmOU;LGX^W6PG'LdG.$.-36:j]9>5:t"2e.>[a'eeECnY[a>mUBfM,o#XcDSY]LK
%:`7NPGkr/NA=;):[nl1tR0V;\1B%58NX]+Fh"__ZQ'fdR=ftSD>qZIG7)qp?)KI^_TLOTL'"Pk26`NRuO+_U][J.lA@a+F-/8^4J
%s!"QR<Yb44%T&!'7ZagReU[F'15DX@E\L]0H'@D3_[>%ME@7GqA30h<*"]miJfIUE_O-L?e]>M2(%K)f%/:%8WQ8KkN/,n@F/WQ!
%`^Xns'UdFPWlDb^kOk"\TL!t&kd2bWdXWVB8'$q'UG1F'8r9ekLJ#Ap<&a.4>UM"D,CZiDCG3-pmPmM0bC,!g'a2hlCONJq93+0Q
%aL`^q]_HfErn4gIW`)MR1*VSATYA?=`5Ohcma!B:\6^T&M1N&g+nS<I:u*)\FTo=(QLkP&6:EAn-s_fQ>oJ!#Of7Cq7-d;;e>Rrq
%**?X0<\`J;TTN0U9H]F93lU_k%l/I^BepF%b>F.1V\OEb0J>'YB;0Sl;JKQYq#:dH>Y%8nZN_G+<=gdE:08PNVg::M"'bGDioVG7
%G"QH[[qIOC'%S%^2^qmHe6J#CNeKtrVAEJu.YYd8`Cg0"6OaY61"7%=/u(8-8EnnDCJ:ps0XpmF6<?X@0j*sRi9u09cll>'<J7bB
%PBfg\1?"+V'Br9J^FASUZ%+.5#>d2"`ed&#V(=Wm(n]_%"!\J@iMT_h@dG\5).qbQn0,G!oY1^WqM7XK*\RD@Oo(B^Sr`aP"on&^
%9?AN.Zg)XNBjXq9SM`!;n]h,r]aM`ogm(0)h6'%7H\XkASNOJ,p9VT,A2)/pJ.*2mg_LZg.raOh1%T8O%g,n/A/QY$"'mk`(bLER
%/5(Ol*DaEZ2*oW,82ZAC&<k^bp6,)MTUsQi$;RNhE!a\;?j@bW*h_Q<)j:'E#CS]*G`t::6S]3VCV_Z"`b_6J3(Cs)et!QCJ^Bnr
%*$ArBR4&!7JH-$m\RkVIbCSA>LtFZ'EmoZ8hK&aI@-_C0'9(V<[!ed(`hMidol9b!L-F(int4&L$buI'S>nCq\a)8XFmfE+a4>QP
%-<-`0Ydj`;k@k?CU\.5Wj_:1hb%8W<(JWedmPO[/ontp^C.Dro!_4/k":m0;n_Jf3G,(;rl'e9B?FIqoY4kG,J(k41TrILcPs*@A
%Fd,b3<h?9:DOFmhV^2LnW\>iZ@&@5-B]2n>G"XcMko9$mqJGqj`0.T.@?i?T$A6/"PDUK=6aX.VF?%A6h03%SjFUb#5\(U'M[@b?
%I+`g3U1!]^?urPb>'EG!PST]Yp41'4O.b"@a[CMUUO7kh??8(@qs"3/qV^rKUKk;Zfhda'K[[*Z$@P9(Hh)mnLKW]D";+5J3hJ!C
%2j,-ZmUl$a#P(P"H$LaJj[TG?SsA9kCh?YM7PsdD92_iJZ?F@CoouPsQ<G(.JGMH19SIqY^>$'i$r]QODS<E<Y`s1_O`k?%+-AHZ
%P+QqfLo:c;+err!;JWoH$b/^$&k^1-'kRre3nTV6\Brj7TeeuLim^rqPhcC2YdS-Gs':fuL4dO$?)K;C,gCA^o#kja0#?<jpbk_n
%_FncpDnoW<h?g1d;m+kX7JP[W"jeCN\4'Md-)V(_PtnT^N:V-U>n2;ti:`)2ZN(#j".Sk!oCg1'?9D"*($2SLkoWhqrieUMp+;7k
%F-O*N^kVr9[Lt)77,EH/-:$F$gh"#3J6I'u1V6VF_.3`N81f"G!eX-l<`gX!$I5HI\-P+ahL2!?-rFS#a0b?sC+u/q7d3gBC_AJR
%Fi9%INi(!iN$4oJ$%mP2pdJb+3#PUn@CFC5nlY671#YF68S.^p4%lo_k0=#SKWB?:UWR7:3tO51_\sg?igOs*MJAMp&Y?SM\DY[u
%5<3dn7lmi-mUli>-/#E\/L`($,[#K<bl&5^>fG$j"oT9*iJ//;Jh,8#@;k\-/8R%83"W%-VoXTP!3us\ObL,[;AJ]A$X/5'(,1uj
%'^`)6.3o4DM<uCt[mAPlbC21`":$&o!>qER"9Y3$R%-]8`uQldTWOcTC4pjZ3T\p0jUNQ2'(R`7/R_Uh\h@d0`j)InS:1b[&s)d#
%p`A311CV2I/N7G#LqtH.ociue"tKoLbqTRSa7HfZ8SoaLfkGjJ=GbB29(H@,dr=54\(\^)7b&(.s/%DMX9>\1c-WL_]XWci7t`jO
%UcB=_kbnIMhk+!&"B1X`L4s*+(,8;KO(VLQC-SC)Y/7(Dp^-Q25kB!lTZL<E5Ub$d0Es4L$Chot2?Uu=Ni%WN2WkbM2oAp.UpFSK
%9DV:dlj5?gmXWNAZ"A\ahPT5g*U_QmFN74<HuL4]aP_*[7fg"h_su:3rk.%'6`65?''JgQINfbVV@@9;dbZ1`9b\,mMAo%hKNdHY
%@/cnI!>Vuq.IC9Z;M;5F1o^nb\0I^#<ee[r=fc$[F%A&pWi%1ibUh223Ho)0B;$e[4@8Hu=k4;%crap_;af(#.&'A<#1A"mJP#B_
%WMegUOV"9FYE>6_1Af@YF4j6tAPBD9=>Ym]<cWA/*oAq+G=J#sXhl;sgdI@*H>PKoGXf]52>b7C?-9FC4@rG7bke9d7"l=@3l,/B
%^M!d$%YnL.mVP)A\g".dJo[l=Me^9r2]olG@7:&l!J839!Fn1DO\bRu[nn[uI?/t'7J3HV%aKm:@ea60Zn`#7=>=[Y/9!>&b,u$`
%Ro<NNR*$&e8QU<OJp".0N?'*nC,Hu-9iV77kOg&E&0t^k:u_pIG]NHi<K%MmK!1W%K8P;L(G70Om6F%Y1<gEPOKf*f4ENmLS.(]E
%:K=^`g-NF;DAU2%9INJBd]@6mp"JPE/a>NbK*&m<-?7Spr76sC/l0"6I>Y:,dE$i><j/MUDud4R8>p&+3bm>C8iGg@C.6]=lOL8*
%KXKQn=(-)AAND*>=fmA(MRISlW:F$cW)I!8=Mr5&?j&#WE*E?e9BG/jI+YuS-#`9$0Y250s%(>_^=Jp>4NM'OBj0X4q;^pa*,AIK
%$$6PQJW6ZB8gZ2!m$O:BW6TkMW2%Z$!f<JH15AtU#ZRLV'`iPqp;;_(a.`#gmR?QqMP(297"-6AP8f_><3#R4"W+r39ZqS%@%!`E
%-:C+eM8b/MTrp=\p8;3]mh9O#9JUb1cB!R#;_siF(XK0!+''.V'L`d:=W+)JM=8m"Q+m>*(OQJP)\$!G71BaB%d6.bjq"0Vjud#8
%H5:N&l#Ie<ik]+ok6XB,=lV*"/)J<b@lbiqgF^X5N'u8b-prT'GtsTP";1pU).r1[ell+Y:L=Ra+rh9WUW"Uu9`#+N7;sfcWW[*:
%G7<aG6s$S,C.+5X.,0u,]Jk;e,*Inu_MtM5`hN'M(1,><[A,-7g@E;GaP8u:XW].^75<?gZE;&cp1Aspjj)u9&\aTephu]na:^uF
%!B6P\\E-'0jf,$U2Ppb`0n<]NZo@ZHLS@5!-,'uu"d/hZJk4[:<iN["]GO:LS5iD\$!O\rn`iG<S?e^$UJ4`"48;8T>mtKDE'd_J
%MNPM=YZXe@o%-nrgpLa0hRrV/g2eI$h0#,.?Jf$%cU;1YH"#4f2HqJ`WWc.JQWAMbX+571pU^aC\.0RgeQo\Jo(2F$o>g\aT@rau
%jh5VI-!,HW56XjR*'pWLlF$\SJeG5C@&^",PBVL>:7]OX#1i&NB*_O98=,o^EnMJSgjE'YAk:eGl4nk86Y+,3!!7i)+qBWV`3$Ql
%*a4`$0es<hB2OmO$d,ZSacY>H`Mg0L)b:#oC\;:*"^r]akqXR8]1Ao^#V!)a/T#-D*%k7@b%G`5%u:?qeY*^W>eV<AT6D$aV`+)Q
%%@^WuF=(BD2Sbn"eNj5I3GMNj]E(@g)#:8J'$:SD+#pRP$@V3uiX_<pOaiaY_+Jklea+90r^OHK[WDlWdcY_i:s96RB_ebiS9[Xj
%fR2mpi"7c.QPJVEY_%bUd.5WR?M:kjia//SEE2A#\59mkqc_p'R!Y;O(HZWF@\J)'(?C1=:4$]XYpOC:,?e_Lh*qhq!c0qWBkHNO
%"Rh!Mk]$"QTTW<[(@(>1C<7F+(BYs3\!%frb\Sik&8`%X&*hIY`;jQU)1K<L]5*o@;]q+bhL@ZaUQh?tUQ#.dh)Z'DicgBKer\fP
%YF2,e>=3UTU[8aEXMR'98s]jUD%HWWFZ^q[Z/RV'9qK@JBrnh1$+K/'iS@XLa:)V2it+Y%HV"5N=A8'nmk!Til!4U.JEqS$BSkW<
%dkU>/dAqOP%%tHT]r!WWTfDVX8@9Fg13q(Xf?O,#"l1c<MtcK]UlPC('X>i)Lek"*Z;5XK/UTem+1?Hm/(up?#o39\Ra0]:n4JnI
%3O8+9+b'M(X2kHQj.=Dl]c=24>DaSON]E?GLQr!RREru=_Fr`3*l:EpXon(8o>V^M^TY`'NtK`R2R_@'\!tEupdbDhh.ojRX)]J>
%(M$,<.%nm-\sLu$/lO4N_N^Y>XPO6e[?"i_ml]qQkOr?aknTiT;,6&$cZH]jqSIG@HKY+YWIYSDDRfj??)Qn3q#7/`S&?/L\8\G-
%;T0DVgccaQg4m]G-D?,J&*CEF['A>@jDRrf2(5'(e'JsDZ39HuWp%q]2jQ(pN.=q0duW?'fm8YI5ImDi9PR:r5t+dU&?cKd<2SRX
%6iD7Y^3*V'e'W`ql'mRA6V?GC1LT)QKImQ+$n?o%l&DB_Q_tQ?HWkWcrUit$s8>1[n`sP3rUYO;p;bYF@K5nr^]!^&r,9@LpHSZV
%p]'L05QBcQ5Q9,]q=XV,s5$gC).LkA^]0'Rrqc$2bO>E.mm$j6TDnc/J,4q-s7&nbo$>)NIJ.kipdjsGrg3ZSs8;Iq^AZ5^?U*l@
%KE(G-J,/\#Y(-5]rY85CJ*VU[07Weqn%X>Kq]F;U^&662#E1n<4$WXDnOGg2IcN595?%f7H[@aOK2rQ`0Rilms4^o[o#?c>qodUk
%p](->5OZ?s$iITChYtOpoZ'2pfDkQr++;W:csY1+*lcr!nULT'+922pp1/[Lp]('8J%b`Cs8;%ErUit$IeuA/jk#"[VdKK%fBXq3
%r5aug$3"<#[c7>dlTb@ErLa,85QBPql6.h0P:D<?fSH"5bVeEgeM=2p[Ybi(B3^bD(V+j(GGfn,((^L&9Xj4FK->c%M\lj&<p54d
%A6&,C,K"/b[:20.k!asU7#Z9IBMn(Iiqo?hh[fs^Whf,07m$4QUdF12N_Y&2_h%u[_C@f?lp!lg(-;ugrhD4E_9,]tMbU39$.G]0
%KS=`^a;IO"?1c3XDIJ42;bhl7<492Hae&Tq;_YNTW7%m]3J78!BAJ=h984gO1$$NmZcL<2e&]%Pnu0G^,e#IhI8#qGnU5StPLEQi
%@!SWs^J4.P._+]M4UOtZ0=2[o0S2b15bDJ&g_A:;`ce[Y&1Em$Q.GjlUs%o$Fa+_r.+hO5N>9bE$E+XdM?59(Qf8p3R.Iad;_N`t
%<aG_=TjH[b(Kh?IK2N!9a-Z"7@*Kk^VW_^Q%V.*\0PNTDh-knKJn8Q<7):(QVaqY.nl%r_VWZCO%)VojHYL)SOW\n-]-p#$9t0.*
%W<,+F]5\c]9j5tgJnk%k2^?aYdpq*<'mgMA]P1Z>s1c"Cl#@UGUA'rH5P3Ca8r7%>aUqR3KN&6fgee2O6*Mq5=!7K*I;b^pAoe5q
%_f`E\`Z6FMB&8;!*ZtVeCZ@,dLoDgsS<MDeMnThG1K*]L6:urUPMAnK5isP#,faN0)_;nuAXqX2'-gWL"Rc_D=V0g#Qe=ktXX':.
%(96CG']$+BI2\6p.<!&Yphtg"T0uC%ou1RW;!!Mm!K%Lpi/0mX[UXi>)76W$`i24?IKX9"%0-o`Np)Z60J9_I%I+mIpMr1@?QsEJ
%/Xl!:/;q\"CF`E;CMU^!Ak[/=C+`M@:f`g2);E"P*PY9E.lI^Sg]XhG.P^)`TQ#HD'aSRj!$X*QV$KV`>A")#*3B":21-u!flYDJ
%RS-#o&o5`9QTtnp#/J1*7MH[3q.7n7Q^R"OgF8I$"4kS88M=./;1l8mV7mXJ!u*7XZ;2))d`XI7J?2?3j;KMUgee-KdA6-EAtu:k
%d2RA^R=,((_.K[aXXC@7:F.W-777i^ZuFHZ;Z5.e7HITt\i38f@VY2J:Tf"%^!&=:LGNhO!R"hu3s1b=Pc[Q&0oH%kU.Jb/.`@D/
%Z1HpRk6["I&@#Y'4/fg=r<GRrDr`Qi[;H`Y9%@g`?<isLmhG(C&&:*f%="472`t9iY;%h7/,G,V*YnZqZK0u"EjPD:Y`]qYZYq$>
%`T]1K5GNqDmM-ge1uo/5@AArtXtmE@/%VpKI>h'(,L*nJLs\6MS]4'n)&eSRE)`<6@V2Xke!,$6Dn=P"<gVZ9gAE[2\MX,`6&4Ku
%DuJ-L%_-k6%_R*,5!BrMn%.ETE-HL9Cu9I6rkm*2rSA'o2u?PJZeok["%nFKO7Su%qk65;*J])bqJuLf#ei-E@Cpr4pZD23%kfp/V#~>
%AI9_PrivateDataEnd
